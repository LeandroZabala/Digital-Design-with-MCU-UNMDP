
3-DisplayMultiplexado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000bc8  08000bc8  00010bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000bcc  08000bcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000000c  20000000  08000bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000030  2000000c  08000bdc  0002000c  2**2
                  ALLOC
  6 ._user_heap_stack 00000404  2000003c  08000c0c  0002000c  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000289a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00000ac2  00000000  00000000  000228d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000240  00000000  00000000  00023398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000001c8  00000000  00000000  000235d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00024673  00000000  00000000  000237a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000517b  00000000  00000000  00047e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000e408a  00000000  00000000  0004cf8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  00131018  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000006c4  00000000  00000000  0013106c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000bb0 	.word	0x08000bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000bb0 	.word	0x08000bb0

080001c8 <main>:
uint8_t StartFlag =0;	//Si StartFlag=1 el cronometro Cuenta. Si es 0 esta detenido.
uint8_t ResetFlag =0;	//Si ResetFlag=1 el cronometro Se resetea. Si es 0 esta andando.

// ----- main() ---------------------------------------------------------------
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	/* System Tick Init */
	SysTick_Init (SYSTICK_FREQ_HZ);
 80001ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d2:	f000 fca1 	bl	8000b18 <SysTick_Init>

	/* Conf. Entradas */
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA Peripheral clock
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
 80001da:	4b41      	ldr	r3, [pc, #260]	; (80002e0 <main+0x118>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a40      	ldr	r2, [pc, #256]	; (80002e0 <main+0x118>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
 80001e6:	4b3e      	ldr	r3, [pc, #248]	; (80002e0 <main+0x118>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
	In_Init(GPIOA, SW1|SW2);
 80001f2:	2114      	movs	r1, #20
 80001f4:	483b      	ldr	r0, [pc, #236]	; (80002e4 <main+0x11c>)
 80001f6:	f000 fc0c 	bl	8000a12 <In_Init>

	/* Conf. Salidas */
	__HAL_RCC_GPIOC_CLK_ENABLE(); // Enable GPIOC Peripheral clock
 80001fa:	2300      	movs	r3, #0
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	4b38      	ldr	r3, [pc, #224]	; (80002e0 <main+0x118>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	4a37      	ldr	r2, [pc, #220]	; (80002e0 <main+0x118>)
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	6313      	str	r3, [r2, #48]	; 0x30
 800020a:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <main+0x118>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	f003 0304 	and.w	r3, r3, #4
 8000212:	60bb      	str	r3, [r7, #8]
 8000214:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE(); // Enable GPIOD Peripheral clock
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	4b31      	ldr	r3, [pc, #196]	; (80002e0 <main+0x118>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021e:	4a30      	ldr	r2, [pc, #192]	; (80002e0 <main+0x118>)
 8000220:	f043 0308 	orr.w	r3, r3, #8
 8000224:	6313      	str	r3, [r2, #48]	; 0x30
 8000226:	4b2e      	ldr	r3, [pc, #184]	; (80002e0 <main+0x118>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022a:	f003 0308 	and.w	r3, r3, #8
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]

	Out_Init(GPIOC, SEL_MUX_0|SEL_MUX_1);	// Defino como salidas las entradas al decodificador.
 8000232:	2105      	movs	r1, #5
 8000234:	482c      	ldr	r0, [pc, #176]	; (80002e8 <main+0x120>)
 8000236:	f000 fc03 	bl	8000a40 <Out_Init>
											// Defino como salidas cada segmento de los displays.
	Out_Init(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD);
 800023a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800023e:	482b      	ldr	r0, [pc, #172]	; (80002ec <main+0x124>)
 8000240:	f000 fbfe 	bl	8000a40 <Out_Init>


	while (1) // Loop infinito.
	{
		if(HAL_GPIO_ReadPin(GPIOA, SW1)==0){	// Detecta el pulsador apretado
 8000244:	2104      	movs	r1, #4
 8000246:	4827      	ldr	r0, [pc, #156]	; (80002e4 <main+0x11c>)
 8000248:	f000 fbb2 	bl	80009b0 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d11c      	bne.n	800028c <main+0xc4>
			HAL_Delay(30);
 8000252:	201e      	movs	r0, #30
 8000254:	f000 f9ec 	bl	8000630 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOA,SW1)==0){
 8000258:	2104      	movs	r1, #4
 800025a:	4822      	ldr	r0, [pc, #136]	; (80002e4 <main+0x11c>)
 800025c:	f000 fba8 	bl	80009b0 <HAL_GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d10a      	bne.n	800027c <main+0xb4>
					if(StartFlag==0){
 8000266:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <main+0x128>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d103      	bne.n	8000276 <main+0xae>
						StartFlag=1;
 800026e:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <main+0x128>)
 8000270:	2201      	movs	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
 8000274:	e002      	b.n	800027c <main+0xb4>
					}else {
						StartFlag=0;
 8000276:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <main+0x128>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
					}
			}
			while(HAL_GPIO_ReadPin(GPIOA, SW1)==0){
 800027c:	bf00      	nop
 800027e:	2104      	movs	r1, #4
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <main+0x11c>)
 8000282:	f000 fb95 	bl	80009b0 <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f8      	beq.n	800027e <main+0xb6>
			}

		}
		if(HAL_GPIO_ReadPin(GPIOA, SW2)==0){	// Detecta el pulsador apretado
 800028c:	2110      	movs	r1, #16
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <main+0x11c>)
 8000290:	f000 fb8e 	bl	80009b0 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1d4      	bne.n	8000244 <main+0x7c>
			HAL_Delay(30);
 800029a:	201e      	movs	r0, #30
 800029c:	f000 f9c8 	bl	8000630 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOA,SW2)==0){
 80002a0:	2110      	movs	r1, #16
 80002a2:	4810      	ldr	r0, [pc, #64]	; (80002e4 <main+0x11c>)
 80002a4:	f000 fb84 	bl	80009b0 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d10e      	bne.n	80002cc <main+0x104>
					if(ResetFlag==0 && StartFlag==0){
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <main+0x12c>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d107      	bne.n	80002c6 <main+0xfe>
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <main+0x128>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d103      	bne.n	80002c6 <main+0xfe>
						ResetFlag=1;
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <main+0x12c>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	e002      	b.n	80002cc <main+0x104>
					}else {
						ResetFlag=0;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <main+0x12c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
					}
			}
			while(HAL_GPIO_ReadPin(GPIOA, SW2)==0){
 80002cc:	bf00      	nop
 80002ce:	2110      	movs	r1, #16
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <main+0x11c>)
 80002d2:	f000 fb6d 	bl	80009b0 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f8      	beq.n	80002ce <main+0x106>
		if(HAL_GPIO_ReadPin(GPIOA, SW1)==0){	// Detecta el pulsador apretado
 80002dc:	e7b2      	b.n	8000244 <main+0x7c>
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40020800 	.word	0x40020800
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	20000028 	.word	0x20000028
 80002f4:	20000029 	.word	0x20000029

080002f8 <SysTickHook>:

}

// ----------------------------------------------------------------------------
void SysTickHook (void) // Para colgarse del System Tick
{
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b08a      	sub	sp, #40	; 0x28
 80002fc:	af00      	add	r7, sp, #0

	static uint8_t BufDisp[4] = {0,0,0,0};
	static uint8_t Digito =0;		// digito se inicializa en 0. Como se definio static
									// el programa no vuelve a pasar por aca. No vuelve a hacerse 0 cada
									// vez que pasa.
if (ResetFlag==1){
 80002fe:	4b80      	ldr	r3, [pc, #512]	; (8000500 <SysTickHook+0x208>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d111      	bne.n	800032a <SysTickHook+0x32>
	Contams= 0;
 8000306:	4b7f      	ldr	r3, [pc, #508]	; (8000504 <SysTickHook+0x20c>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
	ContaDECms= 0;
 800030c:	4b7e      	ldr	r3, [pc, #504]	; (8000508 <SysTickHook+0x210>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
	ContaCENTms= 0;
 8000312:	4b7e      	ldr	r3, [pc, #504]	; (800050c <SysTickHook+0x214>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
	Contaseg= 0;
 8000318:	4b7d      	ldr	r3, [pc, #500]	; (8000510 <SysTickHook+0x218>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
	ContaDECseg=0;
 800031e:	4b7d      	ldr	r3, [pc, #500]	; (8000514 <SysTickHook+0x21c>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
	ResetFlag=0;
 8000324:	4b76      	ldr	r3, [pc, #472]	; (8000500 <SysTickHook+0x208>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
}

if(StartFlag==1){		//Si La bandera de Start es 1==> permite que se actualizen los contadores.
 800032a:	4b7b      	ldr	r3, [pc, #492]	; (8000518 <SysTickHook+0x220>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d14c      	bne.n	80003cc <SysTickHook+0xd4>
						//Por ende cambian los numeros presentados en el display.
	Contams=Contams+1;
 8000332:	4b74      	ldr	r3, [pc, #464]	; (8000504 <SysTickHook+0x20c>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b72      	ldr	r3, [pc, #456]	; (8000504 <SysTickHook+0x20c>)
 800033c:	701a      	strb	r2, [r3, #0]

	if(Contams == 10){
 800033e:	4b71      	ldr	r3, [pc, #452]	; (8000504 <SysTickHook+0x20c>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b0a      	cmp	r3, #10
 8000344:	d142      	bne.n	80003cc <SysTickHook+0xd4>
		Contams= 0;
 8000346:	4b6f      	ldr	r3, [pc, #444]	; (8000504 <SysTickHook+0x20c>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
		ContaDECms++;
 800034c:	4b6e      	ldr	r3, [pc, #440]	; (8000508 <SysTickHook+0x210>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b6c      	ldr	r3, [pc, #432]	; (8000508 <SysTickHook+0x210>)
 8000356:	701a      	strb	r2, [r3, #0]
		if(ContaDECms == 10){
 8000358:	4b6b      	ldr	r3, [pc, #428]	; (8000508 <SysTickHook+0x210>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b0a      	cmp	r3, #10
 800035e:	d135      	bne.n	80003cc <SysTickHook+0xd4>
			ContaDECms= 0;
 8000360:	4b69      	ldr	r3, [pc, #420]	; (8000508 <SysTickHook+0x210>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
			ContaCENTms++;
 8000366:	4b69      	ldr	r3, [pc, #420]	; (800050c <SysTickHook+0x214>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4b67      	ldr	r3, [pc, #412]	; (800050c <SysTickHook+0x214>)
 8000370:	701a      	strb	r2, [r3, #0]
			if(ContaCENTms == 10){
 8000372:	4b66      	ldr	r3, [pc, #408]	; (800050c <SysTickHook+0x214>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b0a      	cmp	r3, #10
 8000378:	d128      	bne.n	80003cc <SysTickHook+0xd4>
					ContaCENTms= 0;
 800037a:	4b64      	ldr	r3, [pc, #400]	; (800050c <SysTickHook+0x214>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
					Contaseg++;
 8000380:	4b63      	ldr	r3, [pc, #396]	; (8000510 <SysTickHook+0x218>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	3301      	adds	r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b61      	ldr	r3, [pc, #388]	; (8000510 <SysTickHook+0x218>)
 800038a:	701a      	strb	r2, [r3, #0]
					if(Contaseg == 10){
 800038c:	4b60      	ldr	r3, [pc, #384]	; (8000510 <SysTickHook+0x218>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b0a      	cmp	r3, #10
 8000392:	d11b      	bne.n	80003cc <SysTickHook+0xd4>
							Contaseg= 0;
 8000394:	4b5e      	ldr	r3, [pc, #376]	; (8000510 <SysTickHook+0x218>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
							ContaDECseg++;
 800039a:	4b5e      	ldr	r3, [pc, #376]	; (8000514 <SysTickHook+0x21c>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	3301      	adds	r3, #1
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b5c      	ldr	r3, [pc, #368]	; (8000514 <SysTickHook+0x21c>)
 80003a4:	701a      	strb	r2, [r3, #0]
							if(ContaDECseg == 6){	//Cuando se llega al maximo, el cronometro queda en 0000
 80003a6:	4b5b      	ldr	r3, [pc, #364]	; (8000514 <SysTickHook+0x21c>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b06      	cmp	r3, #6
 80003ac:	d10e      	bne.n	80003cc <SysTickHook+0xd4>
								Contams= 0;
 80003ae:	4b55      	ldr	r3, [pc, #340]	; (8000504 <SysTickHook+0x20c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
								ContaDECms= 0;
 80003b4:	4b54      	ldr	r3, [pc, #336]	; (8000508 <SysTickHook+0x210>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
								ContaCENTms= 0;
 80003ba:	4b54      	ldr	r3, [pc, #336]	; (800050c <SysTickHook+0x214>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
								Contaseg= 0;
 80003c0:	4b53      	ldr	r3, [pc, #332]	; (8000510 <SysTickHook+0x218>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
								ContaDECseg=0;
 80003c6:	4b53      	ldr	r3, [pc, #332]	; (8000514 <SysTickHook+0x21c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]

}
	//El buffer se actualiza cada 1ms, sin embargo esto no es necesario, ya que cambia cada 10ms.
	// Se podria ubicar este segmento de codigo en otra parte del programa, pero se deja asi por pulcritud de codigo.

	BufDisp[3]=ContaDECms;
 80003cc:	4b4e      	ldr	r3, [pc, #312]	; (8000508 <SysTickHook+0x210>)
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <SysTickHook+0x224>)
 80003d2:	70da      	strb	r2, [r3, #3]
	BufDisp[2]=ContaCENTms;
 80003d4:	4b4d      	ldr	r3, [pc, #308]	; (800050c <SysTickHook+0x214>)
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	4b50      	ldr	r3, [pc, #320]	; (800051c <SysTickHook+0x224>)
 80003da:	709a      	strb	r2, [r3, #2]
	BufDisp[1]=Contaseg;
 80003dc:	4b4c      	ldr	r3, [pc, #304]	; (8000510 <SysTickHook+0x218>)
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	4b4e      	ldr	r3, [pc, #312]	; (800051c <SysTickHook+0x224>)
 80003e2:	705a      	strb	r2, [r3, #1]
	BufDisp[0]=ContaDECseg;
 80003e4:	4b4b      	ldr	r3, [pc, #300]	; (8000514 <SysTickHook+0x21c>)
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	4b4c      	ldr	r3, [pc, #304]	; (800051c <SysTickHook+0x224>)
 80003ea:	701a      	strb	r2, [r3, #0]



	// Tabla de Conversion BCD -> 7 segmentos
	const uint32_t BIN7SEG[] = {
 80003ec:	4b4c      	ldr	r3, [pc, #304]	; (8000520 <SysTickHook+0x228>)
 80003ee:	463c      	mov	r4, r7
 80003f0:	461d      	mov	r5, r3
 80003f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003fe:	e884 0003 	stmia.w	r4, {r0, r1}
	SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_f|SEGMENTO_g				// Nueve
								};
	// Escriba su codigo aqui


	if(Digito == 4){
 8000402:	4b48      	ldr	r3, [pc, #288]	; (8000524 <SysTickHook+0x22c>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b04      	cmp	r3, #4
 8000408:	d102      	bne.n	8000410 <SysTickHook+0x118>
		Digito= 0;
 800040a:	4b46      	ldr	r3, [pc, #280]	; (8000524 <SysTickHook+0x22c>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
	}

	switch(Digito){
 8000410:	4b44      	ldr	r3, [pc, #272]	; (8000524 <SysTickHook+0x22c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d837      	bhi.n	8000488 <SysTickHook+0x190>
 8000418:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <SysTickHook+0x128>)
 800041a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041e:	bf00      	nop
 8000420:	08000431 	.word	0x08000431
 8000424:	08000447 	.word	0x08000447
 8000428:	0800045d 	.word	0x0800045d
 800042c:	08000473 	.word	0x08000473
		case 0:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2104      	movs	r1, #4
 8000434:	483c      	ldr	r0, [pc, #240]	; (8000528 <SysTickHook+0x230>)
 8000436:	f000 fad3 	bl	80009e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2101      	movs	r1, #1
 800043e:	483a      	ldr	r0, [pc, #232]	; (8000528 <SysTickHook+0x230>)
 8000440:	f000 face 	bl	80009e0 <HAL_GPIO_WritePin>
			break;
 8000444:	e020      	b.n	8000488 <SysTickHook+0x190>
		case 1:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2104      	movs	r1, #4
 800044a:	4837      	ldr	r0, [pc, #220]	; (8000528 <SysTickHook+0x230>)
 800044c:	f000 fac8 	bl	80009e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	4834      	ldr	r0, [pc, #208]	; (8000528 <SysTickHook+0x230>)
 8000456:	f000 fac3 	bl	80009e0 <HAL_GPIO_WritePin>
			break;
 800045a:	e015      	b.n	8000488 <SysTickHook+0x190>
		case 2:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2104      	movs	r1, #4
 8000460:	4831      	ldr	r0, [pc, #196]	; (8000528 <SysTickHook+0x230>)
 8000462:	f000 fabd 	bl	80009e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2101      	movs	r1, #1
 800046a:	482f      	ldr	r0, [pc, #188]	; (8000528 <SysTickHook+0x230>)
 800046c:	f000 fab8 	bl	80009e0 <HAL_GPIO_WritePin>
			break;
 8000470:	e00a      	b.n	8000488 <SysTickHook+0x190>
		case 3:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	2104      	movs	r1, #4
 8000476:	482c      	ldr	r0, [pc, #176]	; (8000528 <SysTickHook+0x230>)
 8000478:	f000 fab2 	bl	80009e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	4829      	ldr	r0, [pc, #164]	; (8000528 <SysTickHook+0x230>)
 8000482:	f000 faad 	bl	80009e0 <HAL_GPIO_WritePin>
			break;
 8000486:	bf00      	nop
		}
//	Out_Init(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD);
	HAL_GPIO_WritePin(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD , GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800048e:	4827      	ldr	r0, [pc, #156]	; (800052c <SysTickHook+0x234>)
 8000490:	f000 faa6 	bl	80009e0 <HAL_GPIO_WritePin>
	if(Digito==2){
 8000494:	4b23      	ldr	r3, [pc, #140]	; (8000524 <SysTickHook+0x22c>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d115      	bne.n	80004c8 <SysTickHook+0x1d0>
		HAL_GPIO_WritePin(GPIOD, BIN7SEG[BufDisp[-Digito+3]]|SEGMENTO_PD, GPIO_PIN_SET);	// Si quiero encender el digito de los segundos
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <SysTickHook+0x22c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	f1c3 0303 	rsb	r3, r3, #3
 80004a4:	4a1d      	ldr	r2, [pc, #116]	; (800051c <SysTickHook+0x224>)
 80004a6:	5cd3      	ldrb	r3, [r2, r3]
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80004ae:	4413      	add	r3, r2
 80004b0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	2201      	movs	r2, #1
 80004be:	4619      	mov	r1, r3
 80004c0:	481a      	ldr	r0, [pc, #104]	; (800052c <SysTickHook+0x234>)
 80004c2:	f000 fa8d 	bl	80009e0 <HAL_GPIO_WritePin>
 80004c6:	e011      	b.n	80004ec <SysTickHook+0x1f4>
																							// enciendo el numero + el punto decimal
	}else{
			HAL_GPIO_WritePin(GPIOD, BIN7SEG[BufDisp[-Digito+3]], GPIO_PIN_SET);			// Si quiero encender cualquier otro digito que no
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <SysTickHook+0x22c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	f1c3 0303 	rsb	r3, r3, #3
 80004d0:	4a12      	ldr	r2, [pc, #72]	; (800051c <SysTickHook+0x224>)
 80004d2:	5cd3      	ldrb	r3, [r2, r3]
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80004da:	4413      	add	r3, r2
 80004dc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	4811      	ldr	r0, [pc, #68]	; (800052c <SysTickHook+0x234>)
 80004e8:	f000 fa7a 	bl	80009e0 <HAL_GPIO_WritePin>
																							// sea el de los segundos, ilumino los segmentos correspondiente al numero unicamente.
	}																						// es decir, no le prendo el punto decimal


	Digito=Digito+1;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <SysTickHook+0x22c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <SysTickHook+0x22c>)
 80004f6:	701a      	strb	r2, [r3, #0]

}
 80004f8:	bf00      	nop
 80004fa:	3728      	adds	r7, #40	; 0x28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000500:	20000029 	.word	0x20000029
 8000504:	2000002a 	.word	0x2000002a
 8000508:	2000002b 	.word	0x2000002b
 800050c:	2000002c 	.word	0x2000002c
 8000510:	2000002d 	.word	0x2000002d
 8000514:	2000002e 	.word	0x2000002e
 8000518:	20000028 	.word	0x20000028
 800051c:	20000030 	.word	0x20000030
 8000520:	08000b88 	.word	0x08000b88
 8000524:	20000034 	.word	0x20000034
 8000528:	40020800 	.word	0x40020800
 800052c:	40020c00 	.word	0x40020c00

08000530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <SystemInit+0x60>)
 8000536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <SystemInit+0x60>)
 800053c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <SystemInit+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <SystemInit+0x64>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <SystemInit+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <SystemInit+0x64>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <SystemInit+0x64>)
 800055c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000564:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <SystemInit+0x64>)
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <SystemInit+0x68>)
 800056a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <SystemInit+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <SystemInit+0x64>)
 8000572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SystemInit+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <SystemInit+0x60>)
 8000580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000584:	609a      	str	r2, [r3, #8]
#endif
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00
 8000594:	40023800 	.word	0x40023800
 8000598:	24003010 	.word	0x24003010

0800059c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005a2:	e003      	b.n	80005ac <LoopCopyDataInit>

080005a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005aa:	3104      	adds	r1, #4

080005ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005b4:	d3f6      	bcc.n	80005a4 <CopyDataInit>
  ldr  r2, =_sbss
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005b8:	e002      	b.n	80005c0 <LoopFillZerobss>

080005ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005bc:	f842 3b04 	str.w	r3, [r2], #4

080005c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005c4:	d3f9      	bcc.n	80005ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005c6:	f7ff ffb3 	bl	8000530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ca:	f000 fab9 	bl	8000b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ce:	f7ff fdfb 	bl	80001c8 <main>
  bx  lr    
 80005d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005d8:	08000bd0 	.word	0x08000bd0
  ldr  r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80005e8:	2000003c 	.word	0x2000003c

080005ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC_IRQHandler>
	...

080005f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x20>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_IncTick+0x24>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_IncTick+0x24>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008
 8000614:	20000038 	.word	0x20000038

08000618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <HAL_GetTick+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000038 	.word	0x20000038

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000638:	f7ff ffee 	bl	8000618 <HAL_GetTick>
 800063c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000648:	d005      	beq.n	8000656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_Delay+0x44>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	bf00      	nop
 8000658:	f7ff ffde 	bl	8000618 <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	d8f7      	bhi.n	8000658 <HAL_Delay+0x28>
  {
  }
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008

08000678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	e16b      	b.n	800096c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000694:	2201      	movs	r2, #1
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	4013      	ands	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	f040 815a 	bne.w	8000966 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d003      	beq.n	80006c2 <HAL_GPIO_Init+0x4a>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	2b12      	cmp	r3, #18
 80006c0:	d123      	bne.n	800070a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	08da      	lsrs	r2, r3, #3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3208      	adds	r2, #8
 80006ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	220f      	movs	r2, #15
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	4013      	ands	r3, r2
 80006e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	691a      	ldr	r2, [r3, #16]
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	f003 0307 	and.w	r3, r3, #7
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	08da      	lsrs	r2, r3, #3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3208      	adds	r2, #8
 8000704:	69b9      	ldr	r1, [r7, #24]
 8000706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	2203      	movs	r2, #3
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43db      	mvns	r3, r3
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	4013      	ands	r3, r2
 8000720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f003 0203 	and.w	r2, r3, #3
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4313      	orrs	r3, r2
 8000736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	69ba      	ldr	r2, [r7, #24]
 800073c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d00b      	beq.n	800075e <HAL_GPIO_Init+0xe6>
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d007      	beq.n	800075e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000752:	2b11      	cmp	r3, #17
 8000754:	d003      	beq.n	800075e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b12      	cmp	r3, #18
 800075c:	d130      	bne.n	80007c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	2203      	movs	r2, #3
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	69ba      	ldr	r2, [r7, #24]
 8000772:	4013      	ands	r3, r2
 8000774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	69ba      	ldr	r2, [r7, #24]
 8000784:	4313      	orrs	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000794:	2201      	movs	r2, #1
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	4013      	ands	r3, r2
 80007a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	091b      	lsrs	r3, r3, #4
 80007aa:	f003 0201 	and.w	r2, r3, #1
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	69ba      	ldr	r2, [r7, #24]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	2203      	movs	r2, #3
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	4013      	ands	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 80b4 	beq.w	8000966 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b60      	ldr	r3, [pc, #384]	; (8000984 <HAL_GPIO_Init+0x30c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a5f      	ldr	r2, [pc, #380]	; (8000984 <HAL_GPIO_Init+0x30c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b5d      	ldr	r3, [pc, #372]	; (8000984 <HAL_GPIO_Init+0x30c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800081a:	4a5b      	ldr	r2, [pc, #364]	; (8000988 <HAL_GPIO_Init+0x310>)
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	089b      	lsrs	r3, r3, #2
 8000820:	3302      	adds	r3, #2
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	220f      	movs	r2, #15
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	4013      	ands	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a52      	ldr	r2, [pc, #328]	; (800098c <HAL_GPIO_Init+0x314>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d02b      	beq.n	800089e <HAL_GPIO_Init+0x226>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a51      	ldr	r2, [pc, #324]	; (8000990 <HAL_GPIO_Init+0x318>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d025      	beq.n	800089a <HAL_GPIO_Init+0x222>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a50      	ldr	r2, [pc, #320]	; (8000994 <HAL_GPIO_Init+0x31c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d01f      	beq.n	8000896 <HAL_GPIO_Init+0x21e>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a4f      	ldr	r2, [pc, #316]	; (8000998 <HAL_GPIO_Init+0x320>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d019      	beq.n	8000892 <HAL_GPIO_Init+0x21a>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <HAL_GPIO_Init+0x324>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d013      	beq.n	800088e <HAL_GPIO_Init+0x216>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a4d      	ldr	r2, [pc, #308]	; (80009a0 <HAL_GPIO_Init+0x328>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d00d      	beq.n	800088a <HAL_GPIO_Init+0x212>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a4c      	ldr	r2, [pc, #304]	; (80009a4 <HAL_GPIO_Init+0x32c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d007      	beq.n	8000886 <HAL_GPIO_Init+0x20e>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a4b      	ldr	r2, [pc, #300]	; (80009a8 <HAL_GPIO_Init+0x330>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_GPIO_Init+0x20a>
 800087e:	2307      	movs	r3, #7
 8000880:	e00e      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 8000882:	2308      	movs	r3, #8
 8000884:	e00c      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 8000886:	2306      	movs	r3, #6
 8000888:	e00a      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 800088a:	2305      	movs	r3, #5
 800088c:	e008      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 800088e:	2304      	movs	r3, #4
 8000890:	e006      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 8000892:	2303      	movs	r3, #3
 8000894:	e004      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 8000896:	2302      	movs	r3, #2
 8000898:	e002      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 800089a:	2301      	movs	r3, #1
 800089c:	e000      	b.n	80008a0 <HAL_GPIO_Init+0x228>
 800089e:	2300      	movs	r3, #0
 80008a0:	69fa      	ldr	r2, [r7, #28]
 80008a2:	f002 0203 	and.w	r2, r2, #3
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	4093      	lsls	r3, r2
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008b0:	4935      	ldr	r1, [pc, #212]	; (8000988 <HAL_GPIO_Init+0x310>)
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	089b      	lsrs	r3, r3, #2
 80008b6:	3302      	adds	r3, #2
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008be:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <HAL_GPIO_Init+0x334>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	43db      	mvns	r3, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4013      	ands	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80008e2:	4a32      	ldr	r2, [pc, #200]	; (80009ac <HAL_GPIO_Init+0x334>)
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <HAL_GPIO_Init+0x334>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <HAL_GPIO_Init+0x334>)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <HAL_GPIO_Init+0x334>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000936:	4a1d      	ldr	r2, [pc, #116]	; (80009ac <HAL_GPIO_Init+0x334>)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <HAL_GPIO_Init+0x334>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	43db      	mvns	r3, r3
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d003      	beq.n	8000960 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <HAL_GPIO_Init+0x334>)
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3301      	adds	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	f67f ae90 	bls.w	8000694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40013800 	.word	0x40013800
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40021000 	.word	0x40021000
 80009a0:	40021400 	.word	0x40021400
 80009a4:	40021800 	.word	0x40021800
 80009a8:	40021c00 	.word	0x40021c00
 80009ac:	40013c00 	.word	0x40013c00

080009b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	691a      	ldr	r2, [r3, #16]
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	4013      	ands	r3, r2
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e001      	b.n	80009d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	807b      	strh	r3, [r7, #2]
 80009ec:	4613      	mov	r3, r2
 80009ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009f0:	787b      	ldrb	r3, [r7, #1]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009f6:	887a      	ldrh	r2, [r7, #2]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80009fc:	e003      	b.n	8000a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	041a      	lsls	r2, r3, #16
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	619a      	str	r2, [r3, #24]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <In_Init>:
 */
#include "Entradas.h"
/*----------------------------------------------------------------------------
  Inicializa Pines del Puerto, especificados en la mascara, como entrada
 *----------------------------------------------------------------------------*/
void In_Init(GPIO_TypeDef  *GPIOx, uint32_t mask) {
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b088      	sub	sp, #32
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pin =mask;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;		// Frec.Max.
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fe20 	bl	8000678 <HAL_GPIO_Init>
}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <Out_Init>:
 */
#include "Salidas.h"
/*----------------------------------------------------------------------------
  inicializa Port E/S
 *----------------------------------------------------------------------------*/
void Out_Init(GPIO_TypeDef  *GPIOx, uint32_t mask) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	// Configure pin(s)
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = mask;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;	// Pin(s) as Output
 8000a4e:	2301      	movs	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;		// Frec.Max.
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;			// Pin(s) as No Pull
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);		// Initialize GPIO_InitStructure on GPIOx
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fe09 	bl	8000678 <HAL_GPIO_Init>
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f7ff ffc2 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <SysTick_Handler>:
#include "SysTick.h"
// ----------------------------------------------------------------------------
// ----- SysTick_Handler() ----------------------------------------------------
// ----------------------------------------------------------------------------
void SysTick_Handler (void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_IncTick();	//Incrementa Tick del sistema (usado por algunas funciones de HAL Driver)
 8000b0c:	f7ff fd70 	bl	80005f0 <HAL_IncTick>
	SysTickHook (); // Función para colgarse de la interrupción del System Tick
 8000b10:	f7ff fbf2 	bl	80002f8 <SysTickHook>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SysTick_Init>:

void SysTick_Init(uint16_t Frec_Ticks_Hz){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	SysTick_Config (SystemCoreClock / Frec_Ticks_Hz);
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SysTick_Init+0x24>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ffc9 	bl	8000ac4 <SysTick_Config>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000000 	.word	0x20000000

08000b40 <__libc_init_array>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4d0d      	ldr	r5, [pc, #52]	; (8000b78 <__libc_init_array+0x38>)
 8000b44:	4c0d      	ldr	r4, [pc, #52]	; (8000b7c <__libc_init_array+0x3c>)
 8000b46:	1b64      	subs	r4, r4, r5
 8000b48:	10a4      	asrs	r4, r4, #2
 8000b4a:	2600      	movs	r6, #0
 8000b4c:	42a6      	cmp	r6, r4
 8000b4e:	d109      	bne.n	8000b64 <__libc_init_array+0x24>
 8000b50:	4d0b      	ldr	r5, [pc, #44]	; (8000b80 <__libc_init_array+0x40>)
 8000b52:	4c0c      	ldr	r4, [pc, #48]	; (8000b84 <__libc_init_array+0x44>)
 8000b54:	f000 f82c 	bl	8000bb0 <_init>
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	10a4      	asrs	r4, r4, #2
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	42a6      	cmp	r6, r4
 8000b60:	d105      	bne.n	8000b6e <__libc_init_array+0x2e>
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b68:	4798      	blx	r3
 8000b6a:	3601      	adds	r6, #1
 8000b6c:	e7ee      	b.n	8000b4c <__libc_init_array+0xc>
 8000b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b72:	4798      	blx	r3
 8000b74:	3601      	adds	r6, #1
 8000b76:	e7f2      	b.n	8000b5e <__libc_init_array+0x1e>
 8000b78:	08000bc8 	.word	0x08000bc8
 8000b7c:	08000bc8 	.word	0x08000bc8
 8000b80:	08000bc8 	.word	0x08000bc8
 8000b84:	08000bcc 	.word	0x08000bcc
 8000b88:	0000eb00 	.word	0x0000eb00
 8000b8c:	00000900 	.word	0x00000900
 8000b90:	00007300 	.word	0x00007300
 8000b94:	00005b00 	.word	0x00005b00
 8000b98:	00009900 	.word	0x00009900
 8000b9c:	0000da00 	.word	0x0000da00
 8000ba0:	0000ba00 	.word	0x0000ba00
 8000ba4:	00004900 	.word	0x00004900
 8000ba8:	0000fb00 	.word	0x0000fb00
 8000bac:	0000d900 	.word	0x0000d900

08000bb0 <_init>:
 8000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb2:	bf00      	nop
 8000bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bb6:	bc08      	pop	{r3}
 8000bb8:	469e      	mov	lr, r3
 8000bba:	4770      	bx	lr

08000bbc <_fini>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	bf00      	nop
 8000bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc2:	bc08      	pop	{r3}
 8000bc4:	469e      	mov	lr, r3
 8000bc6:	4770      	bx	lr
