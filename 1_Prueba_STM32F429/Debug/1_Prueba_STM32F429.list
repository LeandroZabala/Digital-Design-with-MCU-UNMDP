
1_Prueba_STM32F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b40c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b640  0800b640  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b640  0800b640  0001b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b648  0800b648  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b648  0800b648  0001b648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b64c  0800b64c  0001b64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cd8  20000094  0800b6e4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008d6c  0800b6e4  00028d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f2c0  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b97  00000000  00000000  0004f384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  00054f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea0  00000000  00000000  00056fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae01  00000000  00000000  00058e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e3f  00000000  00000000  00083c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f290e  00000000  00000000  000abaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e3ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c90  00000000  00000000  0019e404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b5a4 	.word	0x0800b5a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800b5a4 	.word	0x0800b5a4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a06      	ldr	r2, [pc, #24]	; (800054c <vApplicationGetIdleTaskMemory+0x30>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200000b0 	.word	0x200000b0
 800054c:	20000108 	.word	0x20000108

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 ff29 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f84b 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 fa39 	bl	80009d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000562:	f000 f8b1 	bl	80006c8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000566:	f000 f8c3 	bl	80006f0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800056a:	f000 f9e3 	bl	8000934 <MX_FMC_Init>
  MX_I2C3_Init();
 800056e:	f000 f8f1 	bl	8000754 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000572:	f000 f92f 	bl	80007d4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000576:	f000 f963 	bl	8000840 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800057a:	f000 f9b1 	bl	80008e0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <main+0x98>)
 8000580:	1d3c      	adds	r4, r7, #4
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f008 f976 	bl	8008886 <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0x9c>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f008 f96a 	bl	8008878 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOG,LED_ROJO_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005aa:	4811      	ldr	r0, [pc, #68]	; (80005f0 <main+0xa0>)
 80005ac:	f001 fbfa 	bl	8001da4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOG,LED_VERDE_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <main+0xa0>)
 80005b8:	f001 fbf4 	bl	8001da4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c0:	f000 ff36 	bl	8001430 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOG,LED_ROJO_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <main+0xa0>)
 80005cc:	f001 fbea 	bl	8001da4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOG,LED_VERDE_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <main+0xa0>)
 80005d8:	f001 fbe4 	bl	8001da4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e0:	f000 ff26 	bl	8001430 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOG,LED_ROJO_Pin, GPIO_PIN_SET);
 80005e4:	e7de      	b.n	80005a4 <main+0x54>
 80005e6:	bf00      	nop
 80005e8:	0800b5c8 	.word	0x0800b5c8
 80005ec:	20008470 	.word	0x20008470
 80005f0:	40021800 	.word	0x40021800

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f00a fefe 	bl	800b404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800066c:	2348      	movs	r3, #72	; 0x48
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fadb 	bl	8003c38 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000688:	f000 fb5c 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fd3d 	bl	8004128 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b4:	f000 fb46 	bl	8000d44 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_CRC_Init+0x20>)
 80006ce:	4a07      	ldr	r2, [pc, #28]	; (80006ec <MX_CRC_Init+0x24>)
 80006d0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_CRC_Init+0x20>)
 80006d4:	f000 ffb2 	bl	800163c <HAL_CRC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006de:	f000 fb31 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20008520 	.word	0x20008520
 80006ec:	40023000 	.word	0x40023000

080006f0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_DMA2D_Init+0x5c>)
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <MX_DMA2D_Init+0x60>)
 80006f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_DMA2D_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_DMA2D_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_DMA2D_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_DMA2D_Init+0x5c>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_DMA2D_Init+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_DMA2D_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_DMA2D_Init+0x5c>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <MX_DMA2D_Init+0x5c>)
 8000726:	f000 ffa5 	bl	8001674 <HAL_DMA2D_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000730:	f000 fb08 	bl	8000d44 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000734:	2101      	movs	r1, #1
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_DMA2D_Init+0x5c>)
 8000738:	f001 f8f6 	bl	8001928 <HAL_DMA2D_ConfigLayer>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000742:	f000 faff 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200085b4 	.word	0x200085b4
 8000750:	4002b000 	.word	0x4002b000

08000754 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_I2C3_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_I2C3_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_I2C3_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_I2C3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000776:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_I2C3_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C3_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000792:	f003 f891 	bl	80038b8 <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 fad2 	bl	8000d44 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_I2C3_Init+0x74>)
 80007a4:	f003 f9cc 	bl	8003b40 <HAL_I2CEx_ConfigAnalogFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007ae:	f000 fac9 	bl	8000d44 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2C3_Init+0x74>)
 80007b6:	f003 f9ff 	bl	8003bb8 <HAL_I2CEx_ConfigDigitalFilter>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007c0:	f000 fac0 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20008474 	.word	0x20008474
 80007cc:	40005c00 	.word	0x40005c00
 80007d0:	000186a0 	.word	0x000186a0

080007d4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_SPI5_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_SPI5_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_SPI5_Init+0x64>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_SPI5_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_SPI5_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_SPI5_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_SPI5_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_SPI5_Init+0x64>)
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_SPI5_Init+0x64>)
 8000808:	2218      	movs	r2, #24
 800080a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_SPI5_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_SPI5_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_SPI5_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_SPI5_Init+0x64>)
 8000820:	220a      	movs	r2, #10
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_SPI5_Init+0x64>)
 8000826:	f003 fee1 	bl	80045ec <HAL_SPI_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000830:	f000 fa88 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200084c8 	.word	0x200084c8
 800083c:	40015000 	.word	0x40015000

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_TIM1_Init+0x98>)
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <MX_TIM1_Init+0x9c>)
 8000860:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_TIM1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_TIM1_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_TIM1_Init+0x98>)
 8000870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_TIM1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_TIM1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_TIM1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000888:	4813      	ldr	r0, [pc, #76]	; (80008d8 <MX_TIM1_Init+0x98>)
 800088a:	f003 ff38 	bl	80046fe <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000894:	f000 fa56 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	4619      	mov	r1, r3
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_TIM1_Init+0x98>)
 80008a6:	f004 f8f1 	bl	8004a8c <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008b0:	f000 fa48 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008bc:	463b      	mov	r3, r7
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_TIM1_Init+0x98>)
 80008c2:	f004 fb0d 	bl	8004ee0 <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008cc:	f000 fa3a 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000856c 	.word	0x2000856c
 80008dc:	40010000 	.word	0x40010000

080008e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_USART1_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART1_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART1_UART_Init+0x4c>)
 8000918:	f004 fb72 	bl	8005000 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 fa0f 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20008528 	.word	0x20008528
 8000930:	40011000 	.word	0x40011000

08000934 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_FMC_Init+0x98>)
 800094e:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <MX_FMC_Init+0x9c>)
 8000950:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_FMC_Init+0x98>)
 8000954:	2201      	movs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_FMC_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_FMC_Init+0x98>)
 8000960:	2204      	movs	r2, #4
 8000962:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_FMC_Init+0x98>)
 8000966:	2210      	movs	r2, #16
 8000968:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_FMC_Init+0x98>)
 800096c:	2240      	movs	r2, #64	; 0x40
 800096e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_FMC_Init+0x98>)
 8000972:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000976:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_FMC_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_FMC_Init+0x98>)
 8000980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000984:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_FMC_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_FMC_Init+0x98>)
 800098e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000998:	2307      	movs	r3, #7
 800099a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800099c:	2304      	movs	r3, #4
 800099e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009a0:	2307      	movs	r3, #7
 80009a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009a4:	2303      	movs	r3, #3
 80009a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_FMC_Init+0x98>)
 80009b6:	f003 fde5 	bl	8004584 <HAL_SDRAM_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009c0:	f000 f9c0 	bl	8000d44 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200085f4 	.word	0x200085f4
 80009d0:	a0000140 	.word	0xa0000140

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	4bb2      	ldr	r3, [pc, #712]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4ab1      	ldr	r2, [pc, #708]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4baf      	ldr	r3, [pc, #700]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	4bab      	ldr	r3, [pc, #684]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4aaa      	ldr	r2, [pc, #680]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4ba8      	ldr	r3, [pc, #672]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4ba4      	ldr	r3, [pc, #656]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4aa3      	ldr	r2, [pc, #652]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4ba1      	ldr	r3, [pc, #644]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	4b9d      	ldr	r3, [pc, #628]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a9c      	ldr	r2, [pc, #624]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b9a      	ldr	r3, [pc, #616]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b96      	ldr	r3, [pc, #600]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a95      	ldr	r2, [pc, #596]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b93      	ldr	r3, [pc, #588]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b8f      	ldr	r3, [pc, #572]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a8e      	ldr	r2, [pc, #568]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b8c      	ldr	r3, [pc, #560]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b88      	ldr	r3, [pc, #544]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a87      	ldr	r2, [pc, #540]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b85      	ldr	r3, [pc, #532]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b81      	ldr	r3, [pc, #516]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a80      	ldr	r2, [pc, #512]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b7e      	ldr	r3, [pc, #504]	; (8000cb8 <MX_GPIO_Init+0x2e4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2116      	movs	r1, #22
 8000ace:	487b      	ldr	r0, [pc, #492]	; (8000cbc <MX_GPIO_Init+0x2e8>)
 8000ad0:	f001 f968 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	4879      	ldr	r0, [pc, #484]	; (8000cc0 <MX_GPIO_Init+0x2ec>)
 8000ada:	f001 f963 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ae4:	4877      	ldr	r0, [pc, #476]	; (8000cc4 <MX_GPIO_Init+0x2f0>)
 8000ae6:	f001 f95d 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_VERDE_Pin|LED_ROJO_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000af0:	4875      	ldr	r0, [pc, #468]	; (8000cc8 <MX_GPIO_Init+0x2f4>)
 8000af2:	f001 f957 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b08:	230e      	movs	r3, #14
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	486e      	ldr	r0, [pc, #440]	; (8000ccc <MX_GPIO_Init+0x2f8>)
 8000b14:	f000 ff9a 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b18:	2316      	movs	r3, #22
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4863      	ldr	r0, [pc, #396]	; (8000cbc <MX_GPIO_Init+0x2e8>)
 8000b30:	f000 ff8c 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b34:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b3a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	485d      	ldr	r0, [pc, #372]	; (8000cc0 <MX_GPIO_Init+0x2ec>)
 8000b4c:	f000 ff7e 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000b50:	f641 0358 	movw	r3, #6232	; 0x1858
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4854      	ldr	r0, [pc, #336]	; (8000cc0 <MX_GPIO_Init+0x2ec>)
 8000b6e:	f000 ff6d 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	484d      	ldr	r0, [pc, #308]	; (8000cc0 <MX_GPIO_Init+0x2ec>)
 8000b8a:	f000 ff5f 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4846      	ldr	r0, [pc, #280]	; (8000cbc <MX_GPIO_Init+0x2e8>)
 8000ba4:	f000 ff52 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4843      	ldr	r0, [pc, #268]	; (8000cd0 <MX_GPIO_Init+0x2fc>)
 8000bc4:	f000 ff42 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	483d      	ldr	r0, [pc, #244]	; (8000cd0 <MX_GPIO_Init+0x2fc>)
 8000bdc:	f000 ff36 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000be0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4834      	ldr	r0, [pc, #208]	; (8000cd0 <MX_GPIO_Init+0x2fc>)
 8000bfe:	f000 ff25 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	482b      	ldr	r0, [pc, #172]	; (8000cc4 <MX_GPIO_Init+0x2f0>)
 8000c18:	f000 ff18 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4823      	ldr	r0, [pc, #140]	; (8000cc4 <MX_GPIO_Init+0x2f0>)
 8000c36:	f000 ff09 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000c3a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c4c:	230e      	movs	r3, #14
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	481c      	ldr	r0, [pc, #112]	; (8000cc8 <MX_GPIO_Init+0x2f4>)
 8000c58:	f000 fef8 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000c5c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c6e:	230e      	movs	r3, #14
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4810      	ldr	r0, [pc, #64]	; (8000cbc <MX_GPIO_Init+0x2e8>)
 8000c7a:	f000 fee7 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c7e:	2348      	movs	r3, #72	; 0x48
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c8e:	230e      	movs	r3, #14
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <MX_GPIO_Init+0x2f0>)
 8000c9a:	f000 fed7 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cb0:	2309      	movs	r3, #9
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb4:	e00e      	b.n	8000cd4 <MX_GPIO_Init+0x300>
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020c00 	.word	0x40020c00
 8000cc8:	40021800 	.word	0x40021800
 8000ccc:	40021400 	.word	0x40021400
 8000cd0:	40020400 	.word	0x40020400
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0x334>)
 8000cdc:	f000 feb6 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin LED_ROJO_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_ROJO_Pin;
 8000ce0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <MX_GPIO_Init+0x334>)
 8000cfa:	f000 fea7 	bl	8001a4c <HAL_GPIO_Init>

}
 8000cfe:	bf00      	nop
 8000d00:	3738      	adds	r7, #56	; 0x38
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021800 	.word	0x40021800

08000d0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d14:	f00a f826 	bl	800ad64 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f007 fe00 	bl	800891e <osDelay>
 8000d1e:	e7fb      	b.n	8000d18 <StartDefaultTask+0xc>

08000d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d32:	f000 fb5d 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40001000 	.word	0x40001000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_MspInit+0x54>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <HAL_MspInit+0x54>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_MspInit+0x54>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_MspInit+0x54>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_MspInit+0x54>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_MspInit+0x54>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	f06f 0001 	mvn.w	r0, #1
 8000d96:	f000 fc27 	bl	80015e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_CRC_MspInit+0x3c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10d      	bne.n	8000dd6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_CRC_MspInit+0x40>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <HAL_CRC_MspInit+0x40>)
 8000dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_CRC_MspInit+0x40>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023000 	.word	0x40023000
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_DMA2D_MspInit+0x48>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d115      	bne.n	8000e2a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_DMA2D_MspInit+0x4c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_DMA2D_MspInit+0x4c>)
 8000e08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_DMA2D_MspInit+0x4c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	205a      	movs	r0, #90	; 0x5a
 8000e20:	f000 fbe2 	bl	80015e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e24:	205a      	movs	r0, #90	; 0x5a
 8000e26:	f000 fbfb 	bl	8001620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	4002b000 	.word	0x4002b000
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <HAL_I2C_MspInit+0xc4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d14b      	bne.n	8000ef6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9c:	2312      	movs	r3, #18
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4815      	ldr	r0, [pc, #84]	; (8000f08 <HAL_I2C_MspInit+0xcc>)
 8000eb4:	f000 fdca 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <HAL_I2C_MspInit+0xd0>)
 8000ed6:	f000 fdb9 	bl	8001a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_I2C_MspInit+0xc8>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40005c00 	.word	0x40005c00
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_SPI_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12c      	bne.n	8000f8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_SPI_MspInit+0x88>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_SPI_MspInit+0x88>)
 8000f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_SPI_MspInit+0x88>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_SPI_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_SPI_MspInit+0x88>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_SPI_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000f6a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_SPI_MspInit+0x8c>)
 8000f88:	f000 fd60 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40015000 	.word	0x40015000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_UART_MspInit+0x84>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12c      	bne.n	8001060 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_UART_MspInit+0x88>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_UART_MspInit+0x88>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_UART_MspInit+0x88>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_UART_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_UART_MspInit+0x88>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_UART_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800103e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001050:	2307      	movs	r3, #7
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_UART_MspInit+0x8c>)
 800105c:	f000 fcf6 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40011000 	.word	0x40011000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000

08001074 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HAL_FMC_MspInit+0x104>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d16f      	bne.n	8001170 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <HAL_FMC_MspInit+0x104>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <HAL_FMC_MspInit+0x108>)
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	4a37      	ldr	r2, [pc, #220]	; (800117c <HAL_FMC_MspInit+0x108>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_FMC_MspInit+0x108>)
 80010a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80010b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010b6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c4:	230c      	movs	r3, #12
 80010c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	482c      	ldr	r0, [pc, #176]	; (8001180 <HAL_FMC_MspInit+0x10c>)
 80010ce:	f000 fcbd 	bl	8001a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4826      	ldr	r0, [pc, #152]	; (8001184 <HAL_FMC_MspInit+0x110>)
 80010ec:	f000 fcae 	bl	8001a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010f0:	f248 1333 	movw	r3, #33075	; 0x8133
 80010f4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001102:	230c      	movs	r3, #12
 8001104:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	481f      	ldr	r0, [pc, #124]	; (8001188 <HAL_FMC_MspInit+0x114>)
 800110c:	f000 fc9e 	bl	8001a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001110:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001114:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001122:	230c      	movs	r3, #12
 8001124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <HAL_FMC_MspInit+0x118>)
 800112c:	f000 fc8e 	bl	8001a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001130:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001134:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001142:	230c      	movs	r3, #12
 8001144:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4619      	mov	r1, r3
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <HAL_FMC_MspInit+0x11c>)
 800114c:	f000 fc7e 	bl	8001a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001150:	2360      	movs	r3, #96	; 0x60
 8001152:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001160:	230c      	movs	r3, #12
 8001162:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <HAL_FMC_MspInit+0x120>)
 800116a:	f000 fc6f 	bl	8001a4c <HAL_GPIO_Init>
 800116e:	e000      	b.n	8001172 <HAL_FMC_MspInit+0xfe>
    return;
 8001170:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000308 	.word	0x20000308
 800117c:	40023800 	.word	0x40023800
 8001180:	40021400 	.word	0x40021400
 8001184:	40020800 	.word	0x40020800
 8001188:	40021800 	.word	0x40021800
 800118c:	40021000 	.word	0x40021000
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40020400 	.word	0x40020400

08001198 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011a0:	f7ff ff68 	bl	8001074 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2036      	movs	r0, #54	; 0x36
 80011c2:	f000 fa11 	bl	80015e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c6:	2036      	movs	r0, #54	; 0x36
 80011c8:	f000 fa2a 	bl	8001620 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_InitTick+0xa4>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <HAL_InitTick+0xa4>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_InitTick+0xa4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e8:	f107 0210 	add.w	r2, r7, #16
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f994 	bl	8004520 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011f8:	f003 f96a 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 80011fc:	4603      	mov	r3, r0
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_InitTick+0xa8>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9b      	lsrs	r3, r3, #18
 800120c:	3b01      	subs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_InitTick+0xac>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_InitTick+0xb0>)
 8001214:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_InitTick+0xac>)
 8001218:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_InitTick+0xac>)
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_InitTick+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_InitTick+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_InitTick+0xac>)
 8001232:	f003 fa64 	bl	80046fe <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <HAL_InitTick+0xac>)
 800123e:	f003 faad 	bl	800479c <HAL_TIM_Base_Start_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3730      	adds	r7, #48	; 0x30
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	431bde83 	.word	0x431bde83
 8001258:	20008628 	.word	0x20008628
 800125c:	40001000 	.word	0x40001000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM6_DAC_IRQHandler+0x10>)
 8001292:	f003 faf3 	bl	800487c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20008628 	.word	0x20008628

080012a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <OTG_HS_IRQHandler+0x10>)
 80012a6:	f001 f801 	bl	80022ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20008a58 	.word	0x20008a58

080012b4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <DMA2D_IRQHandler+0x10>)
 80012ba:	f000 fa24 	bl	8001706 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200085b4 	.word	0x200085b4

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f00a f83c 	bl	800b374 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20030000 	.word	0x20030000
 8001328:	00000400 	.word	0x00000400
 800132c:	2000030c 	.word	0x2000030c
 8001330:	20008d70 	.word	0x20008d70

08001334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001374:	4c0b      	ldr	r4, [pc, #44]	; (80013a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001382:	f7ff ffd7 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f009 fffb 	bl	800b380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff f8e1 	bl	8000550 <main>
  bx  lr    
 800138e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001390:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800139c:	0800b650 	.word	0x0800b650
  ldr r2, =_sbss
 80013a0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013a4:	20008d6c 	.word	0x20008d6c

080013a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_Init+0x40>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_Init+0x40>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x40>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f8fc 	bl	80015d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fee6 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fcb6 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	20008670 	.word	0x20008670

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20008670 	.word	0x20008670

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff4c 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015fa:	f7ff ff61 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 80015fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f7ff ffb1 	bl	800156c <NVIC_EncodePriority>
 800160a:	4602      	mov	r2, r0
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff80 	bl	8001518 <__NVIC_SetPriority>
}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff54 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	795b      	ldrb	r3, [r3, #5]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fba2 	bl	8000da8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e03b      	b.n	80016fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fba6 	bl	8000dec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c4:	f023 0107 	bic.w	r1, r3, #7
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68d1      	ldr	r1, [r2, #12]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	430b      	orrs	r3, r1
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d026      	beq.n	8001776 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d021      	beq.n	8001776 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001740:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d026      	beq.n	80017ce <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d021      	beq.n	80017ce <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001798:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2220      	movs	r2, #32
 80017a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	f043 0202 	orr.w	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2204      	movs	r2, #4
 80017b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d026      	beq.n	8001826 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d021      	beq.n	8001826 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2208      	movs	r2, #8
 80017f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	f043 0204 	orr.w	r2, r3, #4
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2204      	movs	r2, #4
 800180a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00e      	beq.n	8001858 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001848:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2204      	movs	r2, #4
 8001850:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f853 	bl	80018fe <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d024      	beq.n	80018ac <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01f      	beq.n	80018ac <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800187a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2202      	movs	r2, #2
 8001882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01f      	beq.n	80018f6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01a      	beq.n	80018f6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f80e 	bl	8001912 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_DMA2D_ConfigLayer+0x20>
 8001944:	2302      	movs	r3, #2
 8001946:	e079      	b.n	8001a3c <HAL_DMA2D_ConfigLayer+0x114>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	3318      	adds	r3, #24
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_DMA2D_ConfigLayer+0x120>)
 8001974:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d003      	beq.n	8001986 <HAL_DMA2D_ConfigLayer+0x5e>
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b09      	cmp	r3, #9
 8001984:	d107      	bne.n	8001996 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e005      	b.n	80019a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	061b      	lsls	r3, r3, #24
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4313      	orrs	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d120      	bne.n	80019ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	ea02 0103 	and.w	r1, r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	430a      	orrs	r2, r1
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b0a      	cmp	r3, #10
 80019d0:	d003      	beq.n	80019da <HAL_DMA2D_ConfigLayer+0xb2>
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	d127      	bne.n	8001a2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
 80019e8:	e01f      	b.n	8001a2a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	ea02 0103 	and.w	r1, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b0a      	cmp	r3, #10
 8001a12:	d003      	beq.n	8001a1c <HAL_DMA2D_ConfigLayer+0xf4>
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d106      	bne.n	8001a2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a28:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	ff03000f 	.word	0xff03000f

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e177      	b.n	8001d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 8166 	bne.w	8001d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d005      	beq.n	8001a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d130      	bne.n	8001b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 0201 	and.w	r2, r3, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d017      	beq.n	8001b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d123      	bne.n	8001b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80c0 	beq.w	8001d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a65      	ldr	r2, [pc, #404]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bee:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <HAL_GPIO_Init+0x328>)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_GPIO_Init+0x32c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d037      	beq.n	8001c8a <HAL_GPIO_Init+0x23e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d031      	beq.n	8001c86 <HAL_GPIO_Init+0x23a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_GPIO_Init+0x334>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x236>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <HAL_GPIO_Init+0x338>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x232>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_GPIO_Init+0x33c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x22e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_GPIO_Init+0x340>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x22a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x344>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x226>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_GPIO_Init+0x348>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x222>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_GPIO_Init+0x34c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x21e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x350>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x21a>
 8001c62:	2309      	movs	r3, #9
 8001c64:	e012      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c66:	230a      	movs	r3, #10
 8001c68:	e010      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	e00e      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x328>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cce:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf8:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f ae84 	bls.w	8001a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40022400 	.word	0x40022400
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd8:	b08f      	sub	sp, #60	; 0x3c
 8001dda:	af0a      	add	r7, sp, #40	; 0x28
 8001ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e054      	b.n	8001e92 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f009 f802 	bl	800ae0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fc64 	bl	80056f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	687e      	ldr	r6, [r7, #4]
 8001e34:	466d      	mov	r5, sp
 8001e36:	f106 0410 	add.w	r4, r6, #16
 8001e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e4a:	1d33      	adds	r3, r6, #4
 8001e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f003 fbde 	bl	8005610 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fc5b 	bl	8005716 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	687e      	ldr	r6, [r7, #4]
 8001e68:	466d      	mov	r5, sp
 8001e6a:	f106 0410 	add.w	r4, r6, #16
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7e:	1d33      	adds	r3, r6, #4
 8001e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f003 fdc2 	bl	8005a0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e9a:	b590      	push	{r4, r7, lr}
 8001e9c:	b089      	sub	sp, #36	; 0x24
 8001e9e:	af04      	add	r7, sp, #16
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	4608      	mov	r0, r1
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	70fb      	strb	r3, [r7, #3]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70bb      	strb	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_HCD_HC_Init+0x28>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e076      	b.n	8001fb0 <HAL_HCD_HC_Init+0x116>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	333d      	adds	r3, #61	; 0x3d
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3338      	adds	r3, #56	; 0x38
 8001eea:	787a      	ldrb	r2, [r7, #1]
 8001eec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3340      	adds	r3, #64	; 0x40
 8001efc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001efe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3339      	adds	r3, #57	; 0x39
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	333f      	adds	r3, #63	; 0x3f
 8001f20:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	78ba      	ldrb	r2, [r7, #2]
 8001f2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f2e:	b2d0      	uxtb	r0, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	333a      	adds	r3, #58	; 0x3a
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da09      	bge.n	8001f5c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	333b      	adds	r3, #59	; 0x3b
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e008      	b.n	8001f6e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	212c      	movs	r1, #44	; 0x2c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	333b      	adds	r3, #59	; 0x3b
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	333c      	adds	r3, #60	; 0x3c
 8001f7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f80:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	787c      	ldrb	r4, [r7, #1]
 8001f88:	78ba      	ldrb	r2, [r7, #2]
 8001f8a:	78f9      	ldrb	r1, [r7, #3]
 8001f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	f003 feaf 	bl	8005d00 <USB_HC_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}

08001fb8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_HCD_HC_Halt+0x1e>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e00f      	b.n	8001ff6 <HAL_HCD_HC_Halt+0x3e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 f8eb 	bl	80061c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	70fb      	strb	r3, [r7, #3]
 8002012:	460b      	mov	r3, r1
 8002014:	70bb      	strb	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	333b      	adds	r3, #59	; 0x3b
 8002028:	78ba      	ldrb	r2, [r7, #2]
 800202a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	333f      	adds	r3, #63	; 0x3f
 800203a:	787a      	ldrb	r2, [r7, #1]
 800203c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800203e:	7c3b      	ldrb	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d112      	bne.n	800206a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3342      	adds	r3, #66	; 0x42
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	333d      	adds	r3, #61	; 0x3d
 8002064:	7f3a      	ldrb	r2, [r7, #28]
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e008      	b.n	800207c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3342      	adds	r3, #66	; 0x42
 8002078:	2202      	movs	r2, #2
 800207a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b03      	cmp	r3, #3
 8002080:	f200 80c6 	bhi.w	8002210 <HAL_HCD_HC_SubmitRequest+0x210>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080021fd 	.word	0x080021fd
 8002094:	08002101 	.word	0x08002101
 8002098:	0800217f 	.word	0x0800217f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800209c:	7c3b      	ldrb	r3, [r7, #16]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	f040 80b8 	bne.w	8002214 <HAL_HCD_HC_SubmitRequest+0x214>
 80020a4:	78bb      	ldrb	r3, [r7, #2]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80b4 	bne.w	8002214 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020ac:	8b3b      	ldrh	r3, [r7, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3355      	adds	r3, #85	; 0x55
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3355      	adds	r3, #85	; 0x55
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3342      	adds	r3, #66	; 0x42
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020ea:	e093      	b.n	8002214 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3342      	adds	r3, #66	; 0x42
 80020fa:	2202      	movs	r2, #2
 80020fc:	701a      	strb	r2, [r3, #0]
      break;
 80020fe:	e089      	b.n	8002214 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002100:	78bb      	ldrb	r3, [r7, #2]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d11d      	bne.n	8002142 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3355      	adds	r3, #85	; 0x55
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3342      	adds	r3, #66	; 0x42
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800212c:	e073      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3342      	adds	r3, #66	; 0x42
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
      break;
 8002140:	e069      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3354      	adds	r3, #84	; 0x54
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3342      	adds	r3, #66	; 0x42
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
      break;
 8002168:	e055      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3342      	adds	r3, #66	; 0x42
 8002178:	2202      	movs	r2, #2
 800217a:	701a      	strb	r2, [r3, #0]
      break;
 800217c:	e04b      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800217e:	78bb      	ldrb	r3, [r7, #2]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11d      	bne.n	80021c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3355      	adds	r3, #85	; 0x55
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3342      	adds	r3, #66	; 0x42
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021aa:	e034      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3342      	adds	r3, #66	; 0x42
 80021ba:	2202      	movs	r2, #2
 80021bc:	701a      	strb	r2, [r3, #0]
      break;
 80021be:	e02a      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3354      	adds	r3, #84	; 0x54
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3342      	adds	r3, #66	; 0x42
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
      break;
 80021e6:	e016      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3342      	adds	r3, #66	; 0x42
 80021f6:	2202      	movs	r2, #2
 80021f8:	701a      	strb	r2, [r3, #0]
      break;
 80021fa:	e00c      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3342      	adds	r3, #66	; 0x42
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
      break;
 800220e:	e002      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002210:	bf00      	nop
 8002212:	e000      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002214:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3344      	adds	r3, #68	; 0x44
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	8b3a      	ldrh	r2, [r7, #24]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	202c      	movs	r0, #44	; 0x2c
 8002230:	fb00 f303 	mul.w	r3, r0, r3
 8002234:	440b      	add	r3, r1
 8002236:	334c      	adds	r3, #76	; 0x4c
 8002238:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3360      	adds	r3, #96	; 0x60
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3350      	adds	r3, #80	; 0x50
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3339      	adds	r3, #57	; 0x39
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3361      	adds	r3, #97	; 0x61
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	222c      	movs	r2, #44	; 0x2c
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	3338      	adds	r3, #56	; 0x38
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	18d1      	adds	r1, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	f003 fe3e 	bl	8005f1c <USB_HC_StartXfer>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop

080022ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fb61 	bl	800598a <USB_GetMode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	f040 80f6 	bne.w	80024bc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fb45 	bl	8005964 <USB_ReadInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80ec 	beq.w	80024ba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fb3c 	bl	8005964 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022f6:	d104      	bne.n	8002302 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002300:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fb2c 	bl	8005964 <USB_ReadInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002316:	d104      	bne.n	8002322 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002320:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fb1c 	bl	8005964 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002336:	d104      	bne.n	8002342 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002340:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fb0c 	bl	8005964 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2202      	movs	r2, #2
 800235c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fafe 	bl	8005964 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800236e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002372:	d11c      	bne.n	80023ae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800237c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800238e:	2110      	movs	r1, #16
 8002390:	6938      	ldr	r0, [r7, #16]
 8002392:	f003 fa0d 	bl	80057b0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002396:	6938      	ldr	r0, [r7, #16]
 8002398:	f003 fa2e 	bl	80057f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fbe6 	bl	8005b74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f008 fda9 	bl	800af00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fad6 	bl	8005964 <USB_ReadInterrupts>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c2:	d102      	bne.n	80023ca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f001 fa03 	bl	80037d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 fac8 	bl	8005964 <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d106      	bne.n	80023ec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f008 fd72 	bl	800aec8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2208      	movs	r2, #8
 80023ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fab7 	bl	8005964 <USB_ReadInterrupts>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d101      	bne.n	8002404 <HAL_HCD_IRQHandler+0x158>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_HCD_IRQHandler+0x15a>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d012      	beq.n	8002430 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0210 	bic.w	r2, r2, #16
 8002418:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f001 f906 	bl	800362c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0210 	orr.w	r2, r2, #16
 800242e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fa95 	bl	8005964 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002444:	d13a      	bne.n	80024bc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fea8 	bl	80061a0 <USB_HC_ReadInterrupt>
 8002450:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e025      	b.n	80024a4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d018      	beq.n	800249e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002482:	d106      	bne.n	8002492 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8ab 	bl	80025e6 <HCD_HC_IN_IRQHandler>
 8002490:	e005      	b.n	800249e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fcc6 	bl	8002e2a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3d4      	bcc.n	8002458 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b6:	615a      	str	r2, [r3, #20]
 80024b8:	e000      	b.n	80024bc <HAL_HCD_IRQHandler+0x210>
      return;
 80024ba:	bf00      	nop
    }
  }
}
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_HCD_Start+0x16>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e013      	b.n	8002500 <HAL_HCD_Start+0x3e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fba8 	bl	8005c3c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 f8ee 	bl	80056d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_HCD_Stop+0x16>
 800251a:	2302      	movs	r3, #2
 800251c:	e00d      	b.n	800253a <HAL_HCD_Stop+0x32>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 ffa2 	bl	8006474 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fb4a 	bl	8005be8 <USB_ResetPort>
 8002554:	4603      	mov	r3, r0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3360      	adds	r3, #96	; 0x60
 8002578:	781b      	ldrb	r3, [r3, #0]
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3350      	adds	r3, #80	; 0x50
 80025a0:	681b      	ldr	r3, [r3, #0]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 fb8e 	bl	8005cdc <USB_GetCurrentFrame>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fb69 	bl	8005cae <USB_GetHostSpeed>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d119      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	461a      	mov	r2, r3
 8002624:	2304      	movs	r3, #4
 8002626:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	0151      	lsls	r1, r2, #5
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	440a      	add	r2, r1
 800263e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	60d3      	str	r3, [r2, #12]
 8002648:	e101      	b.n	800284e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002660:	d12b      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	461a      	mov	r2, r3
 8002670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002674:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3361      	adds	r3, #97	; 0x61
 8002684:	2207      	movs	r2, #7
 8002686:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	0151      	lsls	r1, r2, #5
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	440a      	add	r2, r1
 800269e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fd85 	bl	80061c2 <USB_HC_Halt>
 80026b8:	e0c9      	b.n	800284e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d109      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2320      	movs	r3, #32
 80026e0:	6093      	str	r3, [r2, #8]
 80026e2:	e0b4      	b.n	800284e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d133      	bne.n	8002762 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	0151      	lsls	r1, r2, #5
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	440a      	add	r2, r1
 8002710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3361      	adds	r3, #97	; 0x61
 8002728:	2205      	movs	r2, #5
 800272a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	461a      	mov	r2, r3
 800273a:	2310      	movs	r3, #16
 800273c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	461a      	mov	r2, r3
 800274c:	2308      	movs	r3, #8
 800274e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fd31 	bl	80061c2 <USB_HC_Halt>
 8002760:	e075      	b.n	800284e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002778:	d134      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	0151      	lsls	r1, r2, #5
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	440a      	add	r2, r1
 8002790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	3361      	adds	r3, #97	; 0x61
 80027a8:	2208      	movs	r2, #8
 80027aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2310      	movs	r3, #16
 80027bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	461a      	mov	r2, r3
 80027cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 fcf0 	bl	80061c2 <USB_HC_Halt>
 80027e2:	e034      	b.n	800284e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b80      	cmp	r3, #128	; 0x80
 80027f8:	d129      	bne.n	800284e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	440a      	add	r2, r1
 8002810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3361      	adds	r3, #97	; 0x61
 8002828:	2206      	movs	r2, #6
 800282a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fcc3 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	461a      	mov	r2, r3
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002864:	d122      	bne.n	80028ac <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	0151      	lsls	r1, r2, #5
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	440a      	add	r2, r1
 800287c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fc96 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028aa:	e2ba      	b.n	8002e22 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 811b 	bne.w	8002afa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d019      	beq.n	8002900 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3348      	adds	r3, #72	; 0x48
 80028da:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0159      	lsls	r1, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	440b      	add	r3, r1
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028ee:	1ad2      	subs	r2, r2, r3
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	202c      	movs	r0, #44	; 0x2c
 80028f6:	fb00 f303 	mul.w	r3, r0, r3
 80028fa:	440b      	add	r3, r1
 80028fc:	3350      	adds	r3, #80	; 0x50
 80028fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	335c      	adds	r3, #92	; 0x5c
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	2301      	movs	r3, #1
 8002934:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	333f      	adds	r3, #63	; 0x3f
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	333f      	adds	r3, #63	; 0x3f
 8002958:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800295a:	2b02      	cmp	r3, #2
 800295c:	d121      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	0151      	lsls	r1, r2, #5
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	440a      	add	r2, r1
 8002974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fc1a 	bl	80061c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	2310      	movs	r3, #16
 800299e:	6093      	str	r3, [r2, #8]
 80029a0:	e066      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	333f      	adds	r3, #63	; 0x3f
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d127      	bne.n	8002a06 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	0151      	lsls	r1, r2, #5
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	440a      	add	r2, r1
 80029cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029d4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3360      	adds	r3, #96	; 0x60
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	b2d9      	uxtb	r1, r3
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	202c      	movs	r0, #44	; 0x2c
 80029f2:	fb00 f303 	mul.w	r3, r0, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3360      	adds	r3, #96	; 0x60
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f008 fa8c 	bl	800af1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a04:	e034      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	333f      	adds	r3, #63	; 0x3f
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d12a      	bne.n	8002a70 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3360      	adds	r3, #96	; 0x60
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3354      	adds	r3, #84	; 0x54
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	f083 0301 	eor.w	r3, r3, #1
 8002a40:	b2d8      	uxtb	r0, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3354      	adds	r3, #84	; 0x54
 8002a50:	4602      	mov	r2, r0
 8002a52:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	b2d9      	uxtb	r1, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	202c      	movs	r0, #44	; 0x2c
 8002a5e:	fb00 f303 	mul.w	r3, r0, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3360      	adds	r3, #96	; 0x60
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f008 fa56 	bl	800af1c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d12b      	bne.n	8002ad0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3348      	adds	r3, #72	; 0x48
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	202c      	movs	r0, #44	; 0x2c
 8002a8e:	fb00 f202 	mul.w	r2, r0, r2
 8002a92:	440a      	add	r2, r1
 8002a94:	3240      	adds	r2, #64	; 0x40
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 81be 	beq.w	8002e22 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3354      	adds	r3, #84	; 0x54
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f083 0301 	eor.w	r3, r3, #1
 8002aba:	b2d8      	uxtb	r0, r3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3354      	adds	r3, #84	; 0x54
 8002aca:	4602      	mov	r2, r0
 8002acc:	701a      	strb	r2, [r3, #0]
}
 8002ace:	e1a8      	b.n	8002e22 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3354      	adds	r3, #84	; 0x54
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2d8      	uxtb	r0, r3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3354      	adds	r3, #84	; 0x54
 8002af4:	4602      	mov	r2, r0
 8002af6:	701a      	strb	r2, [r3, #0]
}
 8002af8:	e193      	b.n	8002e22 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	f040 8106 	bne.w	8002d1e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	0151      	lsls	r1, r2, #5
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	440a      	add	r2, r1
 8002b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2c:	f023 0302 	bic.w	r3, r3, #2
 8002b30:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3361      	adds	r3, #97	; 0x61
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d109      	bne.n	8002b5a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3360      	adds	r3, #96	; 0x60
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e0c9      	b.n	8002cee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3361      	adds	r3, #97	; 0x61
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d109      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3360      	adds	r3, #96	; 0x60
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e0b5      	b.n	8002cee <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3361      	adds	r3, #97	; 0x61
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d009      	beq.n	8002baa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3361      	adds	r3, #97	; 0x61
 8002ba4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d150      	bne.n	8002c4c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	202c      	movs	r0, #44	; 0x2c
 8002bc2:	fb00 f303 	mul.w	r3, r0, r3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	335c      	adds	r3, #92	; 0x5c
 8002bca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	335c      	adds	r3, #92	; 0x5c
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d912      	bls.n	8002c06 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	335c      	adds	r3, #92	; 0x5c
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c04:	e073      	b.n	8002cee <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3360      	adds	r3, #96	; 0x60
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c2e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c36:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c4a:	e050      	b.n	8002cee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3361      	adds	r3, #97	; 0x61
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d122      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3360      	adds	r3, #96	; 0x60
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c88:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e023      	b.n	8002cee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3361      	adds	r3, #97	; 0x61
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d119      	bne.n	8002cee <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	335c      	adds	r3, #92	; 0x5c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	202c      	movs	r0, #44	; 0x2c
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	335c      	adds	r3, #92	; 0x5c
 8002cda:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	2204      	movs	r2, #4
 8002cec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	b2d9      	uxtb	r1, r3
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	202c      	movs	r0, #44	; 0x2c
 8002d0a:	fb00 f303 	mul.w	r3, r0, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3360      	adds	r3, #96	; 0x60
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f008 f900 	bl	800af1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d1c:	e081      	b.n	8002e22 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d176      	bne.n	8002e22 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	333f      	adds	r3, #63	; 0x3f
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d121      	bne.n	8002d8c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	335c      	adds	r3, #92	; 0x5c
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	0151      	lsls	r1, r2, #5
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	440a      	add	r2, r1
 8002d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 fa1c 	bl	80061c2 <USB_HC_Halt>
 8002d8a:	e041      	b.n	8002e10 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	333f      	adds	r3, #63	; 0x3f
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	333f      	adds	r3, #63	; 0x3f
 8002dae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d12d      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d120      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3361      	adds	r3, #97	; 0x61
 8002ddc:	2203      	movs	r2, #3
 8002dde:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	0151      	lsls	r1, r2, #5
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	440a      	add	r2, r1
 8002df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 f9d9 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2310      	movs	r3, #16
 8002e20:	6093      	str	r3, [r2, #8]
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d119      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	2304      	movs	r3, #4
 8002e6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	0151      	lsls	r1, r2, #5
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	440a      	add	r2, r1
 8002e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e8c:	e3ca      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d13e      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	333d      	adds	r3, #61	; 0x3d
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	f040 83ac 	bne.w	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	333d      	adds	r3, #61	; 0x3d
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3360      	adds	r3, #96	; 0x60
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	0151      	lsls	r1, r2, #5
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	440a      	add	r2, r1
 8002f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 f951 	bl	80061c2 <USB_HC_Halt>
}
 8002f20:	e380      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f38:	d122      	bne.n	8002f80 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	0151      	lsls	r1, r2, #5
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	440a      	add	r2, r1
 8002f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 f92c 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	461a      	mov	r2, r3
 8002f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f7c:	6093      	str	r3, [r2, #8]
}
 8002f7e:	e351      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d150      	bne.n	8003038 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	335c      	adds	r3, #92	; 0x5c
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d111      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	333d      	adds	r3, #61	; 0x3d
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2340      	movs	r3, #64	; 0x40
 8002fe0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	0151      	lsls	r1, r2, #5
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	440a      	add	r2, r1
 8002ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f003 f8d8 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	2301      	movs	r3, #1
 8003022:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3361      	adds	r3, #97	; 0x61
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
}
 8003036:	e2f5      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d13c      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3361      	adds	r3, #97	; 0x61
 800305c:	2204      	movs	r2, #4
 800305e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	333d      	adds	r3, #61	; 0x3d
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	335c      	adds	r3, #92	; 0x5c
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	0151      	lsls	r1, r2, #5
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	440a      	add	r2, r1
 800309a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800309e:	f043 0302 	orr.w	r3, r3, #2
 80030a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 f887 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2340      	movs	r3, #64	; 0x40
 80030c4:	6093      	str	r3, [r2, #8]
}
 80030c6:	e2ad      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d12a      	bne.n	8003134 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	461a      	mov	r2, r3
 80030ec:	2308      	movs	r3, #8
 80030ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	0151      	lsls	r1, r2, #5
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	440a      	add	r2, r1
 8003106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f003 f851 	bl	80061c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3361      	adds	r3, #97	; 0x61
 800312e:	2205      	movs	r2, #5
 8003130:	701a      	strb	r2, [r3, #0]
}
 8003132:	e277      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b10      	cmp	r3, #16
 8003148:	d150      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	335c      	adds	r3, #92	; 0x5c
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3361      	adds	r3, #97	; 0x61
 800316a:	2203      	movs	r2, #3
 800316c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	333d      	adds	r3, #61	; 0x3d
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d112      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	333c      	adds	r3, #60	; 0x3c
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d108      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	333d      	adds	r3, #61	; 0x3d
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	0151      	lsls	r1, r2, #5
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	440a      	add	r2, r1
 80031be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 fff5 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	461a      	mov	r2, r3
 80031e6:	2310      	movs	r3, #16
 80031e8:	6093      	str	r3, [r2, #8]
}
 80031ea:	e21b      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b80      	cmp	r3, #128	; 0x80
 8003200:	d174      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d121      	bne.n	800324e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3361      	adds	r3, #97	; 0x61
 8003218:	2206      	movs	r2, #6
 800321a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	440a      	add	r2, r1
 8003232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003236:	f043 0302 	orr.w	r3, r3, #2
 800323a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f002 ffbb 	bl	80061c2 <USB_HC_Halt>
 800324c:	e044      	b.n	80032d8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	335c      	adds	r3, #92	; 0x5c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	202c      	movs	r0, #44	; 0x2c
 8003266:	fb00 f303 	mul.w	r3, r0, r3
 800326a:	440b      	add	r3, r1
 800326c:	335c      	adds	r3, #92	; 0x5c
 800326e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	335c      	adds	r3, #92	; 0x5c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d920      	bls.n	80032c6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	335c      	adds	r3, #92	; 0x5c
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3360      	adds	r3, #96	; 0x60
 80032a4:	2204      	movs	r2, #4
 80032a6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	b2d9      	uxtb	r1, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	202c      	movs	r0, #44	; 0x2c
 80032b2:	fb00 f303 	mul.w	r3, r0, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3360      	adds	r3, #96	; 0x60
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f007 fe2c 	bl	800af1c <HAL_HCD_HC_NotifyURBChange_Callback>
 80032c4:	e008      	b.n	80032d8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	3360      	adds	r3, #96	; 0x60
 80032d4:	2202      	movs	r2, #2
 80032d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	6093      	str	r3, [r2, #8]
}
 80032ea:	e19b      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d134      	bne.n	800336e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	440a      	add	r2, r1
 800331a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f002 ff47 	bl	80061c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	461a      	mov	r2, r3
 8003342:	2310      	movs	r3, #16
 8003344:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003358:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3361      	adds	r3, #97	; 0x61
 8003368:	2208      	movs	r2, #8
 800336a:	701a      	strb	r2, [r3, #0]
}
 800336c:	e15a      	b.n	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	f040 814f 	bne.w	8003624 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	0151      	lsls	r1, r2, #5
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	440a      	add	r2, r1
 800339c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a0:	f023 0302 	bic.w	r3, r3, #2
 80033a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3361      	adds	r3, #97	; 0x61
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d17d      	bne.n	80034b6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3360      	adds	r3, #96	; 0x60
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	333f      	adds	r3, #63	; 0x3f
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d00a      	beq.n	80033f6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	333f      	adds	r3, #63	; 0x3f
 80033ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	f040 8100 	bne.w	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d113      	bne.n	8003426 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3355      	adds	r3, #85	; 0x55
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f083 0301 	eor.w	r3, r3, #1
 8003412:	b2d8      	uxtb	r0, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3355      	adds	r3, #85	; 0x55
 8003422:	4602      	mov	r2, r0
 8003424:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b01      	cmp	r3, #1
 800342c:	f040 80e3 	bne.w	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	334c      	adds	r3, #76	; 0x4c
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80d8 	beq.w	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	334c      	adds	r3, #76	; 0x4c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	202c      	movs	r0, #44	; 0x2c
 800345c:	fb00 f202 	mul.w	r2, r0, r2
 8003460:	440a      	add	r2, r1
 8003462:	3240      	adds	r2, #64	; 0x40
 8003464:	8812      	ldrh	r2, [r2, #0]
 8003466:	4413      	add	r3, r2
 8003468:	3b01      	subs	r3, #1
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	202c      	movs	r0, #44	; 0x2c
 8003470:	fb00 f202 	mul.w	r2, r0, r2
 8003474:	440a      	add	r2, r1
 8003476:	3240      	adds	r2, #64	; 0x40
 8003478:	8812      	ldrh	r2, [r2, #0]
 800347a:	fbb3 f3f2 	udiv	r3, r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80b5 	beq.w	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3355      	adds	r3, #85	; 0x55
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	f083 0301 	eor.w	r3, r3, #1
 80034a0:	b2d8      	uxtb	r0, r3
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3355      	adds	r3, #85	; 0x55
 80034b0:	4602      	mov	r2, r0
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e09f      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3361      	adds	r3, #97	; 0x61
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d109      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3360      	adds	r3, #96	; 0x60
 80034d8:	2202      	movs	r2, #2
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e08b      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3361      	adds	r3, #97	; 0x61
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d109      	bne.n	8003506 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3360      	adds	r3, #96	; 0x60
 8003500:	2202      	movs	r2, #2
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e077      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3361      	adds	r3, #97	; 0x61
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d109      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3360      	adds	r3, #96	; 0x60
 8003528:	2205      	movs	r2, #5
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e063      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3361      	adds	r3, #97	; 0x61
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b06      	cmp	r3, #6
 8003540:	d009      	beq.n	8003556 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3361      	adds	r3, #97	; 0x61
 8003550:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003552:	2b08      	cmp	r3, #8
 8003554:	d14f      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	335c      	adds	r3, #92	; 0x5c
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	202c      	movs	r0, #44	; 0x2c
 800356e:	fb00 f303 	mul.w	r3, r0, r3
 8003572:	440b      	add	r3, r1
 8003574:	335c      	adds	r3, #92	; 0x5c
 8003576:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	335c      	adds	r3, #92	; 0x5c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d912      	bls.n	80035b2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	335c      	adds	r3, #92	; 0x5c
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3360      	adds	r3, #96	; 0x60
 80035ac:	2204      	movs	r2, #4
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e021      	b.n	80035f6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3360      	adds	r3, #96	; 0x60
 80035c0:	2202      	movs	r2, #2
 80035c2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035da:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035e2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	461a      	mov	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	461a      	mov	r2, r3
 8003604:	2302      	movs	r3, #2
 8003606:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	b2d9      	uxtb	r1, r3
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	202c      	movs	r0, #44	; 0x2c
 8003612:	fb00 f303 	mul.w	r3, r0, r3
 8003616:	4413      	add	r3, r2
 8003618:	3360      	adds	r3, #96	; 0x60
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f007 fc7c 	bl	800af1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003624:	bf00      	nop
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	0c5b      	lsrs	r3, r3, #17
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003660:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d004      	beq.n	8003672 <HCD_RXQLVL_IRQHandler+0x46>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b05      	cmp	r3, #5
 800366c:	f000 80a9 	beq.w	80037c2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003670:	e0aa      	b.n	80037c8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a6 	beq.w	80037c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3344      	adds	r3, #68	; 0x44
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 809b 	beq.w	80037c6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3350      	adds	r3, #80	; 0x50
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	441a      	add	r2, r3
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	202c      	movs	r0, #44	; 0x2c
 80036aa:	fb00 f303 	mul.w	r3, r0, r3
 80036ae:	440b      	add	r3, r1
 80036b0:	334c      	adds	r3, #76	; 0x4c
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d87a      	bhi.n	80037ae <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3344      	adds	r3, #68	; 0x44
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	b292      	uxth	r2, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	f002 f8ef 	bl	80058b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3344      	adds	r3, #68	; 0x44
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	441a      	add	r2, r3
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	202c      	movs	r0, #44	; 0x2c
 80036f0:	fb00 f303 	mul.w	r3, r0, r3
 80036f4:	440b      	add	r3, r1
 80036f6:	3344      	adds	r3, #68	; 0x44
 80036f8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3350      	adds	r3, #80	; 0x50
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	441a      	add	r2, r3
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	202c      	movs	r0, #44	; 0x2c
 8003714:	fb00 f303 	mul.w	r3, r0, r3
 8003718:	440b      	add	r3, r1
 800371a:	3350      	adds	r3, #80	; 0x50
 800371c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	0cdb      	lsrs	r3, r3, #19
 800372e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003732:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3340      	adds	r3, #64	; 0x40
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4293      	cmp	r3, r2
 800374a:	d13c      	bne.n	80037c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d039      	beq.n	80037c6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003768:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003770:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3354      	adds	r3, #84	; 0x54
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2d8      	uxtb	r0, r3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	3354      	adds	r3, #84	; 0x54
 80037a8:	4602      	mov	r2, r0
 80037aa:	701a      	strb	r2, [r3, #0]
      break;
 80037ac:	e00b      	b.n	80037c6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3360      	adds	r3, #96	; 0x60
 80037bc:	2204      	movs	r2, #4
 80037be:	701a      	strb	r2, [r3, #0]
      break;
 80037c0:	e001      	b.n	80037c6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80037c6:	bf00      	nop
  }
}
 80037c8:	bf00      	nop
 80037ca:	3728      	adds	r7, #40	; 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d10b      	bne.n	8003820 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f007 fb66 	bl	800aee4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b08      	cmp	r3, #8
 8003828:	d132      	bne.n	8003890 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f043 0308 	orr.w	r3, r3, #8
 8003830:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d126      	bne.n	800388a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d113      	bne.n	800386c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800384a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800384e:	d106      	bne.n	800385e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2102      	movs	r1, #2
 8003856:	4618      	mov	r0, r3
 8003858:	f002 f98c 	bl	8005b74 <USB_InitFSLSPClkSel>
 800385c:	e011      	b.n	8003882 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f002 f985 	bl	8005b74 <USB_InitFSLSPClkSel>
 800386a:	e00a      	b.n	8003882 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800387a:	461a      	mov	r2, r3
 800387c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003880:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f007 fb5c 	bl	800af40 <HAL_HCD_PortEnabled_Callback>
 8003888:	e002      	b.n	8003890 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f007 fb66 	bl	800af5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b20      	cmp	r3, #32
 8003898:	d103      	bne.n	80038a2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f043 0320 	orr.w	r3, r3, #32
 80038a0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6013      	str	r3, [r2, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e12b      	b.n	8003b22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd faac 	bl	8000e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800391a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800391c:	f000 fdd8 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8003920:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4a81      	ldr	r2, [pc, #516]	; (8003b2c <HAL_I2C_Init+0x274>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d807      	bhi.n	800393c <HAL_I2C_Init+0x84>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a80      	ldr	r2, [pc, #512]	; (8003b30 <HAL_I2C_Init+0x278>)
 8003930:	4293      	cmp	r3, r2
 8003932:	bf94      	ite	ls
 8003934:	2301      	movls	r3, #1
 8003936:	2300      	movhi	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e006      	b.n	800394a <HAL_I2C_Init+0x92>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a7d      	ldr	r2, [pc, #500]	; (8003b34 <HAL_I2C_Init+0x27c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0e7      	b.n	8003b22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4a78      	ldr	r2, [pc, #480]	; (8003b38 <HAL_I2C_Init+0x280>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0c9b      	lsrs	r3, r3, #18
 800395c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a6a      	ldr	r2, [pc, #424]	; (8003b2c <HAL_I2C_Init+0x274>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d802      	bhi.n	800398c <HAL_I2C_Init+0xd4>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3301      	adds	r3, #1
 800398a:	e009      	b.n	80039a0 <HAL_I2C_Init+0xe8>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_I2C_Init+0x284>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	3301      	adds	r3, #1
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	495c      	ldr	r1, [pc, #368]	; (8003b2c <HAL_I2C_Init+0x274>)
 80039bc:	428b      	cmp	r3, r1
 80039be:	d819      	bhi.n	80039f4 <HAL_I2C_Init+0x13c>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039d4:	400b      	ands	r3, r1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_I2C_Init+0x138>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1e59      	subs	r1, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ee:	e051      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 80039f0:	2304      	movs	r3, #4
 80039f2:	e04f      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d111      	bne.n	8003a20 <HAL_I2C_Init+0x168>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e58      	subs	r0, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e012      	b.n	8003a46 <HAL_I2C_Init+0x18e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e58      	subs	r0, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_Init+0x196>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e022      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10e      	bne.n	8003a74 <HAL_I2C_Init+0x1bc>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1e58      	subs	r0, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	440b      	add	r3, r1
 8003a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a72:	e00f      	b.n	8003a94 <HAL_I2C_Init+0x1dc>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	6809      	ldr	r1, [r1, #0]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6911      	ldr	r1, [r2, #16]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68d2      	ldr	r2, [r2, #12]
 8003ace:	4311      	orrs	r1, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	000186a0 	.word	0x000186a0
 8003b30:	001e847f 	.word	0x001e847f
 8003b34:	003d08ff 	.word	0x003d08ff
 8003b38:	431bde83 	.word	0x431bde83
 8003b3c:	10624dd3 	.word	0x10624dd3

08003b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d129      	bne.n	8003baa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2224      	movs	r2, #36	; 0x24
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0210 	bic.w	r2, r2, #16
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d12a      	bne.n	8003c28 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2224      	movs	r2, #36	; 0x24
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	f023 030f 	bic.w	r3, r3, #15
 8003bf8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	89fb      	ldrh	r3, [r7, #14]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	89fa      	ldrh	r2, [r7, #14]
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e264      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d075      	beq.n	8003d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c56:	4ba3      	ldr	r3, [pc, #652]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4ba0      	ldr	r3, [pc, #640]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6e:	4b9d      	ldr	r3, [pc, #628]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	4b99      	ldr	r3, [pc, #612]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d05b      	beq.n	8003d40 <HAL_RCC_OscConfig+0x108>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d157      	bne.n	8003d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e23f      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x74>
 8003c9e:	4b91      	ldr	r3, [pc, #580]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a90      	ldr	r2, [pc, #576]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x98>
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a8a      	ldr	r2, [pc, #552]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a87      	ldr	r2, [pc, #540]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cd0:	4b84      	ldr	r3, [pc, #528]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a83      	ldr	r2, [pc, #524]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b81      	ldr	r3, [pc, #516]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a80      	ldr	r2, [pc, #512]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fb92 	bl	8001418 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fd fb8e 	bl	8001418 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e204      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xc0>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd fb7e 	bl	8001418 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fd fb7a 	bl	8001418 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1f0      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0xe8>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d063      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d4e:	4b65      	ldr	r3, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1c4      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4952      	ldr	r1, [pc, #328]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	e03a      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_RCC_OscConfig+0x2b0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd fb33 	bl	8001418 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fd fb2f 	bl	8001418 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1a5      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4940      	ldr	r1, [pc, #256]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <HAL_RCC_OscConfig+0x2b0>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fb12 	bl	8001418 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fd fb0e 	bl	8001418 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e184      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d030      	beq.n	8003e84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_RCC_OscConfig+0x2b4>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fd faf2 	bl	8001418 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fd faee 	bl	8001418 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e164      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x200>
 8003e56:	e015      	b.n	8003e84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x2b4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd fadb 	bl	8001418 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e66:	f7fd fad7 	bl	8001418 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e14d      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a0 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fd fa9d 	bl	8001418 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e011      	b.n	8003f06 <HAL_RCC_OscConfig+0x2ce>
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470000 	.word	0x42470000
 8003eec:	42470e80 	.word	0x42470e80
 8003ef0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fd fa90 	bl	8001418 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e106      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	4b85      	ldr	r3, [pc, #532]	; (800411c <HAL_RCC_OscConfig+0x4e4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d106      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2f0>
 8003f1a:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a80      	ldr	r2, [pc, #512]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	e01c      	b.n	8003f62 <HAL_RCC_OscConfig+0x32a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d10c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x312>
 8003f30:	4b7b      	ldr	r3, [pc, #492]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a7a      	ldr	r2, [pc, #488]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3c:	4b78      	ldr	r3, [pc, #480]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	e00b      	b.n	8003f62 <HAL_RCC_OscConfig+0x32a>
 8003f4a:	4b75      	ldr	r3, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a74      	ldr	r2, [pc, #464]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a71      	ldr	r2, [pc, #452]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d015      	beq.n	8003f96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fd fa55 	bl	8001418 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd fa51 	bl	8001418 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0c5      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ee      	beq.n	8003f72 <HAL_RCC_OscConfig+0x33a>
 8003f94:	e014      	b.n	8003fc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fd fa3f 	bl	8001418 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fd fa3b 	bl	8001418 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0af      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb4:	4b5a      	ldr	r3, [pc, #360]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ee      	bne.n	8003f9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a55      	ldr	r2, [pc, #340]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 809b 	beq.w	8004112 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fdc:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d05c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d141      	bne.n	8004074 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fa0f 	bl	8001418 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fd fa0b 	bl	8001418 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e081      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004010:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	019b      	lsls	r3, r3, #6
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd f9e4 	bl	8001418 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd f9e0 	bl	8001418 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e056      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x41c>
 8004072:	e04e      	b.n	8004112 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fd f9cd 	bl	8001418 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004082:	f7fd f9c9 	bl	8001418 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03f      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004094:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x44a>
 80040a0:	e037      	b.n	8004112 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e032      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d028      	beq.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d121      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d11a      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d111      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40007000 	.word	0x40007000
 8004120:	40023800 	.word	0x40023800
 8004124:	42470060 	.word	0x42470060

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cc      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90c      	bls.n	8004164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d044      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e067      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fd f8fe 	bl	8001418 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fd f8fa 	bl	8001418 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e04f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d20c      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f821 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc ff6c 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	0800b628 	.word	0x0800b628
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	2300      	movs	r3, #0
 8004306:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b08      	cmp	r3, #8
 8004316:	d00d      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x40>
 8004318:	2b08      	cmp	r3, #8
 800431a:	f200 80bd 	bhi.w	8004498 <HAL_RCC_GetSysClockFreq+0x1a4>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x34>
 8004322:	2b04      	cmp	r3, #4
 8004324:	d003      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x3a>
 8004326:	e0b7      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800432a:	60bb      	str	r3, [r7, #8]
       break;
 800432c:	e0b7      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004330:	60bb      	str	r3, [r7, #8]
      break;
 8004332:	e0b4      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004334:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433e:	4b5b      	ldr	r3, [pc, #364]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04d      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434a:	4b58      	ldr	r3, [pc, #352]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	461a      	mov	r2, r3
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	ea02 0800 	and.w	r8, r2, r0
 8004362:	ea03 0901 	and.w	r9, r3, r1
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	014b      	lsls	r3, r1, #5
 8004374:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004378:	0142      	lsls	r2, r0, #5
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	ebb0 0008 	subs.w	r0, r0, r8
 8004382:	eb61 0109 	sbc.w	r1, r1, r9
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	018b      	lsls	r3, r1, #6
 8004390:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004394:	0182      	lsls	r2, r0, #6
 8004396:	1a12      	subs	r2, r2, r0
 8004398:	eb63 0301 	sbc.w	r3, r3, r1
 800439c:	f04f 0000 	mov.w	r0, #0
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	00d9      	lsls	r1, r3, #3
 80043a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043aa:	00d0      	lsls	r0, r2, #3
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	eb12 0208 	adds.w	r2, r2, r8
 80043b4:	eb43 0309 	adc.w	r3, r3, r9
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	0259      	lsls	r1, r3, #9
 80043c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043c6:	0250      	lsls	r0, r2, #9
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	f7fb ff0a 	bl	80001f0 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e04a      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	461a      	mov	r2, r3
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	ea02 0400 	and.w	r4, r2, r0
 80043fe:	ea03 0501 	and.w	r5, r3, r1
 8004402:	4620      	mov	r0, r4
 8004404:	4629      	mov	r1, r5
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	014b      	lsls	r3, r1, #5
 8004410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004414:	0142      	lsls	r2, r0, #5
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	1b00      	subs	r0, r0, r4
 800441c:	eb61 0105 	sbc.w	r1, r1, r5
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	018b      	lsls	r3, r1, #6
 800442a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800442e:	0182      	lsls	r2, r0, #6
 8004430:	1a12      	subs	r2, r2, r0
 8004432:	eb63 0301 	sbc.w	r3, r3, r1
 8004436:	f04f 0000 	mov.w	r0, #0
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	00d9      	lsls	r1, r3, #3
 8004440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004444:	00d0      	lsls	r0, r2, #3
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	1912      	adds	r2, r2, r4
 800444c:	eb45 0303 	adc.w	r3, r5, r3
 8004450:	f04f 0000 	mov.w	r0, #0
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	0299      	lsls	r1, r3, #10
 800445a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800445e:	0290      	lsls	r0, r2, #10
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	f7fb febe 	bl	80001f0 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4613      	mov	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	3301      	adds	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	60bb      	str	r3, [r7, #8]
      break;
 8004496:	e002      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800449a:	60bb      	str	r3, [r7, #8]
      break;
 800449c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449e:	68bb      	ldr	r3, [r7, #8]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000000 	.word	0x20000000

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	0800b638 	.word	0x0800b638

080044f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044fc:	f7ff ffdc 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0b5b      	lsrs	r3, r3, #13
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	; (800451c <HAL_RCC_GetPCLK2Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	0800b638 	.word	0x0800b638

08004520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	220f      	movs	r2, #15
 800452e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004530:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_RCC_GetClockConfig+0x5c>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0203 	and.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <HAL_RCC_GetClockConfig+0x5c>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004554:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <HAL_RCC_GetClockConfig+0x60>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	40023c00 	.word	0x40023c00

08004584 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e025      	b.n	80045e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fc fdf3 	bl	8001198 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f000 ff31 	bl	800542c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	f000 ff9c 	bl	8005512 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e07b      	b.n	80046f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460e:	d009      	beq.n	8004624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	61da      	str	r2, [r3, #28]
 8004616:	e005      	b.n	8004624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc fc66 	bl	8000f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	ea42 0103 	orr.w	r1, r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	f003 0104 	and.w	r1, r3, #4
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0210 	and.w	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e041      	b.n	8004794 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc fc3b 	bl	8000fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f000 fa95 	bl	8004c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d001      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e04e      	b.n	8004852 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a23      	ldr	r2, [pc, #140]	; (8004860 <HAL_TIM_Base_Start_IT+0xc4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d022      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047de:	d01d      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <HAL_TIM_Base_Start_IT+0xc8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d018      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <HAL_TIM_Base_Start_IT+0xcc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_TIM_Base_Start_IT+0xd0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_TIM_Base_Start_IT+0xd4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x80>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_TIM_Base_Start_IT+0xd8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x80>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_TIM_Base_Start_IT+0xdc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d111      	bne.n	8004840 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d010      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483e:	e007      	b.n	8004850 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40010400 	.word	0x40010400
 8004874:	40014000 	.word	0x40014000
 8004878:	40001800 	.word	0x40001800

0800487c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d122      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b02      	cmp	r3, #2
 800489e:	d11b      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0202 	mvn.w	r2, #2
 80048a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9b5 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9a7 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f9b8 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d122      	bne.n	800492c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d11b      	bne.n	800492c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0204 	mvn.w	r2, #4
 80048fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f98b 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 8004918:	e005      	b.n	8004926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f97d 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f98e 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b08      	cmp	r3, #8
 8004938:	d122      	bne.n	8004980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b08      	cmp	r3, #8
 8004946:	d11b      	bne.n	8004980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0208 	mvn.w	r2, #8
 8004950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2204      	movs	r2, #4
 8004956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f961 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 800496c:	e005      	b.n	800497a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f953 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f964 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b10      	cmp	r3, #16
 800498c:	d122      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d11b      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0210 	mvn.w	r2, #16
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2208      	movs	r2, #8
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f937 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f929 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f93a 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10e      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0201 	mvn.w	r2, #1
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc f990 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
 8004a0c:	d10e      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fae0 	bl	8004fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d10e      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8ff 	bl	8004c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d10e      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d107      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0220 	mvn.w	r2, #32
 8004a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 faaa 	bl	8004fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e0b4      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x186>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae0:	d03e      	beq.n	8004b60 <HAL_TIM_ConfigClockSource+0xd4>
 8004ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae6:	f200 8087 	bhi.w	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	f000 8086 	beq.w	8004bfe <HAL_TIM_ConfigClockSource+0x172>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	d87f      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b70      	cmp	r3, #112	; 0x70
 8004afa:	d01a      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xa6>
 8004afc:	2b70      	cmp	r3, #112	; 0x70
 8004afe:	d87b      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d050      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b04:	2b60      	cmp	r3, #96	; 0x60
 8004b06:	d877      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b50      	cmp	r3, #80	; 0x50
 8004b0a:	d03c      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0xfa>
 8004b0c:	2b50      	cmp	r3, #80	; 0x50
 8004b0e:	d873      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d058      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d86f      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b30      	cmp	r3, #48	; 0x30
 8004b1a:	d064      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b1c:	2b30      	cmp	r3, #48	; 0x30
 8004b1e:	d86b      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d060      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d867      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d05c      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d05a      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b30:	e062      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6899      	ldr	r1, [r3, #8]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f000 f9ad 	bl	8004ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	609a      	str	r2, [r3, #8]
      break;
 8004b5e:	e04f      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	6899      	ldr	r1, [r3, #8]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f000 f996 	bl	8004ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b82:	609a      	str	r2, [r3, #8]
      break;
 8004b84:	e03c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 f90a 	bl	8004dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2150      	movs	r1, #80	; 0x50
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f963 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e02c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 f929 	bl	8004e0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2160      	movs	r1, #96	; 0x60
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f953 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e01c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 f8ea 	bl	8004dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2140      	movs	r1, #64	; 0x40
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f943 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004be4:	e00c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f000 f93a 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004bf6:	e003      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfc:	e000      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a40      	ldr	r2, [pc, #256]	; (8004d80 <TIM_Base_SetConfig+0x114>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8a:	d00f      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3d      	ldr	r2, [pc, #244]	; (8004d84 <TIM_Base_SetConfig+0x118>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00b      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3c      	ldr	r2, [pc, #240]	; (8004d88 <TIM_Base_SetConfig+0x11c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3b      	ldr	r2, [pc, #236]	; (8004d8c <TIM_Base_SetConfig+0x120>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3a      	ldr	r2, [pc, #232]	; (8004d90 <TIM_Base_SetConfig+0x124>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d108      	bne.n	8004cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2f      	ldr	r2, [pc, #188]	; (8004d80 <TIM_Base_SetConfig+0x114>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d02b      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d027      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <TIM_Base_SetConfig+0x118>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d023      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <TIM_Base_SetConfig+0x11c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01f      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <TIM_Base_SetConfig+0x120>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01b      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a29      	ldr	r2, [pc, #164]	; (8004d90 <TIM_Base_SetConfig+0x124>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d017      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a28      	ldr	r2, [pc, #160]	; (8004d94 <TIM_Base_SetConfig+0x128>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <TIM_Base_SetConfig+0x12c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00f      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <TIM_Base_SetConfig+0x130>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <TIM_Base_SetConfig+0x134>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a24      	ldr	r2, [pc, #144]	; (8004da4 <TIM_Base_SetConfig+0x138>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a23      	ldr	r2, [pc, #140]	; (8004da8 <TIM_Base_SetConfig+0x13c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d108      	bne.n	8004d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0a      	ldr	r2, [pc, #40]	; (8004d80 <TIM_Base_SetConfig+0x114>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0xf8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <TIM_Base_SetConfig+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d103      	bne.n	8004d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	615a      	str	r2, [r3, #20]
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	40010400 	.word	0x40010400
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40014400 	.word	0x40014400
 8004d9c:	40014800 	.word	0x40014800
 8004da0:	40001800 	.word	0x40001800
 8004da4:	40001c00 	.word	0x40001c00
 8004da8:	40002000 	.word	0x40002000

08004dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f023 0201 	bic.w	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 030a 	bic.w	r3, r3, #10
 8004de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0210 	bic.w	r2, r3, #16
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	031b      	lsls	r3, r3, #12
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f043 0307 	orr.w	r3, r3, #7
 8004e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	021a      	lsls	r2, r3, #8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e05a      	b.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d01d      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10c      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40010400 	.word	0x40010400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40001800 	.word	0x40001800

08004fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e03f      	b.n	8005092 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb ffdc 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	; 0x24
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f829 	bl	800509c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800509c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a0:	b09f      	sub	sp, #124	; 0x7c
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	68d9      	ldr	r1, [r3, #12]
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	ea40 0301 	orr.w	r3, r0, r1
 80050bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050e0:	f021 010c 	bic.w	r1, r1, #12
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ea:	430b      	orrs	r3, r1
 80050ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fa:	6999      	ldr	r1, [r3, #24]
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	ea40 0301 	orr.w	r3, r0, r1
 8005104:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4bc5      	ldr	r3, [pc, #788]	; (8005420 <UART_SetConfig+0x384>)
 800510c:	429a      	cmp	r2, r3
 800510e:	d004      	beq.n	800511a <UART_SetConfig+0x7e>
 8005110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4bc3      	ldr	r3, [pc, #780]	; (8005424 <UART_SetConfig+0x388>)
 8005116:	429a      	cmp	r2, r3
 8005118:	d103      	bne.n	8005122 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800511a:	f7ff f9ed 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 800511e:	6778      	str	r0, [r7, #116]	; 0x74
 8005120:	e002      	b.n	8005128 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005122:	f7ff f9d5 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005126:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005130:	f040 80b6 	bne.w	80052a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005136:	461c      	mov	r4, r3
 8005138:	f04f 0500 	mov.w	r5, #0
 800513c:	4622      	mov	r2, r4
 800513e:	462b      	mov	r3, r5
 8005140:	1891      	adds	r1, r2, r2
 8005142:	6439      	str	r1, [r7, #64]	; 0x40
 8005144:	415b      	adcs	r3, r3
 8005146:	647b      	str	r3, [r7, #68]	; 0x44
 8005148:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800514c:	1912      	adds	r2, r2, r4
 800514e:	eb45 0303 	adc.w	r3, r5, r3
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	00d9      	lsls	r1, r3, #3
 800515c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005160:	00d0      	lsls	r0, r2, #3
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	1911      	adds	r1, r2, r4
 8005168:	6639      	str	r1, [r7, #96]	; 0x60
 800516a:	416b      	adcs	r3, r5
 800516c:	667b      	str	r3, [r7, #100]	; 0x64
 800516e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	461a      	mov	r2, r3
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	1891      	adds	r1, r2, r2
 800517a:	63b9      	str	r1, [r7, #56]	; 0x38
 800517c:	415b      	adcs	r3, r3
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005184:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005188:	f7fb f832 	bl	80001f0 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4ba5      	ldr	r3, [pc, #660]	; (8005428 <UART_SetConfig+0x38c>)
 8005192:	fba3 2302 	umull	r2, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	011e      	lsls	r6, r3, #4
 800519a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800519c:	461c      	mov	r4, r3
 800519e:	f04f 0500 	mov.w	r5, #0
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	1891      	adds	r1, r2, r2
 80051a8:	6339      	str	r1, [r7, #48]	; 0x30
 80051aa:	415b      	adcs	r3, r3
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
 80051ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051b2:	1912      	adds	r2, r2, r4
 80051b4:	eb45 0303 	adc.w	r3, r5, r3
 80051b8:	f04f 0000 	mov.w	r0, #0
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	00d9      	lsls	r1, r3, #3
 80051c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051c6:	00d0      	lsls	r0, r2, #3
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	1911      	adds	r1, r2, r4
 80051ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80051d0:	416b      	adcs	r3, r5
 80051d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	461a      	mov	r2, r3
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80051e2:	415b      	adcs	r3, r3
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051ee:	f7fa ffff 	bl	80001f0 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4b8c      	ldr	r3, [pc, #560]	; (8005428 <UART_SetConfig+0x38c>)
 80051f8:	fba3 1302 	umull	r1, r3, r3, r2
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	2164      	movs	r1, #100	; 0x64
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	3332      	adds	r3, #50	; 0x32
 800520a:	4a87      	ldr	r2, [pc, #540]	; (8005428 <UART_SetConfig+0x38c>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005218:	441e      	add	r6, r3
 800521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521c:	4618      	mov	r0, r3
 800521e:	f04f 0100 	mov.w	r1, #0
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	1894      	adds	r4, r2, r2
 8005228:	623c      	str	r4, [r7, #32]
 800522a:	415b      	adcs	r3, r3
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005232:	1812      	adds	r2, r2, r0
 8005234:	eb41 0303 	adc.w	r3, r1, r3
 8005238:	f04f 0400 	mov.w	r4, #0
 800523c:	f04f 0500 	mov.w	r5, #0
 8005240:	00dd      	lsls	r5, r3, #3
 8005242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005246:	00d4      	lsls	r4, r2, #3
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	1814      	adds	r4, r2, r0
 800524e:	653c      	str	r4, [r7, #80]	; 0x50
 8005250:	414b      	adcs	r3, r1
 8005252:	657b      	str	r3, [r7, #84]	; 0x54
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	461a      	mov	r2, r3
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	1891      	adds	r1, r2, r2
 8005260:	61b9      	str	r1, [r7, #24]
 8005262:	415b      	adcs	r3, r3
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800526e:	f7fa ffbf 	bl	80001f0 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b6c      	ldr	r3, [pc, #432]	; (8005428 <UART_SetConfig+0x38c>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a67      	ldr	r2, [pc, #412]	; (8005428 <UART_SetConfig+0x38c>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4432      	add	r2, r6
 800529c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800529e:	e0b9      	b.n	8005414 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a2:	461c      	mov	r4, r3
 80052a4:	f04f 0500 	mov.w	r5, #0
 80052a8:	4622      	mov	r2, r4
 80052aa:	462b      	mov	r3, r5
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	6139      	str	r1, [r7, #16]
 80052b0:	415b      	adcs	r3, r3
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052b8:	1912      	adds	r2, r2, r4
 80052ba:	eb45 0303 	adc.w	r3, r5, r3
 80052be:	f04f 0000 	mov.w	r0, #0
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	00d9      	lsls	r1, r3, #3
 80052c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052cc:	00d0      	lsls	r0, r2, #3
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	eb12 0804 	adds.w	r8, r2, r4
 80052d6:	eb43 0905 	adc.w	r9, r3, r5
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4618      	mov	r0, r3
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	008b      	lsls	r3, r1, #2
 80052ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052f2:	0082      	lsls	r2, r0, #2
 80052f4:	4640      	mov	r0, r8
 80052f6:	4649      	mov	r1, r9
 80052f8:	f7fa ff7a 	bl	80001f0 <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4b49      	ldr	r3, [pc, #292]	; (8005428 <UART_SetConfig+0x38c>)
 8005302:	fba3 2302 	umull	r2, r3, r3, r2
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	011e      	lsls	r6, r3, #4
 800530a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800530c:	4618      	mov	r0, r3
 800530e:	f04f 0100 	mov.w	r1, #0
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	1894      	adds	r4, r2, r2
 8005318:	60bc      	str	r4, [r7, #8]
 800531a:	415b      	adcs	r3, r3
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005322:	1812      	adds	r2, r2, r0
 8005324:	eb41 0303 	adc.w	r3, r1, r3
 8005328:	f04f 0400 	mov.w	r4, #0
 800532c:	f04f 0500 	mov.w	r5, #0
 8005330:	00dd      	lsls	r5, r3, #3
 8005332:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005336:	00d4      	lsls	r4, r2, #3
 8005338:	4622      	mov	r2, r4
 800533a:	462b      	mov	r3, r5
 800533c:	1814      	adds	r4, r2, r0
 800533e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005340:	414b      	adcs	r3, r1
 8005342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4618      	mov	r0, r3
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	008b      	lsls	r3, r1, #2
 8005358:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800535c:	0082      	lsls	r2, r0, #2
 800535e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005362:	f7fa ff45 	bl	80001f0 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <UART_SetConfig+0x38c>)
 800536c:	fba3 1302 	umull	r1, r3, r3, r2
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	2164      	movs	r1, #100	; 0x64
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	3332      	adds	r3, #50	; 0x32
 800537e:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <UART_SetConfig+0x38c>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538a:	441e      	add	r6, r3
 800538c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538e:	4618      	mov	r0, r3
 8005390:	f04f 0100 	mov.w	r1, #0
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	1894      	adds	r4, r2, r2
 800539a:	603c      	str	r4, [r7, #0]
 800539c:	415b      	adcs	r3, r3
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a4:	1812      	adds	r2, r2, r0
 80053a6:	eb41 0303 	adc.w	r3, r1, r3
 80053aa:	f04f 0400 	mov.w	r4, #0
 80053ae:	f04f 0500 	mov.w	r5, #0
 80053b2:	00dd      	lsls	r5, r3, #3
 80053b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053b8:	00d4      	lsls	r4, r2, #3
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	eb12 0a00 	adds.w	sl, r2, r0
 80053c2:	eb43 0b01 	adc.w	fp, r3, r1
 80053c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f04f 0100 	mov.w	r1, #0
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	008b      	lsls	r3, r1, #2
 80053da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053de:	0082      	lsls	r2, r0, #2
 80053e0:	4650      	mov	r0, sl
 80053e2:	4659      	mov	r1, fp
 80053e4:	f7fa ff04 	bl	80001f0 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <UART_SetConfig+0x38c>)
 80053ee:	fba3 1302 	umull	r1, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2164      	movs	r1, #100	; 0x64
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	3332      	adds	r3, #50	; 0x32
 8005400:	4a09      	ldr	r2, [pc, #36]	; (8005428 <UART_SetConfig+0x38c>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f003 020f 	and.w	r2, r3, #15
 800540c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4432      	add	r2, r6
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	377c      	adds	r7, #124	; 0x7c
 8005418:	46bd      	mov	sp, r7
 800541a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541e:	bf00      	nop
 8005420:	40011000 	.word	0x40011000
 8005424:	40011400 	.word	0x40011400
 8005428:	51eb851f 	.word	0x51eb851f

0800542c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d029      	beq.n	800549a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005452:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005456:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005460:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005466:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800546c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005472:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005478:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800547e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005484:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800548a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e034      	b.n	8005504 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054b0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80054b6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80054ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054ce:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054d8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80054de:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80054e4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80054ea:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80054f0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005512:	b480      	push	{r7}
 8005514:	b087      	sub	sp, #28
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d02e      	beq.n	800558a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005538:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	3b01      	subs	r3, #1
 8005546:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005548:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	3b01      	subs	r3, #1
 8005550:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005552:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	3b01      	subs	r3, #1
 800555a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800555c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	3b01      	subs	r3, #1
 8005564:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005566:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	3b01      	subs	r3, #1
 800556e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005570:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	3b01      	subs	r3, #1
 8005578:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800557a:	4313      	orrs	r3, r2
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	e03b      	b.n	8005602 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800559a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80055ac:	4313      	orrs	r3, r2
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80055c0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80055d0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80055da:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80055e4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80055ee:	4313      	orrs	r3, r2
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005610:	b084      	sub	sp, #16
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	f107 001c 	add.w	r0, r7, #28
 800561e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	2b01      	cmp	r3, #1
 8005626:	d122      	bne.n	800566e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800563c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9a0 	bl	80059a8 <USB_CoreReset>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	e01a      	b.n	80056a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f994 	bl	80059a8 <USB_CoreReset>
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
 8005696:	e005      	b.n	80056a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10b      	bne.n	80056c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f043 0206 	orr.w	r2, r3, #6
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f043 0220 	orr.w	r2, r3, #32
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ce:	b004      	add	sp, #16
 80056d0:	4770      	bx	lr

080056d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f043 0201 	orr.w	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f023 0201 	bic.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d115      	bne.n	8005764 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005744:	2001      	movs	r0, #1
 8005746:	f7fb fe73 	bl	8001430 <HAL_Delay>
      ms++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f91a 	bl	800598a <USB_GetMode>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d01e      	beq.n	800579a <USB_SetCurrentMode+0x84>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b31      	cmp	r3, #49	; 0x31
 8005760:	d9f0      	bls.n	8005744 <USB_SetCurrentMode+0x2e>
 8005762:	e01a      	b.n	800579a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d115      	bne.n	8005796 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005776:	2001      	movs	r0, #1
 8005778:	f7fb fe5a 	bl	8001430 <HAL_Delay>
      ms++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f901 	bl	800598a <USB_GetMode>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <USB_SetCurrentMode+0x84>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b31      	cmp	r3, #49	; 0x31
 8005792:	d9f0      	bls.n	8005776 <USB_SetCurrentMode+0x60>
 8005794:	e001      	b.n	800579a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e005      	b.n	80057a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b32      	cmp	r3, #50	; 0x32
 800579e:	d101      	bne.n	80057a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	019b      	lsls	r3, r3, #6
 80057c2:	f043 0220 	orr.w	r2, r3, #32
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <USB_FlushTxFifo+0x44>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d0f1      	beq.n	80057ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	00030d40 	.word	0x00030d40

080057f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2210      	movs	r2, #16
 8005808:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3301      	adds	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <USB_FlushRxFifo+0x3c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e006      	b.n	8005828 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b10      	cmp	r3, #16
 8005824:	d0f1      	beq.n	800580a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	00030d40 	.word	0x00030d40

08005838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4611      	mov	r1, r2
 8005844:	461a      	mov	r2, r3
 8005846:	460b      	mov	r3, r1
 8005848:	71fb      	strb	r3, [r7, #7]
 800584a:	4613      	mov	r3, r2
 800584c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005856:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d123      	bne.n	80058a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800585e:	88bb      	ldrh	r3, [r7, #4]
 8005860:	3303      	adds	r3, #3
 8005862:	089b      	lsrs	r3, r3, #2
 8005864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005866:	2300      	movs	r3, #0
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e018      	b.n	800589e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	031a      	lsls	r2, r3, #12
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005878:	461a      	mov	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	3301      	adds	r3, #1
 8005884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3301      	adds	r3, #1
 800588a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	3301      	adds	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3301      	adds	r3, #1
 8005896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	3301      	adds	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d3e2      	bcc.n	800586c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3724      	adds	r7, #36	; 0x24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b08b      	sub	sp, #44	; 0x2c
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	e014      	b.n	800590a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	3301      	adds	r3, #1
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	3301      	adds	r3, #1
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	3301      	adds	r3, #1
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	3301      	adds	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	3301      	adds	r3, #1
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	6a3a      	ldr	r2, [r7, #32]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	429a      	cmp	r2, r3
 8005910:	d3e6      	bcc.n	80058e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005912:	8bfb      	ldrh	r3, [r7, #30]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01e      	beq.n	8005956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	461a      	mov	r2, r3
 8005924:	f107 0310 	add.w	r3, r7, #16
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	b2da      	uxtb	r2, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	701a      	strb	r2, [r3, #0]
      i++;
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	3301      	adds	r3, #1
 8005942:	623b      	str	r3, [r7, #32]
      pDest++;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	3301      	adds	r3, #1
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800594a:	8bfb      	ldrh	r3, [r7, #30]
 800594c:	3b01      	subs	r3, #1
 800594e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005950:	8bfb      	ldrh	r3, [r7, #30]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ea      	bne.n	800592c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005958:	4618      	mov	r0, r3
 800595a:	372c      	adds	r7, #44	; 0x2c
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800597c:	68fb      	ldr	r3, [r7, #12]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0301 	and.w	r3, r3, #1
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <USB_CoreReset+0x60>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e01a      	b.n	80059fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	daf3      	bge.n	80059b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f043 0201 	orr.w	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <USB_CoreReset+0x60>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e006      	b.n	80059fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d0f1      	beq.n	80059dc <USB_CoreReset+0x34>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	f107 001c 	add.w	r0, r7, #28
 8005a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d018      	beq.n	8005a90 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10a      	bne.n	8005a7a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e014      	b.n	8005aa4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e009      	b.n	8005aa4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9e:	f023 0304 	bic.w	r3, r3, #4
 8005aa2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005aa4:	2110      	movs	r1, #16
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fe82 	bl	80057b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff fea3 	bl	80057f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e015      	b.n	8005ae4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2300      	movs	r3, #0
 8005adc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d3e5      	bcc.n	8005ab8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295
 8005af8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <USB_HostInit+0x154>)
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <USB_HostInit+0x158>)
 8005b18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b1c:	e009      	b.n	8005b32 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a10      	ldr	r2, [pc, #64]	; (8005b68 <USB_HostInit+0x15c>)
 8005b28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a0f      	ldr	r2, [pc, #60]	; (8005b6c <USB_HostInit+0x160>)
 8005b2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f043 0210 	orr.w	r2, r3, #16
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <USB_HostInit+0x164>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b5c:	b004      	add	sp, #16
 8005b5e:	4770      	bx	lr
 8005b60:	01000200 	.word	0x01000200
 8005b64:	00e00300 	.word	0x00e00300
 8005b68:	00600080 	.word	0x00600080
 8005b6c:	004000e0 	.word	0x004000e0
 8005b70:	a3200008 	.word	0xa3200008

08005b74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	68f9      	ldr	r1, [r7, #12]
 8005ba8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d107      	bne.n	8005bc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bc2:	6053      	str	r3, [r2, #4]
 8005bc4:	e009      	b.n	8005bda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d106      	bne.n	8005bda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005bd8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c18:	2064      	movs	r0, #100	; 0x64
 8005c1a:	f7fb fc09 	bl	8001430 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c2c:	200a      	movs	r0, #10
 8005c2e:	f7fb fbff 	bl	8001430 <HAL_Delay>

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <USB_DriveVbus+0x44>
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d106      	bne.n	8005c80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d109      	bne.n	8005ca0 <USB_DriveVbus+0x64>
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	0c5b      	lsrs	r3, r3, #17
 8005ccc:	f003 0303 	and.w	r3, r3, #3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	b29b      	uxth	r3, r3
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	4608      	mov	r0, r1
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	70fb      	strb	r3, [r7, #3]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70bb      	strb	r3, [r7, #2]
 8005d16:	4613      	mov	r3, r2
 8005d18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d87e      	bhi.n	8005e3c <USB_HC_Init+0x13c>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <USB_HC_Init+0x44>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d55 	.word	0x08005d55
 8005d48:	08005dff 	.word	0x08005dff
 8005d4c:	08005d55 	.word	0x08005d55
 8005d50:	08005dc1 	.word	0x08005dc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	461a      	mov	r2, r3
 8005d62:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	da10      	bge.n	8005d92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	78fa      	ldrb	r2, [r7, #3]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005d90:	e057      	b.n	8005e42 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d051      	beq.n	8005e42 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dbc:	60d3      	str	r3, [r2, #12]
      break;
 8005dbe:	e040      	b.n	8005e42 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f240 639d 	movw	r3, #1693	; 0x69d
 8005dd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da34      	bge.n	8005e46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	78fa      	ldrb	r2, [r7, #3]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005dfc:	e023      	b.n	8005e46 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f240 2325 	movw	r3, #549	; 0x225
 8005e10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da17      	bge.n	8005e4a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e34:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e3a:	e006      	b.n	8005e4a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77fb      	strb	r3, [r7, #31]
      break;
 8005e40:	e004      	b.n	8005e4c <USB_HC_Init+0x14c>
      break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <USB_HC_Init+0x14c>
      break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <USB_HC_Init+0x14c>
      break;
 8005e4a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	6939      	ldr	r1, [r7, #16]
 8005e62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e66:	4313      	orrs	r3, r2
 8005e68:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da03      	bge.n	8005e86 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e001      	b.n	8005e8a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff ff0f 	bl	8005cae <USB_GetHostSpeed>
 8005e90:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d106      	bne.n	8005ea8 <USB_HC_Init+0x1a8>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d003      	beq.n	8005ea8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e001      	b.n	8005eac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eac:	787b      	ldrb	r3, [r7, #1]
 8005eae:	059b      	lsls	r3, r3, #22
 8005eb0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005eb4:	78bb      	ldrb	r3, [r7, #2]
 8005eb6:	02db      	lsls	r3, r3, #11
 8005eb8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ebc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ec2:	049b      	lsls	r3, r3, #18
 8005ec4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ec8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005eca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ed0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	0159      	lsls	r1, r3, #5
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	440b      	add	r3, r1
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ee8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005eea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d10f      	bne.n	8005f12 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f10:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08c      	sub	sp, #48	; 0x30
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d02d      	beq.n	8005fa2 <USB_HC_StartXfer+0x86>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	791b      	ldrb	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d129      	bne.n	8005fa2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d117      	bne.n	8005f84 <USB_HC_StartXfer+0x68>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	79db      	ldrb	r3, [r3, #7]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <USB_HC_StartXfer+0x48>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	79db      	ldrb	r3, [r3, #7]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d10f      	bne.n	8005f84 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <USB_HC_StartXfer+0x86>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	795b      	ldrb	r3, [r3, #5]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d107      	bne.n	8005fa2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	4619      	mov	r1, r3
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fa2f 	bl	80063fc <USB_DoPing>
      return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e0f8      	b.n	8006194 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d018      	beq.n	8005fdc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	8912      	ldrh	r2, [r2, #8]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	8912      	ldrh	r2, [r2, #8]
 8005fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fbe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005fc0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005fc2:	8b7b      	ldrh	r3, [r7, #26]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d90b      	bls.n	8005fe0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005fc8:	8b7b      	ldrh	r3, [r7, #26]
 8005fca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	8912      	ldrh	r2, [r2, #8]
 8005fd2:	fb02 f203 	mul.w	r2, r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	611a      	str	r2, [r3, #16]
 8005fda:	e001      	b.n	8005fe0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	78db      	ldrb	r3, [r3, #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fe8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	8912      	ldrh	r2, [r2, #8]
 8005fee:	fb02 f203 	mul.w	r2, r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	611a      	str	r2, [r3, #16]
 8005ff6:	e003      	b.n	8006000 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800600a:	04d9      	lsls	r1, r3, #19
 800600c:	4b63      	ldr	r3, [pc, #396]	; (800619c <USB_HC_StartXfer+0x280>)
 800600e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006010:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	7a9b      	ldrb	r3, [r3, #10]
 8006016:	075b      	lsls	r3, r3, #29
 8006018:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800601c:	69f9      	ldr	r1, [r7, #28]
 800601e:	0148      	lsls	r0, r1, #5
 8006020:	6a39      	ldr	r1, [r7, #32]
 8006022:	4401      	add	r1, r0
 8006024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006028:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800602a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	68d9      	ldr	r1, [r3, #12]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006042:	460a      	mov	r2, r1
 8006044:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	6a3a      	ldr	r2, [r7, #32]
 8006072:	440a      	add	r2, r1
 8006074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800607c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	7e7b      	ldrb	r3, [r7, #25]
 800608e:	075b      	lsls	r3, r3, #29
 8006090:	69f9      	ldr	r1, [r7, #28]
 8006092:	0148      	lsls	r0, r1, #5
 8006094:	6a39      	ldr	r1, [r7, #32]
 8006096:	4401      	add	r1, r0
 8006098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	78db      	ldrb	r3, [r3, #3]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	e003      	b.n	80060d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	461a      	mov	r2, r3
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e04e      	b.n	8006194 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	78db      	ldrb	r3, [r3, #3]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d149      	bne.n	8006192 <USB_HC_StartXfer+0x276>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d045      	beq.n	8006192 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	79db      	ldrb	r3, [r3, #7]
 800610a:	2b03      	cmp	r3, #3
 800610c:	d830      	bhi.n	8006170 <USB_HC_StartXfer+0x254>
 800610e:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <USB_HC_StartXfer+0x1f8>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	08006125 	.word	0x08006125
 8006118:	08006149 	.word	0x08006149
 800611c:	08006125 	.word	0x08006125
 8006120:	08006149 	.word	0x08006149
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	3303      	adds	r3, #3
 800612a:	089b      	lsrs	r3, r3, #2
 800612c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800612e:	8afa      	ldrh	r2, [r7, #22]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	b29b      	uxth	r3, r3
 8006136:	429a      	cmp	r2, r3
 8006138:	d91c      	bls.n	8006174 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f043 0220 	orr.w	r2, r3, #32
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	619a      	str	r2, [r3, #24]
        }
        break;
 8006146:	e015      	b.n	8006174 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	3303      	adds	r3, #3
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006152:	8afa      	ldrh	r2, [r7, #22]
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	b29b      	uxth	r3, r3
 800615e:	429a      	cmp	r2, r3
 8006160:	d90a      	bls.n	8006178 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	619a      	str	r2, [r3, #24]
        }
        break;
 800616e:	e003      	b.n	8006178 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <USB_HC_StartXfer+0x25e>
        break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <USB_HC_StartXfer+0x25e>
        break;
 8006178:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	68d9      	ldr	r1, [r3, #12]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	785a      	ldrb	r2, [r3, #1]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	b29b      	uxth	r3, r3
 8006188:	2000      	movs	r0, #0
 800618a:	9000      	str	r0, [sp, #0]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fb53 	bl	8005838 <USB_WritePacket>
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3728      	adds	r7, #40	; 0x28
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	1ff80000 	.word	0x1ff80000

080061a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	b29b      	uxth	r3, r3
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b089      	sub	sp, #36	; 0x24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	0c9b      	lsrs	r3, r3, #18
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	0fdb      	lsrs	r3, r3, #31
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b20      	cmp	r3, #32
 8006210:	d104      	bne.n	800621c <USB_HC_Halt+0x5a>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e0e8      	b.n	80063ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <USB_HC_Halt+0x66>
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d173      	bne.n	8006310 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006246:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	f040 80cb 	bne.w	80063ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d143      	bne.n	80062ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	440a      	add	r2, r1
 8006278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006280:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	440a      	add	r2, r1
 8006298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	3301      	adds	r3, #1
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ce:	d81d      	bhi.n	800630c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e6:	d0ec      	beq.n	80062c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062e8:	e080      	b.n	80063ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006308:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800630a:	e06f      	b.n	80063ec <USB_HC_Halt+0x22a>
            break;
 800630c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800630e:	e06d      	b.n	80063ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	440a      	add	r2, r1
 8006326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800632e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d143      	bne.n	80063c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	440a      	add	r2, r1
 8006356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800635e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	440a      	add	r2, r1
 8006376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800637e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	440a      	add	r2, r1
 8006396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800639e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	3301      	adds	r3, #1
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ac:	d81d      	bhi.n	80063ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c4:	d0ec      	beq.n	80063a0 <USB_HC_Halt+0x1de>
 80063c6:	e011      	b.n	80063ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	e000      	b.n	80063ec <USB_HC_Halt+0x22a>
          break;
 80063ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006410:	2301      	movs	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	04da      	lsls	r2, r3, #19
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <USB_DoPing+0x74>)
 800641a:	4013      	ands	r3, r2
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	440a      	add	r2, r1
 8006424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800642c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006444:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800644c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	1ff80000 	.word	0x1ff80000

08006474 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff f935 	bl	80056f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800648a:	2110      	movs	r1, #16
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff f98f 	bl	80057b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff f9b0 	bl	80057f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	e01f      	b.n	80064de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	461a      	mov	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3301      	adds	r3, #1
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b0f      	cmp	r3, #15
 80064e2:	d9dc      	bls.n	800649e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	e034      	b.n	8006554 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006500:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006508:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006510:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	461a      	mov	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	3301      	adds	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006530:	d80c      	bhi.n	800654c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006548:	d0ec      	beq.n	8006524 <USB_StopHost+0xb0>
 800654a:	e000      	b.n	800654e <USB_StopHost+0xda>
        break;
 800654c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3301      	adds	r3, #1
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b0f      	cmp	r3, #15
 8006558:	d9c7      	bls.n	80064ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006560:	461a      	mov	r2, r3
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff f8ae 	bl	80056d2 <USB_EnableGlobalInt>

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b089      	sub	sp, #36	; 0x24
 8006584:	af04      	add	r7, sp, #16
 8006586:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006588:	2301      	movs	r3, #1
 800658a:	2202      	movs	r2, #2
 800658c:	2102      	movs	r1, #2
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fcb8 	bl	8006f04 <USBH_FindInterface>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2bff      	cmp	r3, #255	; 0xff
 800659c:	d002      	beq.n	80065a4 <USBH_CDC_InterfaceInit+0x24>
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d901      	bls.n	80065a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065a4:	2302      	movs	r3, #2
 80065a6:	e13d      	b.n	8006824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fc8d 	bl	8006ecc <USBH_SelectInterface>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065bc:	2302      	movs	r3, #2
 80065be:	e131      	b.n	8006824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80065c6:	2050      	movs	r0, #80	; 0x50
 80065c8:	f004 fefe 	bl	800b3c8 <malloc>
 80065cc:	4603      	mov	r3, r0
 80065ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80065e0:	2302      	movs	r3, #2
 80065e2:	e11f      	b.n	8006824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80065e4:	2250      	movs	r2, #80	; 0x50
 80065e6:	2100      	movs	r1, #0
 80065e8:	68b8      	ldr	r0, [r7, #8]
 80065ea:	f004 ff0b 	bl	800b404 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	211a      	movs	r1, #26
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	4413      	add	r3, r2
 80065fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	b25b      	sxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	da15      	bge.n	8006632 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	211a      	movs	r1, #26
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	4413      	add	r3, r2
 8006612:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006616:	781a      	ldrb	r2, [r3, #0]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	211a      	movs	r1, #26
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800662c:	881a      	ldrh	r2, [r3, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	785b      	ldrb	r3, [r3, #1]
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f002 f890 	bl	800875e <USBH_AllocPipe>
 800663e:	4603      	mov	r3, r0
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	7819      	ldrb	r1, [r3, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	7858      	ldrb	r0, [r3, #1]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	8952      	ldrh	r2, [r2, #10]
 800665e:	9202      	str	r2, [sp, #8]
 8006660:	2203      	movs	r2, #3
 8006662:	9201      	str	r2, [sp, #4]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	4623      	mov	r3, r4
 8006668:	4602      	mov	r2, r0
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f002 f848 	bl	8008700 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2200      	movs	r2, #0
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f004 fdf7 	bl	800b26c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800667e:	2300      	movs	r3, #0
 8006680:	2200      	movs	r2, #0
 8006682:	210a      	movs	r1, #10
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fc3d 	bl	8006f04 <USBH_FindInterface>
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2bff      	cmp	r3, #255	; 0xff
 8006692:	d002      	beq.n	800669a <USBH_CDC_InterfaceInit+0x11a>
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d901      	bls.n	800669e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800669a:	2302      	movs	r3, #2
 800669c:	e0c2      	b.n	8006824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	211a      	movs	r1, #26
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da16      	bge.n	80066e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	211a      	movs	r1, #26
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	211a      	movs	r1, #26
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066dc:	881a      	ldrh	r2, [r3, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	835a      	strh	r2, [r3, #26]
 80066e2:	e015      	b.n	8006710 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	211a      	movs	r1, #26
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066f4:	781a      	ldrb	r2, [r3, #0]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	211a      	movs	r1, #26
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	211a      	movs	r1, #26
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b25b      	sxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	da16      	bge.n	8006756 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	211a      	movs	r1, #26
 800672e:	fb01 f303 	mul.w	r3, r1, r3
 8006732:	4413      	add	r3, r2
 8006734:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	211a      	movs	r1, #26
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	835a      	strh	r2, [r3, #26]
 8006754:	e015      	b.n	8006782 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	211a      	movs	r1, #26
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	4413      	add	r3, r2
 8006762:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006766:	781a      	ldrb	r2, [r3, #0]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	211a      	movs	r1, #26
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800677c:	881a      	ldrh	r2, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	7b9b      	ldrb	r3, [r3, #14]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 ffe8 	bl	800875e <USBH_AllocPipe>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	7bdb      	ldrb	r3, [r3, #15]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 ffde 	bl	800875e <USBH_AllocPipe>
 80067a2:	4603      	mov	r3, r0
 80067a4:	461a      	mov	r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	7b59      	ldrb	r1, [r3, #13]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	7b98      	ldrb	r0, [r3, #14]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	8b12      	ldrh	r2, [r2, #24]
 80067c2:	9202      	str	r2, [sp, #8]
 80067c4:	2202      	movs	r2, #2
 80067c6:	9201      	str	r2, [sp, #4]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	4623      	mov	r3, r4
 80067cc:	4602      	mov	r2, r0
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 ff96 	bl	8008700 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	7b19      	ldrb	r1, [r3, #12]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	7bd8      	ldrb	r0, [r3, #15]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	8b52      	ldrh	r2, [r2, #26]
 80067ec:	9202      	str	r2, [sp, #8]
 80067ee:	2202      	movs	r2, #2
 80067f0:	9201      	str	r2, [sp, #4]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	4623      	mov	r3, r4
 80067f6:	4602      	mov	r2, r0
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 ff81 	bl	8008700 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	7b5b      	ldrb	r3, [r3, #13]
 800680a:	2200      	movs	r2, #0
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f004 fd2c 	bl	800b26c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	7b1b      	ldrb	r3, [r3, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f004 fd25 	bl	800b26c <USBH_LL_SetToggle>

  return USBH_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bd90      	pop	{r4, r7, pc}

0800682c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00e      	beq.n	8006864 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 ff76 	bl	800873e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 ffa1 	bl	80087a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	7b1b      	ldrb	r3, [r3, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	7b1b      	ldrb	r3, [r3, #12]
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 ff63 	bl	800873e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	7b1b      	ldrb	r3, [r3, #12]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 ff8e 	bl	80087a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	7b5b      	ldrb	r3, [r3, #13]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	7b5b      	ldrb	r3, [r3, #13]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 ff50 	bl	800873e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	7b5b      	ldrb	r3, [r3, #13]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 ff7b 	bl	80087a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00b      	beq.n	80068d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f004 fd87 	bl	800b3d8 <free>
    phost->pActiveClass->pData = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d0:	2200      	movs	r2, #0
 80068d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3340      	adds	r3, #64	; 0x40
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8b1 	bl	8006a5e <GetLineCoding>
 80068fc:	4603      	mov	r3, r0
 80068fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006900:	7afb      	ldrb	r3, [r7, #11]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800690c:	2102      	movs	r1, #2
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006912:	7afb      	ldrb	r3, [r7, #11]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800693c:	2b04      	cmp	r3, #4
 800693e:	d877      	bhi.n	8006a30 <USBH_CDC_Process+0x114>
 8006940:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <USBH_CDC_Process+0x2c>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	0800695d 	.word	0x0800695d
 800694c:	08006963 	.word	0x08006963
 8006950:	08006993 	.word	0x08006993
 8006954:	08006a07 	.word	0x08006a07
 8006958:	08006a15 	.word	0x08006a15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	73fb      	strb	r3, [r7, #15]
      break;
 8006960:	e06d      	b.n	8006a3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f897 	bl	8006a9c <SetLineCoding>
 800696e:	4603      	mov	r3, r0
 8006970:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006980:	e058      	b.n	8006a34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d055      	beq.n	8006a34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2204      	movs	r2, #4
 800698c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006990:	e050      	b.n	8006a34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	3340      	adds	r3, #64	; 0x40
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f860 	bl	8006a5e <GetLineCoding>
 800699e:	4603      	mov	r3, r0
 80069a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d126      	bne.n	80069f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d13b      	bne.n	8006a38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d133      	bne.n	8006a38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069dc:	429a      	cmp	r2, r3
 80069de:	d12b      	bne.n	8006a38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d124      	bne.n	8006a38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f982 	bl	8006cf8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069f4:	e020      	b.n	8006a38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d01d      	beq.n	8006a38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2204      	movs	r2, #4
 8006a00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a04:	e018      	b.n	8006a38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f867 	bl	8006ada <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f8f6 	bl	8006bfe <CDC_ProcessReception>
      break;
 8006a12:	e014      	b.n	8006a3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a14:	2100      	movs	r1, #0
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f951 	bl	8007cbe <USBH_ClrFeature>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a2e:	e005      	b.n	8006a3c <USBH_CDC_Process+0x120>

    default:
      break;
 8006a30:	bf00      	nop
 8006a32:	e004      	b.n	8006a3e <USBH_CDC_Process+0x122>
      break;
 8006a34:	bf00      	nop
 8006a36:	e002      	b.n	8006a3e <USBH_CDC_Process+0x122>
      break;
 8006a38:	bf00      	nop
 8006a3a:	e000      	b.n	8006a3e <USBH_CDC_Process+0x122>
      break;
 8006a3c:	bf00      	nop

  }

  return status;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	22a1      	movs	r2, #161	; 0xa1
 8006a6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2221      	movs	r2, #33	; 0x21
 8006a72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2207      	movs	r2, #7
 8006a84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2207      	movs	r2, #7
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 faf6 	bl	800807e <USBH_CtlReq>
 8006a92:	4603      	mov	r3, r0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2221      	movs	r2, #33	; 0x21
 8006aaa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2207      	movs	r2, #7
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fad7 	bl	800807e <USBH_CtlReq>
 8006ad0:	4603      	mov	r3, r0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af02      	add	r7, sp, #8
 8006ae0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d002      	beq.n	8006b00 <CDC_ProcessTransmission+0x26>
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d023      	beq.n	8006b46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006afe:	e07a      	b.n	8006bf6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	8b12      	ldrh	r2, [r2, #24]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d90b      	bls.n	8006b24 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	69d9      	ldr	r1, [r3, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8b1a      	ldrh	r2, [r3, #24]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	7b5b      	ldrb	r3, [r3, #13]
 8006b18:	2001      	movs	r0, #1
 8006b1a:	9000      	str	r0, [sp, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fdac 	bl	800867a <USBH_BulkSendData>
 8006b22:	e00b      	b.n	8006b3c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7b5b      	ldrb	r3, [r3, #13]
 8006b32:	2001      	movs	r0, #1
 8006b34:	9000      	str	r0, [sp, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fd9f 	bl	800867a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b44:	e057      	b.n	8006bf6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	7b5b      	ldrb	r3, [r3, #13]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f004 fb63 	bl	800b218 <USBH_LL_GetURBState>
 8006b52:	4603      	mov	r3, r0
 8006b54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b56:	7afb      	ldrb	r3, [r7, #11]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d136      	bne.n	8006bca <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	8b12      	ldrh	r2, [r2, #24]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d90e      	bls.n	8006b86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	8b12      	ldrh	r2, [r2, #24]
 8006b70:	1a9a      	subs	r2, r3, r2
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	8b12      	ldrh	r2, [r2, #24]
 8006b7e:	441a      	add	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	61da      	str	r2, [r3, #28]
 8006b84:	e002      	b.n	8006b8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006b9c:	e006      	b.n	8006bac <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f892 	bl	8006cd0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f001 fee8 	bl	8008998 <osMessagePut>
      break;
 8006bc8:	e014      	b.n	8006bf4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bca:	7afb      	ldrb	r3, [r7, #11]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d111      	bne.n	8006bf4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bec:	2200      	movs	r2, #0
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f001 fed2 	bl	8008998 <osMessagePut>
      break;
 8006bf4:	bf00      	nop
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d002      	beq.n	8006c24 <CDC_ProcessReception+0x26>
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d00e      	beq.n	8006c40 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c22:	e051      	b.n	8006cc8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	6a19      	ldr	r1, [r3, #32]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	8b5a      	ldrh	r2, [r3, #26]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	7b1b      	ldrb	r3, [r3, #12]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fd47 	bl	80086c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2204      	movs	r2, #4
 8006c3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c3e:	e043      	b.n	8006cc8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	7b1b      	ldrb	r3, [r3, #12]
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f004 fae6 	bl	800b218 <USBH_LL_GetURBState>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c50:	7cfb      	ldrb	r3, [r7, #19]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d137      	bne.n	8006cc6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	7b1b      	ldrb	r3, [r3, #12]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f004 fa49 	bl	800b0f4 <USBH_LL_GetLastXferSize>
 8006c62:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d016      	beq.n	8006c9c <CDC_ProcessReception+0x9e>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	8b5b      	ldrh	r3, [r3, #26]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d910      	bls.n	8006c9c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	6a1a      	ldr	r2, [r3, #32]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	441a      	add	r2, r3
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2203      	movs	r2, #3
 8006c96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006c9a:	e006      	b.n	8006caa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f81d 	bl	8006ce4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2204      	movs	r2, #4
 8006cae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f001 fe69 	bl	8008998 <osMessagePut>
      break;
 8006cc6:	bf00      	nop
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006d0c:	b5b0      	push	{r4, r5, r7, lr}
 8006d0e:	b090      	sub	sp, #64	; 0x40
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d20:	2302      	movs	r3, #2
 8006d22:	e04d      	b.n	8006dc0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	79fa      	ldrb	r2, [r7, #7]
 8006d28:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f847 	bl	8006dd0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006d70:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <USBH_Init+0xbc>)
 8006d72:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fddf 	bl	8008946 <osMessageCreate>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006d90:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <USBH_Init+0xc0>)
 8006d92:	f107 0414 	add.w	r4, r7, #20
 8006d96:	461d      	mov	r5, r3
 8006d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	68f9      	ldr	r1, [r7, #12]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fd6b 	bl	8008886 <osThreadCreate>
 8006db0:	4602      	mov	r2, r0
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f004 f8dd 	bl	800af78 <USBH_LL_Init>

  return USBH_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3740      	adds	r7, #64	; 0x40
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc8:	0800b5f4 	.word	0x0800b5f4
 8006dcc:	0800b604 	.word	0x0800b604

08006dd0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e009      	b.n	8006df6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	33e0      	adds	r3, #224	; 0xe0
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b0e      	cmp	r3, #14
 8006dfa:	d9f2      	bls.n	8006de2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e009      	b.n	8006e16 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1c:	d3f1      	bcc.n	8006e02 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2240      	movs	r2, #64	; 0x40
 8006e42:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10e      	bne.n	8006eb4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e9c:	1c59      	adds	r1, r3, #1
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	33de      	adds	r3, #222	; 0xde
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
 8006eb2:	e004      	b.n	8006ebe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	73fb      	strb	r3, [r7, #15]
 8006eb8:	e001      	b.n	8006ebe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d204      	bcs.n	8006ef2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ef0:	e001      	b.n	8006ef6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	461a      	mov	r2, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	70fb      	strb	r3, [r7, #3]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70bb      	strb	r3, [r7, #2]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f2e:	e025      	b.n	8006f7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	221a      	movs	r2, #26
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	3308      	adds	r3, #8
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	3302      	adds	r3, #2
 8006f40:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	795b      	ldrb	r3, [r3, #5]
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d002      	beq.n	8006f52 <USBH_FindInterface+0x4e>
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	2bff      	cmp	r3, #255	; 0xff
 8006f50:	d111      	bne.n	8006f76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f56:	78ba      	ldrb	r2, [r7, #2]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d002      	beq.n	8006f62 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f5c:	78bb      	ldrb	r3, [r7, #2]
 8006f5e:	2bff      	cmp	r3, #255	; 0xff
 8006f60:	d109      	bne.n	8006f76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f66:	787a      	ldrb	r2, [r7, #1]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d002      	beq.n	8006f72 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f6c:	787b      	ldrb	r3, [r7, #1]
 8006f6e:	2bff      	cmp	r3, #255	; 0xff
 8006f70:	d101      	bne.n	8006f76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	e006      	b.n	8006f84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d9d6      	bls.n	8006f30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f82:	23ff      	movs	r3, #255	; 0xff
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f004 f833 	bl	800b004 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f004 f94c 	bl	800b23e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d102      	bne.n	8006fd2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b0b      	cmp	r3, #11
 8006fda:	f200 823c 	bhi.w	8007456 <USBH_Process+0x4a6>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <USBH_Process+0x34>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007015 	.word	0x08007015
 8006fe8:	08007063 	.word	0x08007063
 8006fec:	080070e7 	.word	0x080070e7
 8006ff0:	080073d5 	.word	0x080073d5
 8006ff4:	08007457 	.word	0x08007457
 8006ff8:	080071a7 	.word	0x080071a7
 8006ffc:	0800735f 	.word	0x0800735f
 8007000:	080071f9 	.word	0x080071f9
 8007004:	08007235 	.word	0x08007235
 8007008:	0800726f 	.word	0x0800726f
 800700c:	080072b7 	.word	0x080072b7
 8007010:	080073bd 	.word	0x080073bd
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 821c 	beq.w	800745a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007028:	20c8      	movs	r0, #200	; 0xc8
 800702a:	f004 f94f 	bl	800b2cc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f004 f845 	bl	800b0be <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007058:	2200      	movs	r2, #0
 800705a:	4619      	mov	r1, r3
 800705c:	f001 fc9c 	bl	8008998 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007060:	e1fb      	b.n	800745a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007068:	2b01      	cmp	r3, #1
 800706a:	d107      	bne.n	800707c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	e025      	b.n	80070c8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007086:	d914      	bls.n	80070b2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800708e:	3301      	adds	r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d903      	bls.n	80070aa <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	220d      	movs	r2, #13
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	e00e      	b.n	80070c8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	e00a      	b.n	80070c8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070b8:	f103 020a 	add.w	r2, r3, #10
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80070c2:	200a      	movs	r0, #10
 80070c4:	f004 f902 	bl	800b2cc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80070dc:	2200      	movs	r2, #0
 80070de:	4619      	mov	r1, r3
 80070e0:	f001 fc5a 	bl	8008998 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070e4:	e1c0      	b.n	8007468 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070f6:	2104      	movs	r1, #4
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070fc:	2064      	movs	r0, #100	; 0x64
 80070fe:	f004 f8e5 	bl	800b2cc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f003 ffb4 	bl	800b070 <USBH_LL_GetSpeed>
 8007108:	4603      	mov	r3, r0
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2205      	movs	r2, #5
 8007116:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007118:	2100      	movs	r1, #0
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fb1f 	bl	800875e <USBH_AllocPipe>
 8007120:	4603      	mov	r3, r0
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007128:	2180      	movs	r1, #128	; 0x80
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fb17 	bl	800875e <USBH_AllocPipe>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7919      	ldrb	r1, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800714c:	b292      	uxth	r2, r2
 800714e:	9202      	str	r2, [sp, #8]
 8007150:	2200      	movs	r2, #0
 8007152:	9201      	str	r2, [sp, #4]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4603      	mov	r3, r0
 8007158:	2280      	movs	r2, #128	; 0x80
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fad0 	bl	8008700 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7959      	ldrb	r1, [r3, #5]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007174:	b292      	uxth	r2, r2
 8007176:	9202      	str	r2, [sp, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	4603      	mov	r3, r0
 8007180:	2200      	movs	r2, #0
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fabc 	bl	8008700 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800719c:	2200      	movs	r2, #0
 800719e:	4619      	mov	r1, r3
 80071a0:	f001 fbfa 	bl	8008998 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071a4:	e160      	b.n	8007468 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f964 	bl	8007474 <USBH_HandleEnum>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 8152 	bne.w	800745e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d103      	bne.n	80071d4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2208      	movs	r2, #8
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e002      	b.n	80071da <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2207      	movs	r2, #7
 80071d8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2205      	movs	r2, #5
 80071de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80071ee:	2200      	movs	r2, #0
 80071f0:	4619      	mov	r1, r3
 80071f2:	f001 fbd1 	bl	8008998 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80071f6:	e132      	b.n	800745e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 812f 	beq.w	8007462 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800720a:	2101      	movs	r1, #1
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2208      	movs	r2, #8
 8007214:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2205      	movs	r2, #5
 800721a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800722a:	2200      	movs	r2, #0
 800722c:	4619      	mov	r1, r3
 800722e:	f001 fbb3 	bl	8008998 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007232:	e116      	b.n	8007462 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800723a:	b29b      	uxth	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fcf6 	bl	8007c30 <USBH_SetCfg>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2209      	movs	r2, #9
 800724e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007264:	2200      	movs	r2, #0
 8007266:	4619      	mov	r1, r3
 8007268:	f001 fb96 	bl	8008998 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800726c:	e0fc      	b.n	8007468 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800727c:	2101      	movs	r1, #1
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fcf9 	bl	8007c76 <USBH_SetFeature>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	220a      	movs	r2, #10
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	e002      	b.n	8007298 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	220a      	movs	r2, #10
 8007296:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80072ac:	2200      	movs	r2, #0
 80072ae:	4619      	mov	r1, r3
 80072b0:	f001 fb72 	bl	8008998 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072b4:	e0d8      	b.n	8007468 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d03f      	beq.n	8007340 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
 80072cc:	e016      	b.n	80072fc <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072ce:	7bfa      	ldrb	r2, [r7, #15]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	32de      	adds	r2, #222	; 0xde
 80072d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d8:	791a      	ldrb	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d108      	bne.n	80072f6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072e4:	7bfa      	ldrb	r2, [r7, #15]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32de      	adds	r2, #222	; 0xde
 80072ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80072f4:	e005      	b.n	8007302 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	3301      	adds	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0e5      	beq.n	80072ce <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d016      	beq.n	800733a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2206      	movs	r2, #6
 8007322:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800732a:	2103      	movs	r1, #3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
 8007330:	e006      	b.n	8007340 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	220d      	movs	r2, #13
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e002      	b.n	8007340 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	220d      	movs	r2, #13
 800733e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2205      	movs	r2, #5
 8007344:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007354:	2200      	movs	r2, #0
 8007356:	4619      	mov	r1, r3
 8007358:	f001 fb1e 	bl	8008998 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800735c:	e084      	b.n	8007468 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d017      	beq.n	8007398 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
 8007374:	4603      	mov	r3, r0
 8007376:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d103      	bne.n	8007388 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	220b      	movs	r2, #11
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e00a      	b.n	800739e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d106      	bne.n	800739e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	220d      	movs	r2, #13
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	e002      	b.n	800739e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	220d      	movs	r2, #13
 800739c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2205      	movs	r2, #5
 80073a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80073b2:	2200      	movs	r2, #0
 80073b4:	4619      	mov	r1, r3
 80073b6:	f001 faef 	bl	8008998 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073ba:	e055      	b.n	8007468 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d04f      	beq.n	8007466 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
      }
      break;
 80073d2:	e048      	b.n	8007466 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff fcf7 	bl	8006dd0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007410:	2105      	movs	r1, #5
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b01      	cmp	r3, #1
 8007420:	d107      	bne.n	8007432 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff fdb0 	bl	8006f90 <USBH_Start>
 8007430:	e002      	b.n	8007438 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f003 fde6 	bl	800b004 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800744c:	2200      	movs	r2, #0
 800744e:	4619      	mov	r1, r3
 8007450:	f001 faa2 	bl	8008998 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007454:	e008      	b.n	8007468 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007456:	bf00      	nop
 8007458:	e006      	b.n	8007468 <USBH_Process+0x4b8>
      break;
 800745a:	bf00      	nop
 800745c:	e004      	b.n	8007468 <USBH_Process+0x4b8>
      break;
 800745e:	bf00      	nop
 8007460:	e002      	b.n	8007468 <USBH_Process+0x4b8>
    break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <USBH_Process+0x4b8>
      break;
 8007466:	bf00      	nop
  }
  return USBH_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop

08007474 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af04      	add	r7, sp, #16
 800747a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800747c:	2301      	movs	r3, #1
 800747e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007480:	2301      	movs	r3, #1
 8007482:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b07      	cmp	r3, #7
 800748a:	f200 8208 	bhi.w	800789e <USBH_HandleEnum+0x42a>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <USBH_HandleEnum+0x20>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074b5 	.word	0x080074b5
 8007498:	08007573 	.word	0x08007573
 800749c:	080075dd 	.word	0x080075dd
 80074a0:	0800766b 	.word	0x0800766b
 80074a4:	080076d5 	.word	0x080076d5
 80074a8:	08007745 	.word	0x08007745
 80074ac:	080077e1 	.word	0x080077e1
 80074b0:	0800785f 	.word	0x0800785f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074b4:	2108      	movs	r1, #8
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 faea 	bl	8007a90 <USBH_Get_DevDesc>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d130      	bne.n	8007528 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7919      	ldrb	r1, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074ea:	b292      	uxth	r2, r2
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	9201      	str	r2, [sp, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4603      	mov	r3, r0
 80074f6:	2280      	movs	r2, #128	; 0x80
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 f901 	bl	8008700 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7959      	ldrb	r1, [r3, #5]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007512:	b292      	uxth	r2, r2
 8007514:	9202      	str	r2, [sp, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	9201      	str	r2, [sp, #4]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	4603      	mov	r3, r0
 800751e:	2200      	movs	r2, #0
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f8ed 	bl	8008700 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007526:	e1bc      	b.n	80078a2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b03      	cmp	r3, #3
 800752c:	f040 81b9 	bne.w	80078a2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007536:	3301      	adds	r3, #1
 8007538:	b2da      	uxtb	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007546:	2b03      	cmp	r3, #3
 8007548:	d903      	bls.n	8007552 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220d      	movs	r2, #13
 800754e:	701a      	strb	r2, [r3, #0]
      break;
 8007550:	e1a7      	b.n	80078a2 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	795b      	ldrb	r3, [r3, #5]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f921 	bl	80087a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	791b      	ldrb	r3, [r3, #4]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 f91b 	bl	80087a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
      break;
 8007570:	e197      	b.n	80078a2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007572:	2112      	movs	r1, #18
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa8b 	bl	8007a90 <USBH_Get_DevDesc>
 800757a:	4603      	mov	r3, r0
 800757c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800758a:	e18c      	b.n	80078a6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b03      	cmp	r3, #3
 8007590:	f040 8189 	bne.w	80078a6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800759a:	3301      	adds	r3, #1
 800759c:	b2da      	uxtb	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d903      	bls.n	80075b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	220d      	movs	r2, #13
 80075b2:	701a      	strb	r2, [r3, #0]
      break;
 80075b4:	e177      	b.n	80078a6 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	795b      	ldrb	r3, [r3, #5]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f8ef 	bl	80087a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f8e9 	bl	80087a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
      break;
 80075da:	e164      	b.n	80078a6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075dc:	2101      	movs	r1, #1
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fb02 	bl	8007be8 <USBH_SetAddress>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d132      	bne.n	8007654 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80075ee:	2002      	movs	r0, #2
 80075f0:	f003 fe6c 	bl	800b2cc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2203      	movs	r2, #3
 8007600:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7919      	ldrb	r1, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007616:	b292      	uxth	r2, r2
 8007618:	9202      	str	r2, [sp, #8]
 800761a:	2200      	movs	r2, #0
 800761c:	9201      	str	r2, [sp, #4]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	4603      	mov	r3, r0
 8007622:	2280      	movs	r2, #128	; 0x80
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 f86b 	bl	8008700 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7959      	ldrb	r1, [r3, #5]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800763e:	b292      	uxth	r2, r2
 8007640:	9202      	str	r2, [sp, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	9201      	str	r2, [sp, #4]
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	4603      	mov	r3, r0
 800764a:	2200      	movs	r2, #0
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f857 	bl	8008700 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007652:	e12a      	b.n	80078aa <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b03      	cmp	r3, #3
 8007658:	f040 8127 	bne.w	80078aa <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	220d      	movs	r2, #13
 8007660:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	705a      	strb	r2, [r3, #1]
      break;
 8007668:	e11f      	b.n	80078aa <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800766a:	2109      	movs	r1, #9
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa37 	bl	8007ae0 <USBH_Get_CfgDesc>
 8007672:	4603      	mov	r3, r0
 8007674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2204      	movs	r2, #4
 8007680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007682:	e114      	b.n	80078ae <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b03      	cmp	r3, #3
 8007688:	f040 8111 	bne.w	80078ae <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007692:	3301      	adds	r3, #1
 8007694:	b2da      	uxtb	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d903      	bls.n	80076ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	220d      	movs	r2, #13
 80076aa:	701a      	strb	r2, [r3, #0]
      break;
 80076ac:	e0ff      	b.n	80078ae <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	795b      	ldrb	r3, [r3, #5]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 f873 	bl	80087a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	791b      	ldrb	r3, [r3, #4]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f86d 	bl	80087a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	701a      	strb	r2, [r3, #0]
      break;
 80076d2:	e0ec      	b.n	80078ae <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9ff 	bl	8007ae0 <USBH_Get_CfgDesc>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d103      	bne.n	80076f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2205      	movs	r2, #5
 80076f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076f2:	e0de      	b.n	80078b2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	f040 80db 	bne.w	80078b2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007702:	3301      	adds	r3, #1
 8007704:	b2da      	uxtb	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007712:	2b03      	cmp	r3, #3
 8007714:	d903      	bls.n	800771e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	220d      	movs	r2, #13
 800771a:	701a      	strb	r2, [r3, #0]
      break;
 800771c:	e0c9      	b.n	80078b2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 f83b 	bl	80087a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	791b      	ldrb	r3, [r3, #4]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f835 	bl	80087a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e0b6      	b.n	80078b2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800774a:	2b00      	cmp	r3, #0
 800774c:	d036      	beq.n	80077bc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800775a:	23ff      	movs	r3, #255	; 0xff
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f9e3 	bl	8007b28 <USBH_Get_StringDesc>
 8007762:	4603      	mov	r3, r0
 8007764:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d111      	bne.n	8007790 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2206      	movs	r2, #6
 8007770:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2205      	movs	r2, #5
 8007776:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007786:	2200      	movs	r2, #0
 8007788:	4619      	mov	r1, r3
 800778a:	f001 f905 	bl	8008998 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800778e:	e092      	b.n	80078b6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b03      	cmp	r3, #3
 8007794:	f040 808f 	bne.w	80078b6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2206      	movs	r2, #6
 800779c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2205      	movs	r2, #5
 80077a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077b2:	2200      	movs	r2, #0
 80077b4:	4619      	mov	r1, r3
 80077b6:	f001 f8ef 	bl	8008998 <osMessagePut>
      break;
 80077ba:	e07c      	b.n	80078b6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2206      	movs	r2, #6
 80077c0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2205      	movs	r2, #5
 80077c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077d6:	2200      	movs	r2, #0
 80077d8:	4619      	mov	r1, r3
 80077da:	f001 f8dd 	bl	8008998 <osMessagePut>
      break;
 80077de:	e06a      	b.n	80078b6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d027      	beq.n	800783a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077f6:	23ff      	movs	r3, #255	; 0xff
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f995 	bl	8007b28 <USBH_Get_StringDesc>
 80077fe:	4603      	mov	r3, r0
 8007800:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2207      	movs	r2, #7
 800780c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800780e:	e054      	b.n	80078ba <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b03      	cmp	r3, #3
 8007814:	d151      	bne.n	80078ba <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2207      	movs	r2, #7
 800781a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2205      	movs	r2, #5
 8007820:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007830:	2200      	movs	r2, #0
 8007832:	4619      	mov	r1, r3
 8007834:	f001 f8b0 	bl	8008998 <osMessagePut>
      break;
 8007838:	e03f      	b.n	80078ba <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2207      	movs	r2, #7
 800783e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2205      	movs	r2, #5
 8007844:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007854:	2200      	movs	r2, #0
 8007856:	4619      	mov	r1, r3
 8007858:	f001 f89e 	bl	8008998 <osMessagePut>
      break;
 800785c:	e02d      	b.n	80078ba <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007864:	2b00      	cmp	r3, #0
 8007866:	d017      	beq.n	8007898 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007874:	23ff      	movs	r3, #255	; 0xff
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f956 	bl	8007b28 <USBH_Get_StringDesc>
 800787c:	4603      	mov	r3, r0
 800787e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800788a:	e018      	b.n	80078be <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b03      	cmp	r3, #3
 8007890:	d115      	bne.n	80078be <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
      break;
 8007896:	e012      	b.n	80078be <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
      break;
 800789c:	e00f      	b.n	80078be <USBH_HandleEnum+0x44a>

    default:
      break;
 800789e:	bf00      	nop
 80078a0:	e00e      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078a2:	bf00      	nop
 80078a4:	e00c      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078a6:	bf00      	nop
 80078a8:	e00a      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078aa:	bf00      	nop
 80078ac:	e008      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078ae:	bf00      	nop
 80078b0:	e006      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078b2:	bf00      	nop
 80078b4:	e004      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078b6:	bf00      	nop
 80078b8:	e002      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <USBH_HandleEnum+0x44c>
      break;
 80078be:	bf00      	nop
  }
  return Status;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f804 	bl	800790e <USBH_HandleSof>
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b0b      	cmp	r3, #11
 800791e:	d10a      	bne.n	8007936 <USBH_HandleSof+0x28>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
  }
}
 8007936:	bf00      	nop
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007962:	2200      	movs	r2, #0
 8007964:	4619      	mov	r1, r3
 8007966:	f001 f817 	bl	8008998 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800796a:	bf00      	nop
}
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007982:	bf00      	nop
}
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80079c2:	2200      	movs	r2, #0
 80079c4:	4619      	mov	r1, r3
 80079c6:	f000 ffe7 	bl	8008998 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f003 fb20 	bl	800b03a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	791b      	ldrb	r3, [r3, #4]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fecd 	bl	80087a0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	795b      	ldrb	r3, [r3, #5]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fec7 	bl	80087a0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a26:	2200      	movs	r2, #0
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f000 ffb5 	bl	8008998 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007a46:	f107 030c 	add.w	r3, r7, #12
 8007a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 ffe2 	bl	8008a18 <osMessageGet>
    if (event.status == osEventMessage)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d1f2      	bne.n	8007a40 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff faa8 	bl	8006fb0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007a60:	e7ee      	b.n	8007a40 <USBH_Process_OS+0x8>

08007a62 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	4619      	mov	r1, r3
 8007a82:	f000 ff89 	bl	8008998 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f864 	bl	8007b7e <USBH_GetDescriptor>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f000 f918 	bl	8007d06 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	331c      	adds	r3, #28
 8007af0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007af2:	887b      	ldrh	r3, [r7, #2]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afc:	2100      	movs	r1, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f83d 	bl	8007b7e <USBH_GetDescriptor>
 8007b04:	4603      	mov	r3, r0
 8007b06:	72fb      	strb	r3, [r7, #11]
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b14:	887a      	ldrh	r2, [r7, #2]
 8007b16:	68f9      	ldr	r1, [r7, #12]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f964 	bl	8007de6 <USBH_ParseCfgDesc>
  }

  return status;
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	461a      	mov	r2, r3
 8007b34:	460b      	mov	r3, r1
 8007b36:	72fb      	strb	r3, [r7, #11]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b44:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	460b      	mov	r3, r1
 8007b52:	2100      	movs	r1, #0
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 f812 	bl	8007b7e <USBH_GetDescriptor>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d107      	bne.n	8007b74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b6a:	893a      	ldrh	r2, [r7, #8]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fa37 	bl	8007fe2 <USBH_ParseStringDesc>
  }

  return status;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	72fb      	strb	r3, [r7, #11]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	789b      	ldrb	r3, [r3, #2]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d11c      	bne.n	8007bd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2206      	movs	r2, #6
 8007ba8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	893a      	ldrh	r2, [r7, #8]
 8007bae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bb0:	893b      	ldrh	r3, [r7, #8]
 8007bb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bba:	d104      	bne.n	8007bc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f240 4209 	movw	r2, #1033	; 0x409
 8007bc2:	829a      	strh	r2, [r3, #20]
 8007bc4:	e002      	b.n	8007bcc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8b3a      	ldrh	r2, [r7, #24]
 8007bd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bd2:	8b3b      	ldrh	r3, [r7, #24]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fa50 	bl	800807e <USBH_CtlReq>
 8007bde:	4603      	mov	r3, r0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	789b      	ldrb	r3, [r3, #2]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d10f      	bne.n	8007c1c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2205      	movs	r2, #5
 8007c06:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2100      	movs	r1, #0
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa2c 	bl	800807e <USBH_CtlReq>
 8007c26:	4603      	mov	r3, r0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	789b      	ldrb	r3, [r3, #2]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d10e      	bne.n	8007c62 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2209      	movs	r2, #9
 8007c4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	887a      	ldrh	r2, [r7, #2]
 8007c54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa09 	bl	800807e <USBH_CtlReq>
 8007c6c:	4603      	mov	r3, r0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	789b      	ldrb	r3, [r3, #2]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d10f      	bne.n	8007caa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2203      	movs	r2, #3
 8007c94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007caa:	2200      	movs	r2, #0
 8007cac:	2100      	movs	r1, #0
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f9e5 	bl	800807e <USBH_CtlReq>
 8007cb4:	4603      	mov	r3, r0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	789b      	ldrb	r3, [r3, #2]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d10f      	bne.n	8007cf2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f9c1 	bl	800807e <USBH_CtlReq>
 8007cfc:	4603      	mov	r3, r0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	4613      	mov	r3, r2
 8007d12:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	781a      	ldrb	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	785a      	ldrb	r2, [r3, #1]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3302      	adds	r3, #2
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3303      	adds	r3, #3
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	791a      	ldrb	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	795a      	ldrb	r2, [r3, #5]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	799a      	ldrb	r2, [r3, #6]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	79da      	ldrb	r2, [r3, #7]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d939      	bls.n	8007dda <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	3309      	adds	r3, #9
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	330a      	adds	r3, #10
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	330b      	adds	r3, #11
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	330c      	adds	r3, #12
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	330d      	adds	r3, #13
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4313      	orrs	r3, r2
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	7b9a      	ldrb	r2, [r3, #14]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	7bda      	ldrb	r2, [r3, #15]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	7c1a      	ldrb	r2, [r3, #16]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	7c5a      	ldrb	r2, [r3, #17]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	745a      	strb	r2, [r3, #17]
  }
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b08a      	sub	sp, #40	; 0x28
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	4613      	mov	r3, r2
 8007df2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	785a      	ldrb	r2, [r3, #1]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3303      	adds	r3, #3
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	791a      	ldrb	r2, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	795a      	ldrb	r2, [r3, #5]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	799a      	ldrb	r2, [r3, #6]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	79da      	ldrb	r2, [r3, #7]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	7a1a      	ldrb	r2, [r3, #8]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e5c:	88fb      	ldrh	r3, [r7, #6]
 8007e5e:	2b09      	cmp	r3, #9
 8007e60:	d95f      	bls.n	8007f22 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e62:	2309      	movs	r3, #9
 8007e64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e6a:	e051      	b.n	8007f10 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e6c:	f107 0316 	add.w	r3, r7, #22
 8007e70:	4619      	mov	r1, r3
 8007e72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e74:	f000 f8e8 	bl	8008048 <USBH_GetNextDesc>
 8007e78:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d146      	bne.n	8007f10 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e86:	221a      	movs	r2, #26
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4413      	add	r3, r2
 8007e92:	3302      	adds	r3, #2
 8007e94:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e98:	69f8      	ldr	r0, [r7, #28]
 8007e9a:	f000 f846 	bl	8007f2a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ea8:	e022      	b.n	8007ef0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007eaa:	f107 0316 	add.w	r3, r7, #22
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eb2:	f000 f8c9 	bl	8008048 <USBH_GetNextDesc>
 8007eb6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b05      	cmp	r3, #5
 8007ebe:	d117      	bne.n	8007ef0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ec4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ec8:	3201      	adds	r2, #1
 8007eca:	00d2      	lsls	r2, r2, #3
 8007ecc:	211a      	movs	r1, #26
 8007ece:	fb01 f303 	mul.w	r3, r1, r3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4413      	add	r3, r2
 8007eda:	3304      	adds	r3, #4
 8007edc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ee0:	69b8      	ldr	r0, [r7, #24]
 8007ee2:	f000 f851 	bl	8007f88 <USBH_ParseEPDesc>
            ep_ix++;
 8007ee6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007eea:	3301      	adds	r3, #1
 8007eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	791b      	ldrb	r3, [r3, #4]
 8007ef4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d204      	bcs.n	8007f06 <USBH_ParseCfgDesc+0x120>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	885a      	ldrh	r2, [r3, #2]
 8007f00:	8afb      	ldrh	r3, [r7, #22]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d8d1      	bhi.n	8007eaa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d804      	bhi.n	8007f22 <USBH_ParseCfgDesc+0x13c>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	885a      	ldrh	r2, [r3, #2]
 8007f1c:	8afb      	ldrh	r3, [r7, #22]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d8a4      	bhi.n	8007e6c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f22:	bf00      	nop
 8007f24:	3728      	adds	r7, #40	; 0x28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	785a      	ldrb	r2, [r3, #1]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	789a      	ldrb	r2, [r3, #2]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	78da      	ldrb	r2, [r3, #3]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	791a      	ldrb	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	795a      	ldrb	r2, [r3, #5]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	799a      	ldrb	r2, [r3, #6]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	79da      	ldrb	r2, [r3, #7]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	7a1a      	ldrb	r2, [r3, #8]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	721a      	strb	r2, [r3, #8]
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781a      	ldrb	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	785a      	ldrb	r2, [r3, #1]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	789a      	ldrb	r2, [r3, #2]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	78da      	ldrb	r2, [r3, #3]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	3305      	adds	r3, #5
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	021b      	lsls	r3, r3, #8
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	799a      	ldrb	r2, [r3, #6]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	719a      	strb	r2, [r3, #6]
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b087      	sub	sp, #28
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	4613      	mov	r3, r2
 8007fee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d120      	bne.n	800803c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	1e9a      	subs	r2, r3, #2
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	4293      	cmp	r3, r2
 8008004:	bf28      	it	cs
 8008006:	4613      	movcs	r3, r2
 8008008:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3302      	adds	r3, #2
 800800e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008010:	2300      	movs	r3, #0
 8008012:	82fb      	strh	r3, [r7, #22]
 8008014:	e00b      	b.n	800802e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008016:	8afb      	ldrh	r3, [r7, #22]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	3301      	adds	r3, #1
 8008026:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008028:	8afb      	ldrh	r3, [r7, #22]
 800802a:	3302      	adds	r3, #2
 800802c:	82fb      	strh	r3, [r7, #22]
 800802e:	8afa      	ldrh	r2, [r7, #22]
 8008030:	8abb      	ldrh	r3, [r7, #20]
 8008032:	429a      	cmp	r2, r3
 8008034:	d3ef      	bcc.n	8008016 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
  }
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	881a      	ldrh	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	4413      	add	r3, r2
 800805e:	b29a      	uxth	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008070:	68fb      	ldr	r3, [r7, #12]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b086      	sub	sp, #24
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	4613      	mov	r3, r2
 800808a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800808c:	2301      	movs	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	789b      	ldrb	r3, [r3, #2]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d002      	beq.n	800809e <USBH_CtlReq+0x20>
 8008098:	2b02      	cmp	r3, #2
 800809a:	d01d      	beq.n	80080d8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800809c:	e043      	b.n	8008126 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	88fa      	ldrh	r2, [r7, #6]
 80080a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2202      	movs	r2, #2
 80080b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2203      	movs	r2, #3
 80080be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080ce:	2200      	movs	r2, #0
 80080d0:	4619      	mov	r1, r3
 80080d2:	f000 fc61 	bl	8008998 <osMessagePut>
      break;
 80080d6:	e026      	b.n	8008126 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f829 	bl	8008130 <USBH_HandleControl>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <USBH_CtlReq+0x70>
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d106      	bne.n	80080fc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	761a      	strb	r2, [r3, #24]
 80080fa:	e005      	b.n	8008108 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d102      	bne.n	8008108 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2203      	movs	r2, #3
 800810c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800811c:	2200      	movs	r2, #0
 800811e:	4619      	mov	r1, r3
 8008120:	f000 fc3a 	bl	8008998 <osMessagePut>
      break;
 8008124:	bf00      	nop
  }
  return status;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af02      	add	r7, sp, #8
 8008136:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800813c:	2300      	movs	r3, #0
 800813e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7e1b      	ldrb	r3, [r3, #24]
 8008144:	3b01      	subs	r3, #1
 8008146:	2b0a      	cmp	r3, #10
 8008148:	f200 8229 	bhi.w	800859e <USBH_HandleControl+0x46e>
 800814c:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <USBH_HandleControl+0x24>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	08008181 	.word	0x08008181
 8008158:	0800819b 	.word	0x0800819b
 800815c:	0800823d 	.word	0x0800823d
 8008160:	08008263 	.word	0x08008263
 8008164:	080082ef 	.word	0x080082ef
 8008168:	08008319 	.word	0x08008319
 800816c:	080083db 	.word	0x080083db
 8008170:	080083fd 	.word	0x080083fd
 8008174:	0800848f 	.word	0x0800848f
 8008178:	080084b5 	.word	0x080084b5
 800817c:	08008547 	.word	0x08008547
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f103 0110 	add.w	r1, r3, #16
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	795b      	ldrb	r3, [r3, #5]
 800818a:	461a      	mov	r2, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa17 	bl	80085c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	761a      	strb	r2, [r3, #24]
      break;
 8008198:	e20c      	b.n	80085b4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	795b      	ldrb	r3, [r3, #5]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f003 f839 	bl	800b218 <USBH_LL_GetURBState>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d12c      	bne.n	800820a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	7c1b      	ldrb	r3, [r3, #16]
 80081b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	8adb      	ldrh	r3, [r3, #22]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081c2:	7b7b      	ldrb	r3, [r7, #13]
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d103      	bne.n	80081d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2203      	movs	r2, #3
 80081cc:	761a      	strb	r2, [r3, #24]
 80081ce:	e00d      	b.n	80081ec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2205      	movs	r2, #5
 80081d4:	761a      	strb	r2, [r3, #24]
 80081d6:	e009      	b.n	80081ec <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80081d8:	7b7b      	ldrb	r3, [r7, #13]
 80081da:	2b80      	cmp	r3, #128	; 0x80
 80081dc:	d103      	bne.n	80081e6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2209      	movs	r2, #9
 80081e2:	761a      	strb	r2, [r3, #24]
 80081e4:	e002      	b.n	80081ec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2207      	movs	r2, #7
 80081ea:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2203      	movs	r2, #3
 80081f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008200:	2200      	movs	r2, #0
 8008202:	4619      	mov	r1, r3
 8008204:	f000 fbc8 	bl	8008998 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008208:	e1cb      	b.n	80085a2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b04      	cmp	r3, #4
 800820e:	d003      	beq.n	8008218 <USBH_HandleControl+0xe8>
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b02      	cmp	r3, #2
 8008214:	f040 81c5 	bne.w	80085a2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	220b      	movs	r2, #11
 800821c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2203      	movs	r2, #3
 8008222:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008232:	2200      	movs	r2, #0
 8008234:	4619      	mov	r1, r3
 8008236:	f000 fbaf 	bl	8008998 <osMessagePut>
      break;
 800823a:	e1b2      	b.n	80085a2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008242:	b29a      	uxth	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6899      	ldr	r1, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	899a      	ldrh	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	791b      	ldrb	r3, [r3, #4]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9f2 	bl	800863e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2204      	movs	r2, #4
 800825e:	761a      	strb	r2, [r3, #24]
      break;
 8008260:	e1a8      	b.n	80085b4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f002 ffd5 	bl	800b218 <USBH_LL_GetURBState>
 800826e:	4603      	mov	r3, r0
 8008270:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d110      	bne.n	800829a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2209      	movs	r2, #9
 800827c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2203      	movs	r2, #3
 8008282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008292:	2200      	movs	r2, #0
 8008294:	4619      	mov	r1, r3
 8008296:	f000 fb7f 	bl	8008998 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b05      	cmp	r3, #5
 800829e:	d110      	bne.n	80082c2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082a0:	2303      	movs	r3, #3
 80082a2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2203      	movs	r2, #3
 80082a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082b8:	2200      	movs	r2, #0
 80082ba:	4619      	mov	r1, r3
 80082bc:	f000 fb6c 	bl	8008998 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082c0:	e171      	b.n	80085a6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	f040 816e 	bne.w	80085a6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	220b      	movs	r2, #11
 80082ce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2203      	movs	r2, #3
 80082d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082e4:	2200      	movs	r2, #0
 80082e6:	4619      	mov	r1, r3
 80082e8:	f000 fb56 	bl	8008998 <osMessagePut>
      break;
 80082ec:	e15b      	b.n	80085a6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6899      	ldr	r1, [r3, #8]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	899a      	ldrh	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	795b      	ldrb	r3, [r3, #5]
 80082fa:	2001      	movs	r0, #1
 80082fc:	9000      	str	r0, [sp, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f978 	bl	80085f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2206      	movs	r2, #6
 8008314:	761a      	strb	r2, [r3, #24]
      break;
 8008316:	e14d      	b.n	80085b4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	795b      	ldrb	r3, [r3, #5]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f002 ff7a 	bl	800b218 <USBH_LL_GetURBState>
 8008324:	4603      	mov	r3, r0
 8008326:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d111      	bne.n	8008352 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2207      	movs	r2, #7
 8008332:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2203      	movs	r2, #3
 8008338:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008348:	2200      	movs	r2, #0
 800834a:	4619      	mov	r1, r3
 800834c:	f000 fb24 	bl	8008998 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008350:	e12b      	b.n	80085aa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b05      	cmp	r3, #5
 8008356:	d113      	bne.n	8008380 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	220c      	movs	r2, #12
 800835c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800835e:	2303      	movs	r3, #3
 8008360:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2203      	movs	r2, #3
 8008366:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008376:	2200      	movs	r2, #0
 8008378:	4619      	mov	r1, r3
 800837a:	f000 fb0d 	bl	8008998 <osMessagePut>
      break;
 800837e:	e114      	b.n	80085aa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d111      	bne.n	80083aa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2205      	movs	r2, #5
 800838a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2203      	movs	r2, #3
 8008390:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083a0:	2200      	movs	r2, #0
 80083a2:	4619      	mov	r1, r3
 80083a4:	f000 faf8 	bl	8008998 <osMessagePut>
      break;
 80083a8:	e0ff      	b.n	80085aa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	f040 80fc 	bne.w	80085aa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	220b      	movs	r2, #11
 80083b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083b8:	2302      	movs	r3, #2
 80083ba:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2203      	movs	r2, #3
 80083c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083d0:	2200      	movs	r2, #0
 80083d2:	4619      	mov	r1, r3
 80083d4:	f000 fae0 	bl	8008998 <osMessagePut>
      break;
 80083d8:	e0e7      	b.n	80085aa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	791b      	ldrb	r3, [r3, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f92b 	bl	800863e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2208      	movs	r2, #8
 80083f8:	761a      	strb	r2, [r3, #24]

      break;
 80083fa:	e0db      	b.n	80085b4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	791b      	ldrb	r3, [r3, #4]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f002 ff08 	bl	800b218 <USBH_LL_GetURBState>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d113      	bne.n	800843a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	220d      	movs	r2, #13
 8008416:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2203      	movs	r2, #3
 8008420:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008430:	2200      	movs	r2, #0
 8008432:	4619      	mov	r1, r3
 8008434:	f000 fab0 	bl	8008998 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008438:	e0b9      	b.n	80085ae <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d111      	bne.n	8008464 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	220b      	movs	r2, #11
 8008444:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2203      	movs	r2, #3
 800844a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800845a:	2200      	movs	r2, #0
 800845c:	4619      	mov	r1, r3
 800845e:	f000 fa9b 	bl	8008998 <osMessagePut>
      break;
 8008462:	e0a4      	b.n	80085ae <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b05      	cmp	r3, #5
 8008468:	f040 80a1 	bne.w	80085ae <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800846c:	2303      	movs	r3, #3
 800846e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2203      	movs	r2, #3
 8008474:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008484:	2200      	movs	r2, #0
 8008486:	4619      	mov	r1, r3
 8008488:	f000 fa86 	bl	8008998 <osMessagePut>
      break;
 800848c:	e08f      	b.n	80085ae <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	795b      	ldrb	r3, [r3, #5]
 8008492:	2201      	movs	r2, #1
 8008494:	9200      	str	r2, [sp, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	2100      	movs	r1, #0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f8aa 	bl	80085f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	220a      	movs	r2, #10
 80084b0:	761a      	strb	r2, [r3, #24]
      break;
 80084b2:	e07f      	b.n	80085b4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	795b      	ldrb	r3, [r3, #5]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f002 feac 	bl	800b218 <USBH_LL_GetURBState>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d113      	bne.n	80084f2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	220d      	movs	r2, #13
 80084d2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2203      	movs	r2, #3
 80084d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084e8:	2200      	movs	r2, #0
 80084ea:	4619      	mov	r1, r3
 80084ec:	f000 fa54 	bl	8008998 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084f0:	e05f      	b.n	80085b2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d111      	bne.n	800851c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2209      	movs	r2, #9
 80084fc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2203      	movs	r2, #3
 8008502:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008512:	2200      	movs	r2, #0
 8008514:	4619      	mov	r1, r3
 8008516:	f000 fa3f 	bl	8008998 <osMessagePut>
      break;
 800851a:	e04a      	b.n	80085b2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b04      	cmp	r3, #4
 8008520:	d147      	bne.n	80085b2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220b      	movs	r2, #11
 8008526:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2203      	movs	r2, #3
 800852c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800853c:	2200      	movs	r2, #0
 800853e:	4619      	mov	r1, r3
 8008540:	f000 fa2a 	bl	8008998 <osMessagePut>
      break;
 8008544:	e035      	b.n	80085b2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7e5b      	ldrb	r3, [r3, #25]
 800854a:	3301      	adds	r3, #1
 800854c:	b2da      	uxtb	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	765a      	strb	r2, [r3, #25]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7e5b      	ldrb	r3, [r3, #25]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d806      	bhi.n	8008568 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008566:	e025      	b.n	80085b4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800856e:	2106      	movs	r1, #6
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	795b      	ldrb	r3, [r3, #5]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f90d 	bl	80087a0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f907 	bl	80087a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008598:	2302      	movs	r3, #2
 800859a:	73fb      	strb	r3, [r7, #15]
      break;
 800859c:	e00a      	b.n	80085b4 <USBH_HandleControl+0x484>

    default:
      break;
 800859e:	bf00      	nop
 80085a0:	e008      	b.n	80085b4 <USBH_HandleControl+0x484>
      break;
 80085a2:	bf00      	nop
 80085a4:	e006      	b.n	80085b4 <USBH_HandleControl+0x484>
      break;
 80085a6:	bf00      	nop
 80085a8:	e004      	b.n	80085b4 <USBH_HandleControl+0x484>
      break;
 80085aa:	bf00      	nop
 80085ac:	e002      	b.n	80085b4 <USBH_HandleControl+0x484>
      break;
 80085ae:	bf00      	nop
 80085b0:	e000      	b.n	80085b4 <USBH_HandleControl+0x484>
      break;
 80085b2:	bf00      	nop
  }

  return status;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af04      	add	r7, sp, #16
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4613      	mov	r3, r2
 80085cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085ce:	79f9      	ldrb	r1, [r7, #7]
 80085d0:	2300      	movs	r3, #0
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	2308      	movs	r3, #8
 80085d6:	9302      	str	r3, [sp, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	2300      	movs	r3, #0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f002 fde6 	bl	800b1b6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af04      	add	r7, sp, #16
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	460b      	mov	r3, r1
 8008604:	80fb      	strh	r3, [r7, #6]
 8008606:	4613      	mov	r3, r2
 8008608:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008618:	7979      	ldrb	r1, [r7, #5]
 800861a:	7e3b      	ldrb	r3, [r7, #24]
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	2301      	movs	r3, #1
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	2300      	movs	r3, #0
 800862c:	2200      	movs	r2, #0
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f002 fdc1 	bl	800b1b6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b088      	sub	sp, #32
 8008642:	af04      	add	r7, sp, #16
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	4611      	mov	r1, r2
 800864a:	461a      	mov	r2, r3
 800864c:	460b      	mov	r3, r1
 800864e:	80fb      	strh	r3, [r7, #6]
 8008650:	4613      	mov	r3, r2
 8008652:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008654:	7979      	ldrb	r1, [r7, #5]
 8008656:	2300      	movs	r3, #0
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	2301      	movs	r3, #1
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2300      	movs	r3, #0
 8008668:	2201      	movs	r2, #1
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f002 fda3 	bl	800b1b6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008670:	2300      	movs	r3, #0

}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b088      	sub	sp, #32
 800867e:	af04      	add	r7, sp, #16
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	4611      	mov	r1, r2
 8008686:	461a      	mov	r2, r3
 8008688:	460b      	mov	r3, r1
 800868a:	80fb      	strh	r3, [r7, #6]
 800868c:	4613      	mov	r3, r2
 800868e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800869e:	7979      	ldrb	r1, [r7, #5]
 80086a0:	7e3b      	ldrb	r3, [r7, #24]
 80086a2:	9303      	str	r3, [sp, #12]
 80086a4:	88fb      	ldrh	r3, [r7, #6]
 80086a6:	9302      	str	r3, [sp, #8]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	2301      	movs	r3, #1
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	2302      	movs	r3, #2
 80086b2:	2200      	movs	r2, #0
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f002 fd7e 	bl	800b1b6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af04      	add	r7, sp, #16
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4611      	mov	r1, r2
 80086d0:	461a      	mov	r2, r3
 80086d2:	460b      	mov	r3, r1
 80086d4:	80fb      	strh	r3, [r7, #6]
 80086d6:	4613      	mov	r3, r2
 80086d8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086da:	7979      	ldrb	r1, [r7, #5]
 80086dc:	2300      	movs	r3, #0
 80086de:	9303      	str	r3, [sp, #12]
 80086e0:	88fb      	ldrh	r3, [r7, #6]
 80086e2:	9302      	str	r3, [sp, #8]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	2301      	movs	r3, #1
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	2302      	movs	r3, #2
 80086ee:	2201      	movs	r2, #1
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f002 fd60 	bl	800b1b6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af04      	add	r7, sp, #16
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	4608      	mov	r0, r1
 800870a:	4611      	mov	r1, r2
 800870c:	461a      	mov	r2, r3
 800870e:	4603      	mov	r3, r0
 8008710:	70fb      	strb	r3, [r7, #3]
 8008712:	460b      	mov	r3, r1
 8008714:	70bb      	strb	r3, [r7, #2]
 8008716:	4613      	mov	r3, r2
 8008718:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800871a:	7878      	ldrb	r0, [r7, #1]
 800871c:	78ba      	ldrb	r2, [r7, #2]
 800871e:	78f9      	ldrb	r1, [r7, #3]
 8008720:	8b3b      	ldrh	r3, [r7, #24]
 8008722:	9302      	str	r3, [sp, #8]
 8008724:	7d3b      	ldrb	r3, [r7, #20]
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	7c3b      	ldrb	r3, [r7, #16]
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	4603      	mov	r3, r0
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 fcf3 	bl	800b11a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	460b      	mov	r3, r1
 8008748:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f002 fd12 	bl	800b178 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f836 	bl	80087dc <USBH_GetFreePipe>
 8008770:	4603      	mov	r3, r0
 8008772:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800877a:	4293      	cmp	r3, r2
 800877c:	d00a      	beq.n	8008794 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	89fb      	ldrh	r3, [r7, #14]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	33e0      	adds	r3, #224	; 0xe0
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008794:	89fb      	ldrh	r3, [r7, #14]
 8008796:	b2db      	uxtb	r3, r3
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	2b0a      	cmp	r3, #10
 80087b0:	d80d      	bhi.n	80087ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	33e0      	adds	r3, #224	; 0xe0
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	33e0      	adds	r3, #224	; 0xe0
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	e00f      	b.n	800880e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	33e0      	adds	r3, #224	; 0xe0
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	b29b      	uxth	r3, r3
 8008806:	e007      	b.n	8008818 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	3301      	adds	r3, #1
 800880c:	73fb      	strb	r3, [r7, #15]
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	2b0a      	cmp	r3, #10
 8008812:	d9ec      	bls.n	80087ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008814:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008836:	2b84      	cmp	r3, #132	; 0x84
 8008838:	d005      	beq.n	8008846 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800883a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4413      	add	r3, r2
 8008842:	3303      	adds	r3, #3
 8008844:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008846:	68fb      	ldr	r3, [r7, #12]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800885a:	f3ef 8305 	mrs	r3, IPSR
 800885e:	607b      	str	r3, [r7, #4]
  return(result);
 8008860:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008862:	2b00      	cmp	r3, #0
 8008864:	bf14      	ite	ne
 8008866:	2301      	movne	r3, #1
 8008868:	2300      	moveq	r3, #0
 800886a:	b2db      	uxtb	r3, r3
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800887c:	f001 f90a 	bl	8009a94 <vTaskStartScheduler>
  
  return osOK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	bd80      	pop	{r7, pc}

08008886 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008888:	b089      	sub	sp, #36	; 0x24
 800888a:	af04      	add	r7, sp, #16
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d020      	beq.n	80088da <osThreadCreate+0x54>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01c      	beq.n	80088da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685c      	ldr	r4, [r3, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681d      	ldr	r5, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691e      	ldr	r6, [r3, #16]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff ffb6 	bl	8008824 <makeFreeRtosPriority>
 80088b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088c2:	9202      	str	r2, [sp, #8]
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	9100      	str	r1, [sp, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	4632      	mov	r2, r6
 80088cc:	4629      	mov	r1, r5
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 ff0e 	bl	80096f0 <xTaskCreateStatic>
 80088d4:	4603      	mov	r3, r0
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e01c      	b.n	8008914 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685c      	ldr	r4, [r3, #4]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088e6:	b29e      	uxth	r6, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff ff98 	bl	8008824 <makeFreeRtosPriority>
 80088f4:	4602      	mov	r2, r0
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	9200      	str	r2, [sp, #0]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	4632      	mov	r2, r6
 8008902:	4629      	mov	r1, r5
 8008904:	4620      	mov	r0, r4
 8008906:	f000 ff50 	bl	80097aa <xTaskCreate>
 800890a:	4603      	mov	r3, r0
 800890c:	2b01      	cmp	r3, #1
 800890e:	d001      	beq.n	8008914 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	e000      	b.n	8008916 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008914:	68fb      	ldr	r3, [r7, #12]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800891e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <osDelay+0x16>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	e000      	b.n	8008936 <osDelay+0x18>
 8008934:	2301      	movs	r3, #1
 8008936:	4618      	mov	r0, r3
 8008938:	f001 f878 	bl	8009a2c <vTaskDelay>
  
  return osOK;
 800893c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008946:	b590      	push	{r4, r7, lr}
 8008948:	b085      	sub	sp, #20
 800894a:	af02      	add	r7, sp, #8
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d011      	beq.n	800897c <osMessageCreate+0x36>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00d      	beq.n	800897c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6859      	ldr	r1, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2400      	movs	r4, #0
 8008972:	9400      	str	r4, [sp, #0]
 8008974:	f000 f9e0 	bl	8008d38 <xQueueGenericCreateStatic>
 8008978:	4603      	mov	r3, r0
 800897a:	e008      	b.n	800898e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	4619      	mov	r1, r3
 8008988:	f000 fa4e 	bl	8008e28 <xQueueGenericCreate>
 800898c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	bd90      	pop	{r4, r7, pc}
	...

08008998 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <osMessagePut+0x1e>
    ticks = 1;
 80089b2:	2301      	movs	r3, #1
 80089b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80089b6:	f7ff ff4d 	bl	8008854 <inHandlerMode>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d018      	beq.n	80089f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80089c0:	f107 0210 	add.w	r2, r7, #16
 80089c4:	f107 0108 	add.w	r1, r7, #8
 80089c8:	2300      	movs	r3, #0
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 fb84 	bl	80090d8 <xQueueGenericSendFromISR>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d001      	beq.n	80089da <osMessagePut+0x42>
      return osErrorOS;
 80089d6:	23ff      	movs	r3, #255	; 0xff
 80089d8:	e018      	b.n	8008a0c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d014      	beq.n	8008a0a <osMessagePut+0x72>
 80089e0:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <osMessagePut+0x7c>)
 80089e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	e00b      	b.n	8008a0a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80089f2:	f107 0108 	add.w	r1, r7, #8
 80089f6:	2300      	movs	r3, #0
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fa6e 	bl	8008edc <xQueueGenericSend>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d001      	beq.n	8008a0a <osMessagePut+0x72>
      return osErrorOS;
 8008a06:	23ff      	movs	r3, #255	; 0xff
 8008a08:	e000      	b.n	8008a0c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	e000ed04 	.word	0xe000ed04

08008a18 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b08b      	sub	sp, #44	; 0x2c
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008a32:	2380      	movs	r3, #128	; 0x80
 8008a34:	617b      	str	r3, [r7, #20]
    return event;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	461c      	mov	r4, r3
 8008a3a:	f107 0314 	add.w	r3, r7, #20
 8008a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a46:	e054      	b.n	8008af2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a56:	d103      	bne.n	8008a60 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a5e:	e009      	b.n	8008a74 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <osMessageGet+0x5c>
      ticks = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008a74:	f7ff feee 	bl	8008854 <inHandlerMode>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01c      	beq.n	8008ab8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008a7e:	f107 0220 	add.w	r2, r7, #32
 8008a82:	f107 0314 	add.w	r3, r7, #20
 8008a86:	3304      	adds	r3, #4
 8008a88:	4619      	mov	r1, r3
 8008a8a:	68b8      	ldr	r0, [r7, #8]
 8008a8c:	f000 fca0 	bl	80093d0 <xQueueReceiveFromISR>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d102      	bne.n	8008a9c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008a96:	2310      	movs	r3, #16
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e001      	b.n	8008aa0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d01d      	beq.n	8008ae2 <osMessageGet+0xca>
 8008aa6:	4b15      	ldr	r3, [pc, #84]	; (8008afc <osMessageGet+0xe4>)
 8008aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	e014      	b.n	8008ae2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	3304      	adds	r3, #4
 8008abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	68b8      	ldr	r0, [r7, #8]
 8008ac4:	f000 fba4 	bl	8009210 <xQueueReceive>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d102      	bne.n	8008ad4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008ace:	2310      	movs	r3, #16
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	e006      	b.n	8008ae2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <osMessageGet+0xc6>
 8008ada:	2300      	movs	r3, #0
 8008adc:	e000      	b.n	8008ae0 <osMessageGet+0xc8>
 8008ade:	2340      	movs	r3, #64	; 0x40
 8008ae0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	461c      	mov	r4, r3
 8008ae6:	f107 0314 	add.w	r3, r7, #20
 8008aea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	372c      	adds	r7, #44	; 0x2c
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd90      	pop	{r4, r7, pc}
 8008afa:	bf00      	nop
 8008afc:	e000ed04 	.word	0xe000ed04

08008b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f103 0208 	add.w	r2, r3, #8
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f04f 32ff 	mov.w	r2, #4294967295
 8008b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f103 0208 	add.w	r2, r3, #8
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f103 0208 	add.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
}
 8008b96:	bf00      	nop
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d103      	bne.n	8008bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e00c      	b.n	8008bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	e002      	b.n	8008bd0 <vListInsert+0x2e>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d2f6      	bcs.n	8008bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	601a      	str	r2, [r3, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6892      	ldr	r2, [r2, #8]
 8008c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6852      	ldr	r2, [r2, #4]
 8008c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d103      	bne.n	8008c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689a      	ldr	r2, [r3, #8]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	1e5a      	subs	r2, r3, #1
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c92:	f001 fd57 	bl	800a744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	441a      	add	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	68f9      	ldr	r1, [r7, #12]
 8008cc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	441a      	add	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	22ff      	movs	r2, #255	; 0xff
 8008cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	22ff      	movs	r2, #255	; 0xff
 8008cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d114      	bne.n	8008d12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01a      	beq.n	8008d26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 f933 	bl	8009f60 <xTaskRemoveFromEventList>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d012      	beq.n	8008d26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d00:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <xQueueGenericReset+0xcc>)
 8008d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	e009      	b.n	8008d26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3310      	adds	r3, #16
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fef2 	bl	8008b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3324      	adds	r3, #36	; 0x24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff feed 	bl	8008b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d26:	f001 fd3d 	bl	800a7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d2a:	2301      	movs	r3, #1
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08e      	sub	sp, #56	; 0x38
 8008d3c:	af02      	add	r7, sp, #8
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10a      	bne.n	8008d7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <xQueueGenericCreateStatic+0x52>
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <xQueueGenericCreateStatic+0x56>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e000      	b.n	8008d90 <xQueueGenericCreateStatic+0x58>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	623b      	str	r3, [r7, #32]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <xQueueGenericCreateStatic+0x7e>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <xQueueGenericCreateStatic+0x82>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <xQueueGenericCreateStatic+0x84>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	61fb      	str	r3, [r7, #28]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dd6:	2348      	movs	r3, #72	; 0x48
 8008dd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b48      	cmp	r3, #72	; 0x48
 8008dde:	d00a      	beq.n	8008df6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	61bb      	str	r3, [r7, #24]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008df6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00d      	beq.n	8008e1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	4613      	mov	r3, r2
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	68b9      	ldr	r1, [r7, #8]
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f83f 	bl	8008e9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3730      	adds	r7, #48	; 0x30
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10a      	bne.n	8008e52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	613b      	str	r3, [r7, #16]
}
 8008e4e:	bf00      	nop
 8008e50:	e7fe      	b.n	8008e50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
 8008e5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	3348      	adds	r3, #72	; 0x48
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 fd91 	bl	800a988 <pvPortMalloc>
 8008e66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d011      	beq.n	8008e92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	3348      	adds	r3, #72	; 0x48
 8008e76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e80:	79fa      	ldrb	r2, [r7, #7]
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	4613      	mov	r3, r2
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f805 	bl	8008e9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e92:	69bb      	ldr	r3, [r7, #24]
	}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008eca:	2101      	movs	r1, #1
 8008ecc:	69b8      	ldr	r0, [r7, #24]
 8008ece:	f7ff fecb 	bl	8008c68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08e      	sub	sp, #56	; 0x38
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008eea:	2300      	movs	r3, #0
 8008eec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10a      	bne.n	8008f0e <xQueueGenericSend+0x32>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d103      	bne.n	8008f1c <xQueueGenericSend+0x40>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <xQueueGenericSend+0x44>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <xQueueGenericSend+0x46>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <xQueueGenericSend+0x60>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSend+0x6e>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <xQueueGenericSend+0x72>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <xQueueGenericSend+0x74>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <xQueueGenericSend+0x8e>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	623b      	str	r3, [r7, #32]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f6a:	f001 f9b7 	bl	800a2dc <xTaskGetSchedulerState>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <xQueueGenericSend+0x9e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <xQueueGenericSend+0xa2>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <xQueueGenericSend+0xa4>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10a      	bne.n	8008f9a <xQueueGenericSend+0xbe>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	61fb      	str	r3, [r7, #28]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f9a:	f001 fbd3 	bl	800a744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d302      	bcc.n	8008fb0 <xQueueGenericSend+0xd4>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d129      	bne.n	8009004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb6:	f000 fa8b 	bl	80094d0 <prvCopyDataToQueue>
 8008fba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d010      	beq.n	8008fe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	3324      	adds	r3, #36	; 0x24
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 ffc9 	bl	8009f60 <xTaskRemoveFromEventList>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d013      	beq.n	8008ffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fd4:	4b3f      	ldr	r3, [pc, #252]	; (80090d4 <xQueueGenericSend+0x1f8>)
 8008fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	e00a      	b.n	8008ffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fec:	4b39      	ldr	r3, [pc, #228]	; (80090d4 <xQueueGenericSend+0x1f8>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ffc:	f001 fbd2 	bl	800a7a4 <vPortExitCritical>
				return pdPASS;
 8009000:	2301      	movs	r3, #1
 8009002:	e063      	b.n	80090cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800900a:	f001 fbcb 	bl	800a7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800900e:	2300      	movs	r3, #0
 8009010:	e05c      	b.n	80090cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009018:	f107 0314 	add.w	r3, r7, #20
 800901c:	4618      	mov	r0, r3
 800901e:	f001 f801 	bl	800a024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009026:	f001 fbbd 	bl	800a7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800902a:	f000 fd93 	bl	8009b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800902e:	f001 fb89 	bl	800a744 <vPortEnterCritical>
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009038:	b25b      	sxtb	r3, r3
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d103      	bne.n	8009048 <xQueueGenericSend+0x16c>
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800904e:	b25b      	sxtb	r3, r3
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d103      	bne.n	800905e <xQueueGenericSend+0x182>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800905e:	f001 fba1 	bl	800a7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009062:	1d3a      	adds	r2, r7, #4
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fff0 	bl	800a050 <xTaskCheckForTimeOut>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d124      	bne.n	80090c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009078:	f000 fb22 	bl	80096c0 <prvIsQueueFull>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	3310      	adds	r3, #16
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f000 ff44 	bl	8009f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009092:	f000 faad 	bl	80095f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009096:	f000 fd6b 	bl	8009b70 <xTaskResumeAll>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	f47f af7c 	bne.w	8008f9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090a2:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <xQueueGenericSend+0x1f8>)
 80090a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	e772      	b.n	8008f9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b6:	f000 fa9b 	bl	80095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ba:	f000 fd59 	bl	8009b70 <xTaskResumeAll>
 80090be:	e76c      	b.n	8008f9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c2:	f000 fa95 	bl	80095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090c6:	f000 fd53 	bl	8009b70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3738      	adds	r7, #56	; 0x38
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	e000ed04 	.word	0xe000ed04

080090d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b090      	sub	sp, #64	; 0x40
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <xQueueGenericSendFromISR+0x3c>
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <xQueueGenericSendFromISR+0x40>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <xQueueGenericSendFromISR+0x42>
 8009118:	2300      	movs	r3, #0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d103      	bne.n	8009142 <xQueueGenericSendFromISR+0x6a>
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <xQueueGenericSendFromISR+0x6e>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <xQueueGenericSendFromISR+0x70>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10a      	bne.n	8009162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	623b      	str	r3, [r7, #32]
}
 800915e:	bf00      	nop
 8009160:	e7fe      	b.n	8009160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009162:	f001 fbd1 	bl	800a908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009166:	f3ef 8211 	mrs	r2, BASEPRI
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	61fa      	str	r2, [r7, #28]
 800917c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800917e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	429a      	cmp	r2, r3
 800918c:	d302      	bcc.n	8009194 <xQueueGenericSendFromISR+0xbc>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d12f      	bne.n	80091f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091aa:	f000 f991 	bl	80094d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b6:	d112      	bne.n	80091de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d016      	beq.n	80091ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	3324      	adds	r3, #36	; 0x24
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 fecb 	bl	8009f60 <xTaskRemoveFromEventList>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00e      	beq.n	80091ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e007      	b.n	80091ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091e2:	3301      	adds	r3, #1
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	b25a      	sxtb	r2, r3
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091ee:	2301      	movs	r3, #1
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80091f2:	e001      	b.n	80091f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009206:	4618      	mov	r0, r3
 8009208:	3740      	adds	r7, #64	; 0x40
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08c      	sub	sp, #48	; 0x30
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800921c:	2300      	movs	r3, #0
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xQueueReceive+0x30>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	623b      	str	r3, [r7, #32]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d103      	bne.n	800924e <xQueueReceive+0x3e>
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <xQueueReceive+0x42>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueReceive+0x44>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueReceive+0x5e>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	61fb      	str	r3, [r7, #28]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800926e:	f001 f835 	bl	800a2dc <xTaskGetSchedulerState>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <xQueueReceive+0x6e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <xQueueReceive+0x72>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueReceive+0x74>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueReceive+0x8e>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61bb      	str	r3, [r7, #24]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800929e:	f001 fa51 	bl	800a744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01f      	beq.n	80092ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092b2:	f000 f977 	bl	80095a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	1e5a      	subs	r2, r3, #1
 80092ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00f      	beq.n	80092e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	3310      	adds	r3, #16
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fe48 	bl	8009f60 <xTaskRemoveFromEventList>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d007      	beq.n	80092e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092d6:	4b3d      	ldr	r3, [pc, #244]	; (80093cc <xQueueReceive+0x1bc>)
 80092d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092e6:	f001 fa5d 	bl	800a7a4 <vPortExitCritical>
				return pdPASS;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e069      	b.n	80093c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092f4:	f001 fa56 	bl	800a7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e062      	b.n	80093c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009302:	f107 0310 	add.w	r3, r7, #16
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fe8c 	bl	800a024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009310:	f001 fa48 	bl	800a7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009314:	f000 fc1e 	bl	8009b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009318:	f001 fa14 	bl	800a744 <vPortEnterCritical>
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009322:	b25b      	sxtb	r3, r3
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d103      	bne.n	8009332 <xQueueReceive+0x122>
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009338:	b25b      	sxtb	r3, r3
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d103      	bne.n	8009348 <xQueueReceive+0x138>
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009348:	f001 fa2c 	bl	800a7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800934c:	1d3a      	adds	r2, r7, #4
 800934e:	f107 0310 	add.w	r3, r7, #16
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fe7b 	bl	800a050 <xTaskCheckForTimeOut>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d123      	bne.n	80093a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009362:	f000 f997 	bl	8009694 <prvIsQueueEmpty>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d017      	beq.n	800939c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	3324      	adds	r3, #36	; 0x24
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fdcf 	bl	8009f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800937a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800937c:	f000 f938 	bl	80095f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009380:	f000 fbf6 	bl	8009b70 <xTaskResumeAll>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d189      	bne.n	800929e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800938a:	4b10      	ldr	r3, [pc, #64]	; (80093cc <xQueueReceive+0x1bc>)
 800938c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	e780      	b.n	800929e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800939c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800939e:	f000 f927 	bl	80095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093a2:	f000 fbe5 	bl	8009b70 <xTaskResumeAll>
 80093a6:	e77a      	b.n	800929e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093aa:	f000 f921 	bl	80095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ae:	f000 fbdf 	bl	8009b70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b4:	f000 f96e 	bl	8009694 <prvIsQueueEmpty>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f43f af6f 	beq.w	800929e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3730      	adds	r7, #48	; 0x30
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08e      	sub	sp, #56	; 0x38
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	623b      	str	r3, [r7, #32]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d103      	bne.n	800940a <xQueueReceiveFromISR+0x3a>
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <xQueueReceiveFromISR+0x3e>
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <xQueueReceiveFromISR+0x40>
 800940e:	2300      	movs	r3, #0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	61fb      	str	r3, [r7, #28]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800942a:	f001 fa6d 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 800942e:	f3ef 8211 	mrs	r2, BASEPRI
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	61ba      	str	r2, [r7, #24]
 8009444:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009446:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	2b00      	cmp	r3, #0
 8009454:	d02f      	beq.n	80094b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800945c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009460:	68b9      	ldr	r1, [r7, #8]
 8009462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009464:	f000 f89e 	bl	80095a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	1e5a      	subs	r2, r3, #1
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009470:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009478:	d112      	bne.n	80094a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d016      	beq.n	80094b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	3310      	adds	r3, #16
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fd6a 	bl	8009f60 <xTaskRemoveFromEventList>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00e      	beq.n	80094b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e007      	b.n	80094b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094a4:	3301      	adds	r3, #1
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	b25a      	sxtb	r2, r3
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80094b0:	2301      	movs	r3, #1
 80094b2:	637b      	str	r3, [r7, #52]	; 0x34
 80094b4:	e001      	b.n	80094ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f383 8811 	msr	BASEPRI, r3
}
 80094c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3738      	adds	r7, #56	; 0x38
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10d      	bne.n	800950a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d14d      	bne.n	8009592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 ff0c 	bl	800a318 <xTaskPriorityDisinherit>
 8009500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	609a      	str	r2, [r3, #8]
 8009508:	e043      	b.n	8009592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d119      	bne.n	8009544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6858      	ldr	r0, [r3, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	461a      	mov	r2, r3
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	f001 ff64 	bl	800b3e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	441a      	add	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	429a      	cmp	r2, r3
 8009538:	d32b      	bcc.n	8009592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	e026      	b.n	8009592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68d8      	ldr	r0, [r3, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954c:	461a      	mov	r2, r3
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	f001 ff4a 	bl	800b3e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	425b      	negs	r3, r3
 800955e:	441a      	add	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d207      	bcs.n	8009580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	425b      	negs	r3, r3
 800957a:	441a      	add	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d105      	bne.n	8009592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	3b01      	subs	r3, #1
 8009590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800959a:	697b      	ldr	r3, [r7, #20]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d018      	beq.n	80095e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	441a      	add	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d303      	bcc.n	80095d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68d9      	ldr	r1, [r3, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	461a      	mov	r2, r3
 80095e2:	6838      	ldr	r0, [r7, #0]
 80095e4:	f001 ff00 	bl	800b3e8 <memcpy>
	}
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095f8:	f001 f8a4 	bl	800a744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009604:	e011      	b.n	800962a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d012      	beq.n	8009634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3324      	adds	r3, #36	; 0x24
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fca4 	bl	8009f60 <xTaskRemoveFromEventList>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800961e:	f000 fd79 	bl	800a114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	3b01      	subs	r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800962a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	dce9      	bgt.n	8009606 <prvUnlockQueue+0x16>
 8009632:	e000      	b.n	8009636 <prvUnlockQueue+0x46>
					break;
 8009634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	22ff      	movs	r2, #255	; 0xff
 800963a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800963e:	f001 f8b1 	bl	800a7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009642:	f001 f87f 	bl	800a744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800964c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800964e:	e011      	b.n	8009674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d012      	beq.n	800967e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3310      	adds	r3, #16
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fc7f 	bl	8009f60 <xTaskRemoveFromEventList>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009668:	f000 fd54 	bl	800a114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	3b01      	subs	r3, #1
 8009670:	b2db      	uxtb	r3, r3
 8009672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dce9      	bgt.n	8009650 <prvUnlockQueue+0x60>
 800967c:	e000      	b.n	8009680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800967e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	22ff      	movs	r2, #255	; 0xff
 8009684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009688:	f001 f88c 	bl	800a7a4 <vPortExitCritical>
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800969c:	f001 f852 	bl	800a744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e001      	b.n	80096b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f001 f877 	bl	800a7a4 <vPortExitCritical>

	return xReturn;
 80096b6:	68fb      	ldr	r3, [r7, #12]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096c8:	f001 f83c 	bl	800a744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d102      	bne.n	80096de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e001      	b.n	80096e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096e2:	f001 f85f 	bl	800a7a4 <vPortExitCritical>

	return xReturn;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08e      	sub	sp, #56	; 0x38
 80096f4:	af04      	add	r7, sp, #16
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	623b      	str	r3, [r7, #32]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10a      	bne.n	8009736 <xTaskCreateStatic+0x46>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	61fb      	str	r3, [r7, #28]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009736:	2358      	movs	r3, #88	; 0x58
 8009738:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b58      	cmp	r3, #88	; 0x58
 800973e:	d00a      	beq.n	8009756 <xTaskCreateStatic+0x66>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	61bb      	str	r3, [r7, #24]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009756:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01e      	beq.n	800979c <xTaskCreateStatic+0xac>
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01b      	beq.n	800979c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800976c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	2202      	movs	r2, #2
 8009772:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009776:	2300      	movs	r3, #0
 8009778:	9303      	str	r3, [sp, #12]
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	9302      	str	r3, [sp, #8]
 800977e:	f107 0314 	add.w	r3, r7, #20
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f850 	bl	8009834 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009796:	f000 f8df 	bl	8009958 <prvAddNewTaskToReadyList>
 800979a:	e001      	b.n	80097a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097a0:	697b      	ldr	r3, [r7, #20]
	}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3728      	adds	r7, #40	; 0x28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b08c      	sub	sp, #48	; 0x30
 80097ae:	af04      	add	r7, sp, #16
 80097b0:	60f8      	str	r0, [r7, #12]
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	603b      	str	r3, [r7, #0]
 80097b6:	4613      	mov	r3, r2
 80097b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4618      	mov	r0, r3
 80097c0:	f001 f8e2 	bl	800a988 <pvPortMalloc>
 80097c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00e      	beq.n	80097ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097cc:	2058      	movs	r0, #88	; 0x58
 80097ce:	f001 f8db 	bl	800a988 <pvPortMalloc>
 80097d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	631a      	str	r2, [r3, #48]	; 0x30
 80097e0:	e005      	b.n	80097ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097e2:	6978      	ldr	r0, [r7, #20]
 80097e4:	f001 f9a0 	bl	800ab28 <vPortFree>
 80097e8:	e001      	b.n	80097ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d017      	beq.n	8009824 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097fc:	88fa      	ldrh	r2, [r7, #6]
 80097fe:	2300      	movs	r3, #0
 8009800:	9303      	str	r3, [sp, #12]
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	9302      	str	r3, [sp, #8]
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f80e 	bl	8009834 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009818:	69f8      	ldr	r0, [r7, #28]
 800981a:	f000 f89d 	bl	8009958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800981e:	2301      	movs	r3, #1
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	e002      	b.n	800982a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009824:	f04f 33ff 	mov.w	r3, #4294967295
 8009828:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800982a:	69bb      	ldr	r3, [r7, #24]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	3720      	adds	r7, #32
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	461a      	mov	r2, r3
 800984c:	21a5      	movs	r1, #165	; 0xa5
 800984e:	f001 fdd9 	bl	800b404 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800985c:	3b01      	subs	r3, #1
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	f023 0307 	bic.w	r3, r3, #7
 800986a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	617b      	str	r3, [r7, #20]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d01f      	beq.n	80098d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	e012      	b.n	80098be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	7819      	ldrb	r1, [r3, #0]
 80098a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	4413      	add	r3, r2
 80098a6:	3334      	adds	r3, #52	; 0x34
 80098a8:	460a      	mov	r2, r1
 80098aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	4413      	add	r3, r2
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d006      	beq.n	80098c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	3301      	adds	r3, #1
 80098bc:	61fb      	str	r3, [r7, #28]
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2b0f      	cmp	r3, #15
 80098c2:	d9e9      	bls.n	8009898 <prvInitialiseNewTask+0x64>
 80098c4:	e000      	b.n	80098c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80098c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d0:	e003      	b.n	80098da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	2b06      	cmp	r3, #6
 80098de:	d901      	bls.n	80098e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098e0:	2306      	movs	r3, #6
 80098e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	2200      	movs	r2, #0
 80098f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	3304      	adds	r3, #4
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff f920 	bl	8008b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	3318      	adds	r3, #24
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff f91b 	bl	8008b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800990e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	f1c3 0207 	rsb	r2, r3, #7
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	2200      	movs	r2, #0
 8009924:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	2200      	movs	r2, #0
 800992a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	69b8      	ldr	r0, [r7, #24]
 800993a:	f000 fdd9 	bl	800a4f0 <pxPortInitialiseStack>
 800993e:	4602      	mov	r2, r0
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800994e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009950:	bf00      	nop
 8009952:	3720      	adds	r7, #32
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009960:	f000 fef0 	bl	800a744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009964:	4b2a      	ldr	r3, [pc, #168]	; (8009a10 <prvAddNewTaskToReadyList+0xb8>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	4a29      	ldr	r2, [pc, #164]	; (8009a10 <prvAddNewTaskToReadyList+0xb8>)
 800996c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800996e:	4b29      	ldr	r3, [pc, #164]	; (8009a14 <prvAddNewTaskToReadyList+0xbc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009976:	4a27      	ldr	r2, [pc, #156]	; (8009a14 <prvAddNewTaskToReadyList+0xbc>)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800997c:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <prvAddNewTaskToReadyList+0xb8>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d110      	bne.n	80099a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009984:	f000 fbec 	bl	800a160 <prvInitialiseTaskLists>
 8009988:	e00d      	b.n	80099a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800998a:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <prvAddNewTaskToReadyList+0xc0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d109      	bne.n	80099a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009992:	4b20      	ldr	r3, [pc, #128]	; (8009a14 <prvAddNewTaskToReadyList+0xbc>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	429a      	cmp	r2, r3
 800999e:	d802      	bhi.n	80099a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099a0:	4a1c      	ldr	r2, [pc, #112]	; (8009a14 <prvAddNewTaskToReadyList+0xbc>)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099a6:	4b1d      	ldr	r3, [pc, #116]	; (8009a1c <prvAddNewTaskToReadyList+0xc4>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3301      	adds	r3, #1
 80099ac:	4a1b      	ldr	r2, [pc, #108]	; (8009a1c <prvAddNewTaskToReadyList+0xc4>)
 80099ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	2201      	movs	r2, #1
 80099b6:	409a      	lsls	r2, r3
 80099b8:	4b19      	ldr	r3, [pc, #100]	; (8009a20 <prvAddNewTaskToReadyList+0xc8>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4313      	orrs	r3, r2
 80099be:	4a18      	ldr	r2, [pc, #96]	; (8009a20 <prvAddNewTaskToReadyList+0xc8>)
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4a15      	ldr	r2, [pc, #84]	; (8009a24 <prvAddNewTaskToReadyList+0xcc>)
 80099d0:	441a      	add	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3304      	adds	r3, #4
 80099d6:	4619      	mov	r1, r3
 80099d8:	4610      	mov	r0, r2
 80099da:	f7ff f8be 	bl	8008b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099de:	f000 fee1 	bl	800a7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099e2:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <prvAddNewTaskToReadyList+0xc0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00e      	beq.n	8009a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099ea:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <prvAddNewTaskToReadyList+0xbc>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d207      	bcs.n	8009a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099f8:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <prvAddNewTaskToReadyList+0xd0>)
 80099fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20000410 	.word	0x20000410
 8009a14:	20000310 	.word	0x20000310
 8009a18:	2000041c 	.word	0x2000041c
 8009a1c:	2000042c 	.word	0x2000042c
 8009a20:	20000418 	.word	0x20000418
 8009a24:	20000314 	.word	0x20000314
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d017      	beq.n	8009a6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a3e:	4b13      	ldr	r3, [pc, #76]	; (8009a8c <vTaskDelay+0x60>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <vTaskDelay+0x30>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	60bb      	str	r3, [r7, #8]
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a5c:	f000 f87a 	bl	8009b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a60:	2100      	movs	r1, #0
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fcde 	bl	800a424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a68:	f000 f882 	bl	8009b70 <xTaskResumeAll>
 8009a6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d107      	bne.n	8009a84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009a74:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <vTaskDelay+0x64>)
 8009a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000438 	.word	0x20000438
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	; 0x28
 8009a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009aa2:	463a      	mov	r2, r7
 8009aa4:	1d39      	adds	r1, r7, #4
 8009aa6:	f107 0308 	add.w	r3, r7, #8
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f6 fd36 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	9202      	str	r2, [sp, #8]
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	2300      	movs	r3, #0
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	460a      	mov	r2, r1
 8009ac2:	491e      	ldr	r1, [pc, #120]	; (8009b3c <vTaskStartScheduler+0xa8>)
 8009ac4:	481e      	ldr	r0, [pc, #120]	; (8009b40 <vTaskStartScheduler+0xac>)
 8009ac6:	f7ff fe13 	bl	80096f0 <xTaskCreateStatic>
 8009aca:	4603      	mov	r3, r0
 8009acc:	4a1d      	ldr	r2, [pc, #116]	; (8009b44 <vTaskStartScheduler+0xb0>)
 8009ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ad0:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <vTaskStartScheduler+0xb0>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	e001      	b.n	8009ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d116      	bne.n	8009b16 <vTaskStartScheduler+0x82>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	613b      	str	r3, [r7, #16]
}
 8009afa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009afc:	4b12      	ldr	r3, [pc, #72]	; (8009b48 <vTaskStartScheduler+0xb4>)
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b04:	4b11      	ldr	r3, [pc, #68]	; (8009b4c <vTaskStartScheduler+0xb8>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b0a:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <vTaskStartScheduler+0xbc>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b10:	f000 fd76 	bl	800a600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b14:	e00e      	b.n	8009b34 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1c:	d10a      	bne.n	8009b34 <vTaskStartScheduler+0xa0>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	60fb      	str	r3, [r7, #12]
}
 8009b30:	bf00      	nop
 8009b32:	e7fe      	b.n	8009b32 <vTaskStartScheduler+0x9e>
}
 8009b34:	bf00      	nop
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	0800b620 	.word	0x0800b620
 8009b40:	0800a12d 	.word	0x0800a12d
 8009b44:	20000434 	.word	0x20000434
 8009b48:	20000430 	.word	0x20000430
 8009b4c:	2000041c 	.word	0x2000041c
 8009b50:	20000414 	.word	0x20000414

08009b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b58:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <vTaskSuspendAll+0x18>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	4a03      	ldr	r2, [pc, #12]	; (8009b6c <vTaskSuspendAll+0x18>)
 8009b60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b62:	bf00      	nop
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	20000438 	.word	0x20000438

08009b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b7e:	4b41      	ldr	r3, [pc, #260]	; (8009c84 <xTaskResumeAll+0x114>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10a      	bne.n	8009b9c <xTaskResumeAll+0x2c>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	603b      	str	r3, [r7, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	e7fe      	b.n	8009b9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b9c:	f000 fdd2 	bl	800a744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ba0:	4b38      	ldr	r3, [pc, #224]	; (8009c84 <xTaskResumeAll+0x114>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	4a37      	ldr	r2, [pc, #220]	; (8009c84 <xTaskResumeAll+0x114>)
 8009ba8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009baa:	4b36      	ldr	r3, [pc, #216]	; (8009c84 <xTaskResumeAll+0x114>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d161      	bne.n	8009c76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bb2:	4b35      	ldr	r3, [pc, #212]	; (8009c88 <xTaskResumeAll+0x118>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d05d      	beq.n	8009c76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bba:	e02e      	b.n	8009c1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bbc:	4b33      	ldr	r3, [pc, #204]	; (8009c8c <xTaskResumeAll+0x11c>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3318      	adds	r3, #24
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff f823 	bl	8008c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff f81e 	bl	8008c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	2201      	movs	r2, #1
 8009bde:	409a      	lsls	r2, r3
 8009be0:	4b2b      	ldr	r3, [pc, #172]	; (8009c90 <xTaskResumeAll+0x120>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	4a2a      	ldr	r2, [pc, #168]	; (8009c90 <xTaskResumeAll+0x120>)
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4a27      	ldr	r2, [pc, #156]	; (8009c94 <xTaskResumeAll+0x124>)
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f7fe ffaa 	bl	8008b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0a:	4b23      	ldr	r3, [pc, #140]	; (8009c98 <xTaskResumeAll+0x128>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d302      	bcc.n	8009c1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009c14:	4b21      	ldr	r3, [pc, #132]	; (8009c9c <xTaskResumeAll+0x12c>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c1a:	4b1c      	ldr	r3, [pc, #112]	; (8009c8c <xTaskResumeAll+0x11c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1cc      	bne.n	8009bbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c28:	f000 fb38 	bl	800a29c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <xTaskResumeAll+0x130>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d010      	beq.n	8009c5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c38:	f000 f836 	bl	8009ca8 <xTaskIncrementTick>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009c42:	4b16      	ldr	r3, [pc, #88]	; (8009c9c <xTaskResumeAll+0x12c>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1f1      	bne.n	8009c38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009c54:	4b12      	ldr	r3, [pc, #72]	; (8009ca0 <xTaskResumeAll+0x130>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c5a:	4b10      	ldr	r3, [pc, #64]	; (8009c9c <xTaskResumeAll+0x12c>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c62:	2301      	movs	r3, #1
 8009c64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c66:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <xTaskResumeAll+0x134>)
 8009c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c76:	f000 fd95 	bl	800a7a4 <vPortExitCritical>

	return xAlreadyYielded;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20000438 	.word	0x20000438
 8009c88:	20000410 	.word	0x20000410
 8009c8c:	200003d0 	.word	0x200003d0
 8009c90:	20000418 	.word	0x20000418
 8009c94:	20000314 	.word	0x20000314
 8009c98:	20000310 	.word	0x20000310
 8009c9c:	20000424 	.word	0x20000424
 8009ca0:	20000420 	.word	0x20000420
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cb2:	4b4e      	ldr	r3, [pc, #312]	; (8009dec <xTaskIncrementTick+0x144>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f040 808e 	bne.w	8009dd8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cbc:	4b4c      	ldr	r3, [pc, #304]	; (8009df0 <xTaskIncrementTick+0x148>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cc4:	4a4a      	ldr	r2, [pc, #296]	; (8009df0 <xTaskIncrementTick+0x148>)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d120      	bne.n	8009d12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009cd0:	4b48      	ldr	r3, [pc, #288]	; (8009df4 <xTaskIncrementTick+0x14c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	603b      	str	r3, [r7, #0]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <xTaskIncrementTick+0x46>
 8009cf0:	4b40      	ldr	r3, [pc, #256]	; (8009df4 <xTaskIncrementTick+0x14c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	4b40      	ldr	r3, [pc, #256]	; (8009df8 <xTaskIncrementTick+0x150>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a3e      	ldr	r2, [pc, #248]	; (8009df4 <xTaskIncrementTick+0x14c>)
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	4a3e      	ldr	r2, [pc, #248]	; (8009df8 <xTaskIncrementTick+0x150>)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	4b3d      	ldr	r3, [pc, #244]	; (8009dfc <xTaskIncrementTick+0x154>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	4a3c      	ldr	r2, [pc, #240]	; (8009dfc <xTaskIncrementTick+0x154>)
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	f000 fac5 	bl	800a29c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d12:	4b3b      	ldr	r3, [pc, #236]	; (8009e00 <xTaskIncrementTick+0x158>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d348      	bcc.n	8009dae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d1c:	4b35      	ldr	r3, [pc, #212]	; (8009df4 <xTaskIncrementTick+0x14c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d104      	bne.n	8009d30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d26:	4b36      	ldr	r3, [pc, #216]	; (8009e00 <xTaskIncrementTick+0x158>)
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	601a      	str	r2, [r3, #0]
					break;
 8009d2e:	e03e      	b.n	8009dae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d30:	4b30      	ldr	r3, [pc, #192]	; (8009df4 <xTaskIncrementTick+0x14c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d203      	bcs.n	8009d50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d48:	4a2d      	ldr	r2, [pc, #180]	; (8009e00 <xTaskIncrementTick+0x158>)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d4e:	e02e      	b.n	8009dae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	3304      	adds	r3, #4
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe ff5d 	bl	8008c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d004      	beq.n	8009d6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	3318      	adds	r3, #24
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe ff54 	bl	8008c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d70:	2201      	movs	r2, #1
 8009d72:	409a      	lsls	r2, r3
 8009d74:	4b23      	ldr	r3, [pc, #140]	; (8009e04 <xTaskIncrementTick+0x15c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	4a22      	ldr	r2, [pc, #136]	; (8009e04 <xTaskIncrementTick+0x15c>)
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4a1f      	ldr	r2, [pc, #124]	; (8009e08 <xTaskIncrementTick+0x160>)
 8009d8c:	441a      	add	r2, r3
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	3304      	adds	r3, #4
 8009d92:	4619      	mov	r1, r3
 8009d94:	4610      	mov	r0, r2
 8009d96:	f7fe fee0 	bl	8008b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9e:	4b1b      	ldr	r3, [pc, #108]	; (8009e0c <xTaskIncrementTick+0x164>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d3b9      	bcc.n	8009d1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009da8:	2301      	movs	r3, #1
 8009daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dac:	e7b6      	b.n	8009d1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dae:	4b17      	ldr	r3, [pc, #92]	; (8009e0c <xTaskIncrementTick+0x164>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db4:	4914      	ldr	r1, [pc, #80]	; (8009e08 <xTaskIncrementTick+0x160>)
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d901      	bls.n	8009dca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009dca:	4b11      	ldr	r3, [pc, #68]	; (8009e10 <xTaskIncrementTick+0x168>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e004      	b.n	8009de2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <xTaskIncrementTick+0x16c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	4a0d      	ldr	r2, [pc, #52]	; (8009e14 <xTaskIncrementTick+0x16c>)
 8009de0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009de2:	697b      	ldr	r3, [r7, #20]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000438 	.word	0x20000438
 8009df0:	20000414 	.word	0x20000414
 8009df4:	200003c8 	.word	0x200003c8
 8009df8:	200003cc 	.word	0x200003cc
 8009dfc:	20000428 	.word	0x20000428
 8009e00:	20000430 	.word	0x20000430
 8009e04:	20000418 	.word	0x20000418
 8009e08:	20000314 	.word	0x20000314
 8009e0c:	20000310 	.word	0x20000310
 8009e10:	20000424 	.word	0x20000424
 8009e14:	20000420 	.word	0x20000420

08009e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e1e:	4b39      	ldr	r3, [pc, #228]	; (8009f04 <vTaskSwitchContext+0xec>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e26:	4b38      	ldr	r3, [pc, #224]	; (8009f08 <vTaskSwitchContext+0xf0>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e2c:	e066      	b.n	8009efc <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8009e2e:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <vTaskSwitchContext+0xf0>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009e34:	4b35      	ldr	r3, [pc, #212]	; (8009f0c <vTaskSwitchContext+0xf4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3a:	61fb      	str	r3, [r7, #28]
 8009e3c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d111      	bne.n	8009e70 <vTaskSwitchContext+0x58>
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d10b      	bne.n	8009e70 <vTaskSwitchContext+0x58>
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d105      	bne.n	8009e70 <vTaskSwitchContext+0x58>
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	330c      	adds	r3, #12
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d008      	beq.n	8009e82 <vTaskSwitchContext+0x6a>
 8009e70:	4b26      	ldr	r3, [pc, #152]	; (8009f0c <vTaskSwitchContext+0xf4>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b25      	ldr	r3, [pc, #148]	; (8009f0c <vTaskSwitchContext+0xf4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3334      	adds	r3, #52	; 0x34
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	f7f6 fb3a 	bl	80004f6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e82:	4b23      	ldr	r3, [pc, #140]	; (8009f10 <vTaskSwitchContext+0xf8>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	fab3 f383 	clz	r3, r3
 8009e8e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	f1c3 031f 	rsb	r3, r3, #31
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	491e      	ldr	r1, [pc, #120]	; (8009f14 <vTaskSwitchContext+0xfc>)
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	440b      	add	r3, r1
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10a      	bne.n	8009ec2 <vTaskSwitchContext+0xaa>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	607b      	str	r3, [r7, #4]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <vTaskSwitchContext+0xa8>
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4a11      	ldr	r2, [pc, #68]	; (8009f14 <vTaskSwitchContext+0xfc>)
 8009ece:	4413      	add	r3, r2
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	605a      	str	r2, [r3, #4]
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d104      	bne.n	8009ef2 <vTaskSwitchContext+0xda>
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	4a04      	ldr	r2, [pc, #16]	; (8009f0c <vTaskSwitchContext+0xf4>)
 8009efa:	6013      	str	r3, [r2, #0]
}
 8009efc:	bf00      	nop
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	20000438 	.word	0x20000438
 8009f08:	20000424 	.word	0x20000424
 8009f0c:	20000310 	.word	0x20000310
 8009f10:	20000418 	.word	0x20000418
 8009f14:	20000314 	.word	0x20000314

08009f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	60fb      	str	r3, [r7, #12]
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f3e:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <vTaskPlaceOnEventList+0x44>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3318      	adds	r3, #24
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7fe fe2b 	bl	8008ba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	6838      	ldr	r0, [r7, #0]
 8009f50:	f000 fa68 	bl	800a424 <prvAddCurrentTaskToDelayedList>
}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20000310 	.word	0x20000310

08009f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60fb      	str	r3, [r7, #12]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	3318      	adds	r3, #24
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fe fe3f 	bl	8008c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f96:	4b1d      	ldr	r3, [pc, #116]	; (800a00c <xTaskRemoveFromEventList+0xac>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d11c      	bne.n	8009fd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe fe36 	bl	8008c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fac:	2201      	movs	r2, #1
 8009fae:	409a      	lsls	r2, r3
 8009fb0:	4b17      	ldr	r3, [pc, #92]	; (800a010 <xTaskRemoveFromEventList+0xb0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	4a16      	ldr	r2, [pc, #88]	; (800a010 <xTaskRemoveFromEventList+0xb0>)
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4a13      	ldr	r2, [pc, #76]	; (800a014 <xTaskRemoveFromEventList+0xb4>)
 8009fc8:	441a      	add	r2, r3
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3304      	adds	r3, #4
 8009fce:	4619      	mov	r1, r3
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	f7fe fdc2 	bl	8008b5a <vListInsertEnd>
 8009fd6:	e005      	b.n	8009fe4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	3318      	adds	r3, #24
 8009fdc:	4619      	mov	r1, r3
 8009fde:	480e      	ldr	r0, [pc, #56]	; (800a018 <xTaskRemoveFromEventList+0xb8>)
 8009fe0:	f7fe fdbb 	bl	8008b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <xTaskRemoveFromEventList+0xbc>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d905      	bls.n	8009ffe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <xTaskRemoveFromEventList+0xc0>)
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	e001      	b.n	800a002 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009ffe:	2300      	movs	r3, #0
 800a000:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a002:	697b      	ldr	r3, [r7, #20]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20000438 	.word	0x20000438
 800a010:	20000418 	.word	0x20000418
 800a014:	20000314 	.word	0x20000314
 800a018:	200003d0 	.word	0x200003d0
 800a01c:	20000310 	.word	0x20000310
 800a020:	20000424 	.word	0x20000424

0800a024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a02c:	4b06      	ldr	r3, [pc, #24]	; (800a048 <vTaskInternalSetTimeOutState+0x24>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <vTaskInternalSetTimeOutState+0x28>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	605a      	str	r2, [r3, #4]
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	20000428 	.word	0x20000428
 800a04c:	20000414 	.word	0x20000414

0800a050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	613b      	str	r3, [r7, #16]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	60fb      	str	r3, [r7, #12]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a092:	f000 fb57 	bl	800a744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a096:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <xTaskCheckForTimeOut+0xbc>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	d102      	bne.n	800a0b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]
 800a0b4:	e023      	b.n	800a0fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	4b15      	ldr	r3, [pc, #84]	; (800a110 <xTaskCheckForTimeOut+0xc0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d007      	beq.n	800a0d2 <xTaskCheckForTimeOut+0x82>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d302      	bcc.n	800a0d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	e015      	b.n	800a0fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d20b      	bcs.n	800a0f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	1ad2      	subs	r2, r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff ff9b 	bl	800a024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61fb      	str	r3, [r7, #28]
 800a0f2:	e004      	b.n	800a0fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0fe:	f000 fb51 	bl	800a7a4 <vPortExitCritical>

	return xReturn;
 800a102:	69fb      	ldr	r3, [r7, #28]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3720      	adds	r7, #32
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000414 	.word	0x20000414
 800a110:	20000428 	.word	0x20000428

0800a114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a114:	b480      	push	{r7}
 800a116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a118:	4b03      	ldr	r3, [pc, #12]	; (800a128 <vTaskMissedYield+0x14>)
 800a11a:	2201      	movs	r2, #1
 800a11c:	601a      	str	r2, [r3, #0]
}
 800a11e:	bf00      	nop
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	20000424 	.word	0x20000424

0800a12c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a134:	f000 f854 	bl	800a1e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a138:	4b07      	ldr	r3, [pc, #28]	; (800a158 <prvIdleTask+0x2c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d907      	bls.n	800a150 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <prvIdleTask+0x30>)
 800a142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a150:	f7f6 f9ca 	bl	80004e8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a154:	e7ee      	b.n	800a134 <prvIdleTask+0x8>
 800a156:	bf00      	nop
 800a158:	20000314 	.word	0x20000314
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a166:	2300      	movs	r3, #0
 800a168:	607b      	str	r3, [r7, #4]
 800a16a:	e00c      	b.n	800a186 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4a12      	ldr	r2, [pc, #72]	; (800a1c0 <prvInitialiseTaskLists+0x60>)
 800a178:	4413      	add	r3, r2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fcc0 	bl	8008b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	3301      	adds	r3, #1
 800a184:	607b      	str	r3, [r7, #4]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b06      	cmp	r3, #6
 800a18a:	d9ef      	bls.n	800a16c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a18c:	480d      	ldr	r0, [pc, #52]	; (800a1c4 <prvInitialiseTaskLists+0x64>)
 800a18e:	f7fe fcb7 	bl	8008b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a192:	480d      	ldr	r0, [pc, #52]	; (800a1c8 <prvInitialiseTaskLists+0x68>)
 800a194:	f7fe fcb4 	bl	8008b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a198:	480c      	ldr	r0, [pc, #48]	; (800a1cc <prvInitialiseTaskLists+0x6c>)
 800a19a:	f7fe fcb1 	bl	8008b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a19e:	480c      	ldr	r0, [pc, #48]	; (800a1d0 <prvInitialiseTaskLists+0x70>)
 800a1a0:	f7fe fcae 	bl	8008b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1a4:	480b      	ldr	r0, [pc, #44]	; (800a1d4 <prvInitialiseTaskLists+0x74>)
 800a1a6:	f7fe fcab 	bl	8008b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1aa:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <prvInitialiseTaskLists+0x78>)
 800a1ac:	4a05      	ldr	r2, [pc, #20]	; (800a1c4 <prvInitialiseTaskLists+0x64>)
 800a1ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1b0:	4b0a      	ldr	r3, [pc, #40]	; (800a1dc <prvInitialiseTaskLists+0x7c>)
 800a1b2:	4a05      	ldr	r2, [pc, #20]	; (800a1c8 <prvInitialiseTaskLists+0x68>)
 800a1b4:	601a      	str	r2, [r3, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000314 	.word	0x20000314
 800a1c4:	200003a0 	.word	0x200003a0
 800a1c8:	200003b4 	.word	0x200003b4
 800a1cc:	200003d0 	.word	0x200003d0
 800a1d0:	200003e4 	.word	0x200003e4
 800a1d4:	200003fc 	.word	0x200003fc
 800a1d8:	200003c8 	.word	0x200003c8
 800a1dc:	200003cc 	.word	0x200003cc

0800a1e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1e6:	e019      	b.n	800a21c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1e8:	f000 faac 	bl	800a744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ec:	4b10      	ldr	r3, [pc, #64]	; (800a230 <prvCheckTasksWaitingTermination+0x50>)
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe fd0b 	bl	8008c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1fe:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <prvCheckTasksWaitingTermination+0x54>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3b01      	subs	r3, #1
 800a204:	4a0b      	ldr	r2, [pc, #44]	; (800a234 <prvCheckTasksWaitingTermination+0x54>)
 800a206:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a208:	4b0b      	ldr	r3, [pc, #44]	; (800a238 <prvCheckTasksWaitingTermination+0x58>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	4a0a      	ldr	r2, [pc, #40]	; (800a238 <prvCheckTasksWaitingTermination+0x58>)
 800a210:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a212:	f000 fac7 	bl	800a7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f810 	bl	800a23c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a21c:	4b06      	ldr	r3, [pc, #24]	; (800a238 <prvCheckTasksWaitingTermination+0x58>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e1      	bne.n	800a1e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	200003e4 	.word	0x200003e4
 800a234:	20000410 	.word	0x20000410
 800a238:	200003f8 	.word	0x200003f8

0800a23c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d108      	bne.n	800a260 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fc68 	bl	800ab28 <vPortFree>
				vPortFree( pxTCB );
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 fc65 	bl	800ab28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a25e:	e018      	b.n	800a292 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a266:	2b01      	cmp	r3, #1
 800a268:	d103      	bne.n	800a272 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fc5c 	bl	800ab28 <vPortFree>
	}
 800a270:	e00f      	b.n	800a292 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d00a      	beq.n	800a292 <prvDeleteTCB+0x56>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	60fb      	str	r3, [r7, #12]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <prvDeleteTCB+0x54>
	}
 800a292:	bf00      	nop
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <prvResetNextTaskUnblockTime+0x38>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d104      	bne.n	800a2b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2b4:	e008      	b.n	800a2c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <prvResetNextTaskUnblockTime+0x38>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4a04      	ldr	r2, [pc, #16]	; (800a2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800a2c6:	6013      	str	r3, [r2, #0]
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	200003c8 	.word	0x200003c8
 800a2d8:	20000430 	.word	0x20000430

0800a2dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2e2:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <xTaskGetSchedulerState+0x34>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d102      	bne.n	800a2f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	607b      	str	r3, [r7, #4]
 800a2ee:	e008      	b.n	800a302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f0:	4b08      	ldr	r3, [pc, #32]	; (800a314 <xTaskGetSchedulerState+0x38>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	607b      	str	r3, [r7, #4]
 800a2fc:	e001      	b.n	800a302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2fe:	2300      	movs	r3, #0
 800a300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a302:	687b      	ldr	r3, [r7, #4]
	}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	2000041c 	.word	0x2000041c
 800a314:	20000438 	.word	0x20000438

0800a318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d06e      	beq.n	800a40c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a32e:	4b3a      	ldr	r3, [pc, #232]	; (800a418 <xTaskPriorityDisinherit+0x100>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	429a      	cmp	r2, r3
 800a336:	d00a      	beq.n	800a34e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	60fb      	str	r3, [r7, #12]
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60bb      	str	r3, [r7, #8]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a370:	1e5a      	subs	r2, r3, #1
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37e:	429a      	cmp	r2, r3
 800a380:	d044      	beq.n	800a40c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a386:	2b00      	cmp	r3, #0
 800a388:	d140      	bne.n	800a40c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fc40 	bl	8008c14 <uxListRemove>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d115      	bne.n	800a3c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39e:	491f      	ldr	r1, [pc, #124]	; (800a41c <xTaskPriorityDisinherit+0x104>)
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <xTaskPriorityDisinherit+0xae>
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ba:	43da      	mvns	r2, r3
 800a3bc:	4b18      	ldr	r3, [pc, #96]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	4a17      	ldr	r2, [pc, #92]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	f1c3 0207 	rsb	r2, r3, #7
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	2201      	movs	r2, #1
 800a3e0:	409a      	lsls	r2, r3
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	4a0d      	ldr	r2, [pc, #52]	; (800a420 <xTaskPriorityDisinherit+0x108>)
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4a08      	ldr	r2, [pc, #32]	; (800a41c <xTaskPriorityDisinherit+0x104>)
 800a3fa:	441a      	add	r2, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f7fe fba9 	bl	8008b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a408:	2301      	movs	r3, #1
 800a40a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a40c:	697b      	ldr	r3, [r7, #20]
	}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000310 	.word	0x20000310
 800a41c:	20000314 	.word	0x20000314
 800a420:	20000418 	.word	0x20000418

0800a424 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a42e:	4b29      	ldr	r3, [pc, #164]	; (800a4d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a434:	4b28      	ldr	r3, [pc, #160]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3304      	adds	r3, #4
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe fbea 	bl	8008c14 <uxListRemove>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10b      	bne.n	800a45e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a446:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	2201      	movs	r2, #1
 800a44e:	fa02 f303 	lsl.w	r3, r2, r3
 800a452:	43da      	mvns	r2, r3
 800a454:	4b21      	ldr	r3, [pc, #132]	; (800a4dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4013      	ands	r3, r2
 800a45a:	4a20      	ldr	r2, [pc, #128]	; (800a4dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a45c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a464:	d10a      	bne.n	800a47c <prvAddCurrentTaskToDelayedList+0x58>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d007      	beq.n	800a47c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a46c:	4b1a      	ldr	r3, [pc, #104]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	481a      	ldr	r0, [pc, #104]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a476:	f7fe fb70 	bl	8008b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a47a:	e026      	b.n	800a4ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4413      	add	r3, r2
 800a482:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a484:	4b14      	ldr	r3, [pc, #80]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	429a      	cmp	r2, r3
 800a492:	d209      	bcs.n	800a4a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a494:	4b13      	ldr	r3, [pc, #76]	; (800a4e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	4b0f      	ldr	r3, [pc, #60]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f7fe fb7e 	bl	8008ba2 <vListInsert>
}
 800a4a6:	e010      	b.n	800a4ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4a8:	4b0f      	ldr	r3, [pc, #60]	; (800a4e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f7fe fb74 	bl	8008ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4ba:	4b0c      	ldr	r3, [pc, #48]	; (800a4ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d202      	bcs.n	800a4ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a4c4:	4a09      	ldr	r2, [pc, #36]	; (800a4ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6013      	str	r3, [r2, #0]
}
 800a4ca:	bf00      	nop
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000414 	.word	0x20000414
 800a4d8:	20000310 	.word	0x20000310
 800a4dc:	20000418 	.word	0x20000418
 800a4e0:	200003fc 	.word	0x200003fc
 800a4e4:	200003cc 	.word	0x200003cc
 800a4e8:	200003c8 	.word	0x200003c8
 800a4ec:	20000430 	.word	0x20000430

0800a4f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3b04      	subs	r3, #4
 800a500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3b04      	subs	r3, #4
 800a50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	f023 0201 	bic.w	r2, r3, #1
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3b04      	subs	r3, #4
 800a51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a520:	4a0c      	ldr	r2, [pc, #48]	; (800a554 <pxPortInitialiseStack+0x64>)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3b14      	subs	r3, #20
 800a52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3b04      	subs	r3, #4
 800a536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f06f 0202 	mvn.w	r2, #2
 800a53e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3b20      	subs	r3, #32
 800a544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a546:	68fb      	ldr	r3, [r7, #12]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	0800a559 	.word	0x0800a559

0800a558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <prvTaskExitError+0x54>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56a:	d00a      	beq.n	800a582 <prvTaskExitError+0x2a>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60fb      	str	r3, [r7, #12]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <prvTaskExitError+0x28>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60bb      	str	r3, [r7, #8]
}
 800a594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a596:	bf00      	nop
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0fc      	beq.n	800a598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	2000002c 	.word	0x2000002c

0800a5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5b0:	4b07      	ldr	r3, [pc, #28]	; (800a5d0 <pxCurrentTCBConst2>)
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	6808      	ldr	r0, [r1, #0]
 800a5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	f380 8809 	msr	PSP, r0
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f04f 0000 	mov.w	r0, #0
 800a5c6:	f380 8811 	msr	BASEPRI, r0
 800a5ca:	4770      	bx	lr
 800a5cc:	f3af 8000 	nop.w

0800a5d0 <pxCurrentTCBConst2>:
 800a5d0:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop

0800a5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5d8:	4808      	ldr	r0, [pc, #32]	; (800a5fc <prvPortStartFirstTask+0x24>)
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	6800      	ldr	r0, [r0, #0]
 800a5de:	f380 8808 	msr	MSP, r0
 800a5e2:	f04f 0000 	mov.w	r0, #0
 800a5e6:	f380 8814 	msr	CONTROL, r0
 800a5ea:	b662      	cpsie	i
 800a5ec:	b661      	cpsie	f
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	df00      	svc	0
 800a5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5fa:	bf00      	nop
 800a5fc:	e000ed08 	.word	0xe000ed08

0800a600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a606:	4b46      	ldr	r3, [pc, #280]	; (800a720 <xPortStartScheduler+0x120>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a46      	ldr	r2, [pc, #280]	; (800a724 <xPortStartScheduler+0x124>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d10a      	bne.n	800a626 <xPortStartScheduler+0x26>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	613b      	str	r3, [r7, #16]
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a626:	4b3e      	ldr	r3, [pc, #248]	; (800a720 <xPortStartScheduler+0x120>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a3f      	ldr	r2, [pc, #252]	; (800a728 <xPortStartScheduler+0x128>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d10a      	bne.n	800a646 <xPortStartScheduler+0x46>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	60fb      	str	r3, [r7, #12]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a646:	4b39      	ldr	r3, [pc, #228]	; (800a72c <xPortStartScheduler+0x12c>)
 800a648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	22ff      	movs	r2, #255	; 0xff
 800a656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	4b31      	ldr	r3, [pc, #196]	; (800a730 <xPortStartScheduler+0x130>)
 800a66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a66e:	4b31      	ldr	r3, [pc, #196]	; (800a734 <xPortStartScheduler+0x134>)
 800a670:	2207      	movs	r2, #7
 800a672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a674:	e009      	b.n	800a68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a676:	4b2f      	ldr	r3, [pc, #188]	; (800a734 <xPortStartScheduler+0x134>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	4a2d      	ldr	r2, [pc, #180]	; (800a734 <xPortStartScheduler+0x134>)
 800a67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	b2db      	uxtb	r3, r3
 800a688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a68a:	78fb      	ldrb	r3, [r7, #3]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d0ef      	beq.n	800a676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a696:	4b27      	ldr	r3, [pc, #156]	; (800a734 <xPortStartScheduler+0x134>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f1c3 0307 	rsb	r3, r3, #7
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d00a      	beq.n	800a6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	60bb      	str	r3, [r7, #8]
}
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	; (800a734 <xPortStartScheduler+0x134>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	021b      	lsls	r3, r3, #8
 800a6be:	4a1d      	ldr	r2, [pc, #116]	; (800a734 <xPortStartScheduler+0x134>)
 800a6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6c2:	4b1c      	ldr	r3, [pc, #112]	; (800a734 <xPortStartScheduler+0x134>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6ca:	4a1a      	ldr	r2, [pc, #104]	; (800a734 <xPortStartScheduler+0x134>)
 800a6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	b2da      	uxtb	r2, r3
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6d6:	4b18      	ldr	r3, [pc, #96]	; (800a738 <xPortStartScheduler+0x138>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a17      	ldr	r2, [pc, #92]	; (800a738 <xPortStartScheduler+0x138>)
 800a6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6e2:	4b15      	ldr	r3, [pc, #84]	; (800a738 <xPortStartScheduler+0x138>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a14      	ldr	r2, [pc, #80]	; (800a738 <xPortStartScheduler+0x138>)
 800a6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6ee:	f000 f8dd 	bl	800a8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6f2:	4b12      	ldr	r3, [pc, #72]	; (800a73c <xPortStartScheduler+0x13c>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6f8:	f000 f8fc 	bl	800a8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6fc:	4b10      	ldr	r3, [pc, #64]	; (800a740 <xPortStartScheduler+0x140>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a0f      	ldr	r2, [pc, #60]	; (800a740 <xPortStartScheduler+0x140>)
 800a702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a708:	f7ff ff66 	bl	800a5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a70c:	f7ff fb84 	bl	8009e18 <vTaskSwitchContext>
	prvTaskExitError();
 800a710:	f7ff ff22 	bl	800a558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	e000ed00 	.word	0xe000ed00
 800a724:	410fc271 	.word	0x410fc271
 800a728:	410fc270 	.word	0x410fc270
 800a72c:	e000e400 	.word	0xe000e400
 800a730:	2000043c 	.word	0x2000043c
 800a734:	20000440 	.word	0x20000440
 800a738:	e000ed20 	.word	0xe000ed20
 800a73c:	2000002c 	.word	0x2000002c
 800a740:	e000ef34 	.word	0xe000ef34

0800a744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	607b      	str	r3, [r7, #4]
}
 800a75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a75e:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <vPortEnterCritical+0x58>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	4a0d      	ldr	r2, [pc, #52]	; (800a79c <vPortEnterCritical+0x58>)
 800a766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a768:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <vPortEnterCritical+0x58>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d10f      	bne.n	800a790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a770:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <vPortEnterCritical+0x5c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <vPortEnterCritical+0x4c>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	603b      	str	r3, [r7, #0]
}
 800a78c:	bf00      	nop
 800a78e:	e7fe      	b.n	800a78e <vPortEnterCritical+0x4a>
	}
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	2000002c 	.word	0x2000002c
 800a7a0:	e000ed04 	.word	0xe000ed04

0800a7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <vPortExitCritical+0x24>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	607b      	str	r3, [r7, #4]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7c8:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	4a09      	ldr	r2, [pc, #36]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7d2:	4b08      	ldr	r3, [pc, #32]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <vPortExitCritical+0x42>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	f383 8811 	msr	BASEPRI, r3
}
 800a7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	2000002c 	.word	0x2000002c
	...

0800a800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a800:	f3ef 8009 	mrs	r0, PSP
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	4b15      	ldr	r3, [pc, #84]	; (800a860 <pxCurrentTCBConst>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	f01e 0f10 	tst.w	lr, #16
 800a810:	bf08      	it	eq
 800a812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	6010      	str	r0, [r2, #0]
 800a81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a824:	f380 8811 	msr	BASEPRI, r0
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f7ff faf2 	bl	8009e18 <vTaskSwitchContext>
 800a834:	f04f 0000 	mov.w	r0, #0
 800a838:	f380 8811 	msr	BASEPRI, r0
 800a83c:	bc09      	pop	{r0, r3}
 800a83e:	6819      	ldr	r1, [r3, #0]
 800a840:	6808      	ldr	r0, [r1, #0]
 800a842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a846:	f01e 0f10 	tst.w	lr, #16
 800a84a:	bf08      	it	eq
 800a84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a850:	f380 8809 	msr	PSP, r0
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w

0800a860 <pxCurrentTCBConst>:
 800a860:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop

0800a868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	607b      	str	r3, [r7, #4]
}
 800a880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a882:	f7ff fa11 	bl	8009ca8 <xTaskIncrementTick>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a88c:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <SysTick_Handler+0x40>)
 800a88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f383 8811 	msr	BASEPRI, r3
}
 800a89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	; (800a8e4 <vPortSetupTimerInterrupt+0x38>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <vPortSetupTimerInterrupt+0x3c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <vPortSetupTimerInterrupt+0x40>)
 800a8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c6:	099b      	lsrs	r3, r3, #6
 800a8c8:	4a09      	ldr	r2, [pc, #36]	; (800a8f0 <vPortSetupTimerInterrupt+0x44>)
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	e000e010 	.word	0xe000e010
 800a8e4:	e000e018 	.word	0xe000e018
 800a8e8:	20000000 	.word	0x20000000
 800a8ec:	10624dd3 	.word	0x10624dd3
 800a8f0:	e000e014 	.word	0xe000e014

0800a8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a904 <vPortEnableVFP+0x10>
 800a8f8:	6801      	ldr	r1, [r0, #0]
 800a8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a8fe:	6001      	str	r1, [r0, #0]
 800a900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a902:	bf00      	nop
 800a904:	e000ed88 	.word	0xe000ed88

0800a908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a90e:	f3ef 8305 	mrs	r3, IPSR
 800a912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b0f      	cmp	r3, #15
 800a918:	d914      	bls.n	800a944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a91a:	4a17      	ldr	r2, [pc, #92]	; (800a978 <vPortValidateInterruptPriority+0x70>)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4413      	add	r3, r2
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a924:	4b15      	ldr	r3, [pc, #84]	; (800a97c <vPortValidateInterruptPriority+0x74>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	7afa      	ldrb	r2, [r7, #11]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d20a      	bcs.n	800a944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a944:	4b0e      	ldr	r3, [pc, #56]	; (800a980 <vPortValidateInterruptPriority+0x78>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a94c:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <vPortValidateInterruptPriority+0x7c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d90a      	bls.n	800a96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	603b      	str	r3, [r7, #0]
}
 800a966:	bf00      	nop
 800a968:	e7fe      	b.n	800a968 <vPortValidateInterruptPriority+0x60>
	}
 800a96a:	bf00      	nop
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	e000e3f0 	.word	0xe000e3f0
 800a97c:	2000043c 	.word	0x2000043c
 800a980:	e000ed0c 	.word	0xe000ed0c
 800a984:	20000440 	.word	0x20000440

0800a988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08a      	sub	sp, #40	; 0x28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a990:	2300      	movs	r3, #0
 800a992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a994:	f7ff f8de 	bl	8009b54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a998:	4b5d      	ldr	r3, [pc, #372]	; (800ab10 <pvPortMalloc+0x188>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9a0:	f000 f924 	bl	800abec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9a4:	4b5b      	ldr	r3, [pc, #364]	; (800ab14 <pvPortMalloc+0x18c>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f040 8093 	bne.w	800aad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01d      	beq.n	800a9f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f003 0307 	and.w	r3, r3, #7
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d014      	beq.n	800a9f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f023 0307 	bic.w	r3, r3, #7
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	617b      	str	r3, [r7, #20]
}
 800a9f0:	bf00      	nop
 800a9f2:	e7fe      	b.n	800a9f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d06e      	beq.n	800aad8 <pvPortMalloc+0x150>
 800a9fa:	4b47      	ldr	r3, [pc, #284]	; (800ab18 <pvPortMalloc+0x190>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d869      	bhi.n	800aad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa04:	4b45      	ldr	r3, [pc, #276]	; (800ab1c <pvPortMalloc+0x194>)
 800aa06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa08:	4b44      	ldr	r3, [pc, #272]	; (800ab1c <pvPortMalloc+0x194>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa0e:	e004      	b.n	800aa1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d903      	bls.n	800aa2c <pvPortMalloc+0xa4>
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1f1      	bne.n	800aa10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa2c:	4b38      	ldr	r3, [pc, #224]	; (800ab10 <pvPortMalloc+0x188>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d050      	beq.n	800aad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	4413      	add	r3, r2
 800aa3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	2308      	movs	r3, #8
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d91f      	bls.n	800aa98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <pvPortMalloc+0xf8>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	613b      	str	r3, [r7, #16]
}
 800aa7c:	bf00      	nop
 800aa7e:	e7fe      	b.n	800aa7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	1ad2      	subs	r2, r2, r3
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa92:	69b8      	ldr	r0, [r7, #24]
 800aa94:	f000 f90c 	bl	800acb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa98:	4b1f      	ldr	r3, [pc, #124]	; (800ab18 <pvPortMalloc+0x190>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	4a1d      	ldr	r2, [pc, #116]	; (800ab18 <pvPortMalloc+0x190>)
 800aaa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aaa6:	4b1c      	ldr	r3, [pc, #112]	; (800ab18 <pvPortMalloc+0x190>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4b1d      	ldr	r3, [pc, #116]	; (800ab20 <pvPortMalloc+0x198>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d203      	bcs.n	800aaba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aab2:	4b19      	ldr	r3, [pc, #100]	; (800ab18 <pvPortMalloc+0x190>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a1a      	ldr	r2, [pc, #104]	; (800ab20 <pvPortMalloc+0x198>)
 800aab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	4b15      	ldr	r3, [pc, #84]	; (800ab14 <pvPortMalloc+0x18c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	431a      	orrs	r2, r3
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aace:	4b15      	ldr	r3, [pc, #84]	; (800ab24 <pvPortMalloc+0x19c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	4a13      	ldr	r2, [pc, #76]	; (800ab24 <pvPortMalloc+0x19c>)
 800aad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aad8:	f7ff f84a 	bl	8009b70 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800aae2:	f7f5 fd13 	bl	800050c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	f003 0307 	and.w	r3, r3, #7
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00a      	beq.n	800ab06 <pvPortMalloc+0x17e>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60fb      	str	r3, [r7, #12]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <pvPortMalloc+0x17c>
	return pvReturn;
 800ab06:	69fb      	ldr	r3, [r7, #28]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3728      	adds	r7, #40	; 0x28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	2000844c 	.word	0x2000844c
 800ab14:	20008460 	.word	0x20008460
 800ab18:	20008450 	.word	0x20008450
 800ab1c:	20008444 	.word	0x20008444
 800ab20:	20008454 	.word	0x20008454
 800ab24:	20008458 	.word	0x20008458

0800ab28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d04d      	beq.n	800abd6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab3a:	2308      	movs	r3, #8
 800ab3c:	425b      	negs	r3, r3
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4413      	add	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	4b24      	ldr	r3, [pc, #144]	; (800abe0 <vPortFree+0xb8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4013      	ands	r3, r2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <vPortFree+0x44>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	60fb      	str	r3, [r7, #12]
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00a      	beq.n	800ab8a <vPortFree+0x62>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	60bb      	str	r3, [r7, #8]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	4b14      	ldr	r3, [pc, #80]	; (800abe0 <vPortFree+0xb8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4013      	ands	r3, r2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01e      	beq.n	800abd6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d11a      	bne.n	800abd6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	4b0e      	ldr	r3, [pc, #56]	; (800abe0 <vPortFree+0xb8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	43db      	mvns	r3, r3
 800abaa:	401a      	ands	r2, r3
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abb0:	f7fe ffd0 	bl	8009b54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <vPortFree+0xbc>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4413      	add	r3, r2
 800abbe:	4a09      	ldr	r2, [pc, #36]	; (800abe4 <vPortFree+0xbc>)
 800abc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abc2:	6938      	ldr	r0, [r7, #16]
 800abc4:	f000 f874 	bl	800acb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <vPortFree+0xc0>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3301      	adds	r3, #1
 800abce:	4a06      	ldr	r2, [pc, #24]	; (800abe8 <vPortFree+0xc0>)
 800abd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abd2:	f7fe ffcd 	bl	8009b70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abd6:	bf00      	nop
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20008460 	.word	0x20008460
 800abe4:	20008450 	.word	0x20008450
 800abe8:	2000845c 	.word	0x2000845c

0800abec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abf8:	4b27      	ldr	r3, [pc, #156]	; (800ac98 <prvHeapInit+0xac>)
 800abfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00c      	beq.n	800ac20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3307      	adds	r3, #7
 800ac0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0307 	bic.w	r3, r3, #7
 800ac12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	4a1f      	ldr	r2, [pc, #124]	; (800ac98 <prvHeapInit+0xac>)
 800ac1c:	4413      	add	r3, r2
 800ac1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac24:	4a1d      	ldr	r2, [pc, #116]	; (800ac9c <prvHeapInit+0xb0>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac2a:	4b1c      	ldr	r3, [pc, #112]	; (800ac9c <prvHeapInit+0xb0>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	4413      	add	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac38:	2208      	movs	r2, #8
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	1a9b      	subs	r3, r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 0307 	bic.w	r3, r3, #7
 800ac46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4a15      	ldr	r2, [pc, #84]	; (800aca0 <prvHeapInit+0xb4>)
 800ac4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac4e:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <prvHeapInit+0xb4>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2200      	movs	r2, #0
 800ac54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac56:	4b12      	ldr	r3, [pc, #72]	; (800aca0 <prvHeapInit+0xb4>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	1ad2      	subs	r2, r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac6c:	4b0c      	ldr	r3, [pc, #48]	; (800aca0 <prvHeapInit+0xb4>)
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	4a0a      	ldr	r2, [pc, #40]	; (800aca4 <prvHeapInit+0xb8>)
 800ac7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4a09      	ldr	r2, [pc, #36]	; (800aca8 <prvHeapInit+0xbc>)
 800ac82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac84:	4b09      	ldr	r3, [pc, #36]	; (800acac <prvHeapInit+0xc0>)
 800ac86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac8a:	601a      	str	r2, [r3, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	20000444 	.word	0x20000444
 800ac9c:	20008444 	.word	0x20008444
 800aca0:	2000844c 	.word	0x2000844c
 800aca4:	20008454 	.word	0x20008454
 800aca8:	20008450 	.word	0x20008450
 800acac:	20008460 	.word	0x20008460

0800acb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acb8:	4b28      	ldr	r3, [pc, #160]	; (800ad5c <prvInsertBlockIntoFreeList+0xac>)
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e002      	b.n	800acc4 <prvInsertBlockIntoFreeList+0x14>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	429a      	cmp	r2, r3
 800accc:	d8f7      	bhi.n	800acbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	4413      	add	r3, r2
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d108      	bne.n	800acf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	685a      	ldr	r2, [r3, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	441a      	add	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	441a      	add	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d118      	bne.n	800ad38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <prvInsertBlockIntoFreeList+0xb0>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d00d      	beq.n	800ad2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	441a      	add	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e008      	b.n	800ad40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <prvInsertBlockIntoFreeList+0xb0>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	e003      	b.n	800ad40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d002      	beq.n	800ad4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad4e:	bf00      	nop
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	20008444 	.word	0x20008444
 800ad60:	2000844c 	.word	0x2000844c

0800ad64 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	490e      	ldr	r1, [pc, #56]	; (800ada4 <MX_USB_HOST_Init+0x40>)
 800ad6c:	480e      	ldr	r0, [pc, #56]	; (800ada8 <MX_USB_HOST_Init+0x44>)
 800ad6e:	f7fb ffcd 	bl	8006d0c <USBH_Init>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ad78:	f7f5 ffe4 	bl	8000d44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ad7c:	490b      	ldr	r1, [pc, #44]	; (800adac <MX_USB_HOST_Init+0x48>)
 800ad7e:	480a      	ldr	r0, [pc, #40]	; (800ada8 <MX_USB_HOST_Init+0x44>)
 800ad80:	f7fc f87a 	bl	8006e78 <USBH_RegisterClass>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ad8a:	f7f5 ffdb 	bl	8000d44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ad8e:	4806      	ldr	r0, [pc, #24]	; (800ada8 <MX_USB_HOST_Init+0x44>)
 800ad90:	f7fc f8fe 	bl	8006f90 <USBH_Start>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ad9a:	f7f5 ffd3 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ad9e:	bf00      	nop
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	0800adb1 	.word	0x0800adb1
 800ada8:	20008674 	.word	0x20008674
 800adac:	2000000c 	.word	0x2000000c

0800adb0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	d819      	bhi.n	800adf8 <USBH_UserProcess+0x48>
 800adc4:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <USBH_UserProcess+0x1c>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800adf9 	.word	0x0800adf9
 800add0:	0800ade9 	.word	0x0800ade9
 800add4:	0800adf9 	.word	0x0800adf9
 800add8:	0800adf1 	.word	0x0800adf1
 800addc:	0800ade1 	.word	0x0800ade1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ade0:	4b09      	ldr	r3, [pc, #36]	; (800ae08 <USBH_UserProcess+0x58>)
 800ade2:	2203      	movs	r2, #3
 800ade4:	701a      	strb	r2, [r3, #0]
  break;
 800ade6:	e008      	b.n	800adfa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ade8:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <USBH_UserProcess+0x58>)
 800adea:	2202      	movs	r2, #2
 800adec:	701a      	strb	r2, [r3, #0]
  break;
 800adee:	e004      	b.n	800adfa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800adf0:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <USBH_UserProcess+0x58>)
 800adf2:	2201      	movs	r2, #1
 800adf4:	701a      	strb	r2, [r3, #0]
  break;
 800adf6:	e000      	b.n	800adfa <USBH_UserProcess+0x4a>

  default:
  break;
 800adf8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	20008464 	.word	0x20008464

0800ae0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae14:	f107 0314 	add.w	r3, r7, #20
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	605a      	str	r2, [r3, #4]
 800ae1e:	609a      	str	r2, [r3, #8]
 800ae20:	60da      	str	r2, [r3, #12]
 800ae22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a24      	ldr	r2, [pc, #144]	; (800aebc <HAL_HCD_MspInit+0xb0>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d141      	bne.n	800aeb2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae2e:	2300      	movs	r3, #0
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	4b23      	ldr	r3, [pc, #140]	; (800aec0 <HAL_HCD_MspInit+0xb4>)
 800ae34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae36:	4a22      	ldr	r2, [pc, #136]	; (800aec0 <HAL_HCD_MspInit+0xb4>)
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae3e:	4b20      	ldr	r3, [pc, #128]	; (800aec0 <HAL_HCD_MspInit+0xb4>)
 800ae40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ae4a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ae4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae50:	2302      	movs	r3, #2
 800ae52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ae5c:	230c      	movs	r3, #12
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae60:	f107 0314 	add.w	r3, r7, #20
 800ae64:	4619      	mov	r1, r3
 800ae66:	4817      	ldr	r0, [pc, #92]	; (800aec4 <HAL_HCD_MspInit+0xb8>)
 800ae68:	f7f6 fdf0 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ae6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae72:	2300      	movs	r3, #0
 800ae74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ae7a:	f107 0314 	add.w	r3, r7, #20
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4810      	ldr	r0, [pc, #64]	; (800aec4 <HAL_HCD_MspInit+0xb8>)
 800ae82:	f7f6 fde3 	bl	8001a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ae86:	2300      	movs	r3, #0
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <HAL_HCD_MspInit+0xb4>)
 800ae8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8e:	4a0c      	ldr	r2, [pc, #48]	; (800aec0 <HAL_HCD_MspInit+0xb4>)
 800ae90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae94:	6313      	str	r3, [r2, #48]	; 0x30
 800ae96:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <HAL_HCD_MspInit+0xb4>)
 800ae98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800aea2:	2200      	movs	r2, #0
 800aea4:	2105      	movs	r1, #5
 800aea6:	204d      	movs	r0, #77	; 0x4d
 800aea8:	f7f6 fb9e 	bl	80015e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800aeac:	204d      	movs	r0, #77	; 0x4d
 800aeae:	f7f6 fbb7 	bl	8001620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800aeb2:	bf00      	nop
 800aeb4:	3728      	adds	r7, #40	; 0x28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	40040000 	.word	0x40040000
 800aec0:	40023800 	.word	0x40023800
 800aec4:	40020400 	.word	0x40020400

0800aec8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fc fd07 	bl	80078ea <USBH_LL_IncTimer>
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fc fd4b 	bl	800798e <USBH_LL_Connect>
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fc fd60 	bl	80079d4 <USBH_LL_Disconnect>
}
 800af14:	bf00      	nop
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	460b      	mov	r3, r1
 800af26:	70fb      	strb	r3, [r7, #3]
 800af28:	4613      	mov	r3, r2
 800af2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af32:	4618      	mov	r0, r3
 800af34:	f7fc fd95 	bl	8007a62 <USBH_LL_NotifyURBChange>
#endif
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fc fcf5 	bl	800793e <USBH_LL_PortEnabled>
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fc fd01 	bl	8007972 <USBH_LL_PortDisabled>
}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af86:	2b00      	cmp	r3, #0
 800af88:	d132      	bne.n	800aff0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800af8a:	4a1c      	ldr	r2, [pc, #112]	; (800affc <USBH_LL_Init+0x84>)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a19      	ldr	r2, [pc, #100]	; (800affc <USBH_LL_Init+0x84>)
 800af96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800af9a:	4b18      	ldr	r3, [pc, #96]	; (800affc <USBH_LL_Init+0x84>)
 800af9c:	4a18      	ldr	r2, [pc, #96]	; (800b000 <USBH_LL_Init+0x88>)
 800af9e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800afa0:	4b16      	ldr	r3, [pc, #88]	; (800affc <USBH_LL_Init+0x84>)
 800afa2:	220c      	movs	r2, #12
 800afa4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800afa6:	4b15      	ldr	r3, [pc, #84]	; (800affc <USBH_LL_Init+0x84>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800afac:	4b13      	ldr	r3, [pc, #76]	; (800affc <USBH_LL_Init+0x84>)
 800afae:	2200      	movs	r2, #0
 800afb0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800afb2:	4b12      	ldr	r3, [pc, #72]	; (800affc <USBH_LL_Init+0x84>)
 800afb4:	2202      	movs	r2, #2
 800afb6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800afb8:	4b10      	ldr	r3, [pc, #64]	; (800affc <USBH_LL_Init+0x84>)
 800afba:	2200      	movs	r2, #0
 800afbc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <USBH_LL_Init+0x84>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800afc4:	4b0d      	ldr	r3, [pc, #52]	; (800affc <USBH_LL_Init+0x84>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800afca:	4b0c      	ldr	r3, [pc, #48]	; (800affc <USBH_LL_Init+0x84>)
 800afcc:	2200      	movs	r2, #0
 800afce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800afd0:	480a      	ldr	r0, [pc, #40]	; (800affc <USBH_LL_Init+0x84>)
 800afd2:	f7f6 ff00 	bl	8001dd6 <HAL_HCD_Init>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800afdc:	f7f5 feb2 	bl	8000d44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800afe0:	4806      	ldr	r0, [pc, #24]	; (800affc <USBH_LL_Init+0x84>)
 800afe2:	f7f7 fae4 	bl	80025ae <HAL_HCD_GetCurrentFrame>
 800afe6:	4603      	mov	r3, r0
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7fc fc6e 	bl	80078cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20008a58 	.word	0x20008a58
 800b000:	40040000 	.word	0x40040000

0800b004 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b010:	2300      	movs	r3, #0
 800b012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7f7 fa51 	bl	80024c2 <HAL_HCD_Start>
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b024:	7bfb      	ldrb	r3, [r7, #15]
 800b026:	4618      	mov	r0, r3
 800b028:	f000 f95c 	bl	800b2e4 <USBH_Get_USB_Status>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b030:	7bbb      	ldrb	r3, [r7, #14]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b050:	4618      	mov	r0, r3
 800b052:	f7f7 fa59 	bl	8002508 <HAL_HCD_Stop>
 800b056:	4603      	mov	r3, r0
 800b058:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 f941 	bl	800b2e4 <USBH_Get_USB_Status>
 800b062:	4603      	mov	r3, r0
 800b064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b066:	7bbb      	ldrb	r3, [r7, #14]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b078:	2301      	movs	r3, #1
 800b07a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b082:	4618      	mov	r0, r3
 800b084:	f7f7 faa1 	bl	80025ca <HAL_HCD_GetCurrentSpeed>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d00c      	beq.n	800b0a8 <USBH_LL_GetSpeed+0x38>
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d80d      	bhi.n	800b0ae <USBH_LL_GetSpeed+0x3e>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <USBH_LL_GetSpeed+0x2c>
 800b096:	2b01      	cmp	r3, #1
 800b098:	d003      	beq.n	800b0a2 <USBH_LL_GetSpeed+0x32>
 800b09a:	e008      	b.n	800b0ae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73fb      	strb	r3, [r7, #15]
    break;
 800b0a0:	e008      	b.n	800b0b4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b0a6:	e005      	b.n	800b0b4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ac:	e002      	b.n	800b0b4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b2:	bf00      	nop
  }
  return  speed;
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7f7 fa34 	bl	8002542 <HAL_HCD_ResetPort>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 f8ff 	bl	800b2e4 <USBH_Get_USB_Status>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b106:	78fa      	ldrb	r2, [r7, #3]
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f7 fa3b 	bl	8002586 <HAL_HCD_HC_GetXferCount>
 800b110:	4603      	mov	r3, r0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b11a:	b590      	push	{r4, r7, lr}
 800b11c:	b089      	sub	sp, #36	; 0x24
 800b11e:	af04      	add	r7, sp, #16
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	4608      	mov	r0, r1
 800b124:	4611      	mov	r1, r2
 800b126:	461a      	mov	r2, r3
 800b128:	4603      	mov	r3, r0
 800b12a:	70fb      	strb	r3, [r7, #3]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70bb      	strb	r3, [r7, #2]
 800b130:	4613      	mov	r3, r2
 800b132:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b142:	787c      	ldrb	r4, [r7, #1]
 800b144:	78ba      	ldrb	r2, [r7, #2]
 800b146:	78f9      	ldrb	r1, [r7, #3]
 800b148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b14a:	9302      	str	r3, [sp, #8]
 800b14c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	4623      	mov	r3, r4
 800b15a:	f7f6 fe9e 	bl	8001e9a <HAL_HCD_HC_Init>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f8bd 	bl	800b2e4 <USBH_Get_USB_Status>
 800b16a:	4603      	mov	r3, r0
 800b16c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	bd90      	pop	{r4, r7, pc}

0800b178 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f7f6 ff0e 	bl	8001fb8 <HAL_HCD_HC_Halt>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f89e 	bl	800b2e4 <USBH_Get_USB_Status>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b1b6:	b590      	push	{r4, r7, lr}
 800b1b8:	b089      	sub	sp, #36	; 0x24
 800b1ba:	af04      	add	r7, sp, #16
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	4608      	mov	r0, r1
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	70fb      	strb	r3, [r7, #3]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70bb      	strb	r3, [r7, #2]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b1de:	787c      	ldrb	r4, [r7, #1]
 800b1e0:	78ba      	ldrb	r2, [r7, #2]
 800b1e2:	78f9      	ldrb	r1, [r7, #3]
 800b1e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b1e8:	9303      	str	r3, [sp, #12]
 800b1ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1ec:	9302      	str	r3, [sp, #8]
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	f7f6 ff01 	bl	8002000 <HAL_HCD_HC_SubmitRequest>
 800b1fe:	4603      	mov	r3, r0
 800b200:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	4618      	mov	r0, r3
 800b206:	f000 f86d 	bl	800b2e4 <USBH_Get_USB_Status>
 800b20a:	4603      	mov	r3, r0
 800b20c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bd90      	pop	{r4, r7, pc}

0800b218 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b22a:	78fa      	ldrb	r2, [r7, #3]
 800b22c:	4611      	mov	r1, r2
 800b22e:	4618      	mov	r0, r3
 800b230:	f7f7 f995 	bl	800255e <HAL_HCD_HC_GetURBState>
 800b234:	4603      	mov	r3, r0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	460b      	mov	r3, r1
 800b248:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b250:	2b00      	cmp	r3, #0
 800b252:	d103      	bne.n	800b25c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	4618      	mov	r0, r3
 800b258:	f000 f870 	bl	800b33c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b25c:	20c8      	movs	r0, #200	; 0xc8
 800b25e:	f7f6 f8e7 	bl	8001430 <HAL_Delay>
  return USBH_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
 800b278:	4613      	mov	r3, r2
 800b27a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b282:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b284:	78fb      	ldrb	r3, [r7, #3]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	212c      	movs	r1, #44	; 0x2c
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	4413      	add	r3, r2
 800b290:	333b      	adds	r3, #59	; 0x3b
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	212c      	movs	r1, #44	; 0x2c
 800b29e:	fb01 f303 	mul.w	r3, r1, r3
 800b2a2:	4413      	add	r3, r2
 800b2a4:	3354      	adds	r3, #84	; 0x54
 800b2a6:	78ba      	ldrb	r2, [r7, #2]
 800b2a8:	701a      	strb	r2, [r3, #0]
 800b2aa:	e008      	b.n	800b2be <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	212c      	movs	r1, #44	; 0x2c
 800b2b2:	fb01 f303 	mul.w	r3, r1, r3
 800b2b6:	4413      	add	r3, r2
 800b2b8:	3355      	adds	r3, #85	; 0x55
 800b2ba:	78ba      	ldrb	r2, [r7, #2]
 800b2bc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7f6 f8ab 	bl	8001430 <HAL_Delay>
}
 800b2da:	bf00      	nop
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d817      	bhi.n	800b328 <USBH_Get_USB_Status+0x44>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <USBH_Get_USB_Status+0x1c>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b311 	.word	0x0800b311
 800b304:	0800b317 	.word	0x0800b317
 800b308:	0800b31d 	.word	0x0800b31d
 800b30c:	0800b323 	.word	0x0800b323
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]
    break;
 800b314:	e00b      	b.n	800b32e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b316:	2302      	movs	r3, #2
 800b318:	73fb      	strb	r3, [r7, #15]
    break;
 800b31a:	e008      	b.n	800b32e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b31c:	2301      	movs	r3, #1
 800b31e:	73fb      	strb	r3, [r7, #15]
    break;
 800b320:	e005      	b.n	800b32e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b322:	2302      	movs	r3, #2
 800b324:	73fb      	strb	r3, [r7, #15]
    break;
 800b326:	e002      	b.n	800b32e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b328:	2302      	movs	r3, #2
 800b32a:	73fb      	strb	r3, [r7, #15]
    break;
 800b32c:	bf00      	nop
  }
  return usb_status;
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b346:	79fb      	ldrb	r3, [r7, #7]
 800b348:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d102      	bne.n	800b356 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b350:	2301      	movs	r3, #1
 800b352:	73fb      	strb	r3, [r7, #15]
 800b354:	e001      	b.n	800b35a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	461a      	mov	r2, r3
 800b35e:	2110      	movs	r1, #16
 800b360:	4803      	ldr	r0, [pc, #12]	; (800b370 <MX_DriverVbusHS+0x34>)
 800b362:	f7f6 fd1f 	bl	8001da4 <HAL_GPIO_WritePin>
}
 800b366:	bf00      	nop
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	40020800 	.word	0x40020800

0800b374 <__errno>:
 800b374:	4b01      	ldr	r3, [pc, #4]	; (800b37c <__errno+0x8>)
 800b376:	6818      	ldr	r0, [r3, #0]
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	20000030 	.word	0x20000030

0800b380 <__libc_init_array>:
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	4d0d      	ldr	r5, [pc, #52]	; (800b3b8 <__libc_init_array+0x38>)
 800b384:	4c0d      	ldr	r4, [pc, #52]	; (800b3bc <__libc_init_array+0x3c>)
 800b386:	1b64      	subs	r4, r4, r5
 800b388:	10a4      	asrs	r4, r4, #2
 800b38a:	2600      	movs	r6, #0
 800b38c:	42a6      	cmp	r6, r4
 800b38e:	d109      	bne.n	800b3a4 <__libc_init_array+0x24>
 800b390:	4d0b      	ldr	r5, [pc, #44]	; (800b3c0 <__libc_init_array+0x40>)
 800b392:	4c0c      	ldr	r4, [pc, #48]	; (800b3c4 <__libc_init_array+0x44>)
 800b394:	f000 f906 	bl	800b5a4 <_init>
 800b398:	1b64      	subs	r4, r4, r5
 800b39a:	10a4      	asrs	r4, r4, #2
 800b39c:	2600      	movs	r6, #0
 800b39e:	42a6      	cmp	r6, r4
 800b3a0:	d105      	bne.n	800b3ae <__libc_init_array+0x2e>
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}
 800b3a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3a8:	4798      	blx	r3
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	e7ee      	b.n	800b38c <__libc_init_array+0xc>
 800b3ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b2:	4798      	blx	r3
 800b3b4:	3601      	adds	r6, #1
 800b3b6:	e7f2      	b.n	800b39e <__libc_init_array+0x1e>
 800b3b8:	0800b648 	.word	0x0800b648
 800b3bc:	0800b648 	.word	0x0800b648
 800b3c0:	0800b648 	.word	0x0800b648
 800b3c4:	0800b64c 	.word	0x0800b64c

0800b3c8 <malloc>:
 800b3c8:	4b02      	ldr	r3, [pc, #8]	; (800b3d4 <malloc+0xc>)
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	f000 b871 	b.w	800b4b4 <_malloc_r>
 800b3d2:	bf00      	nop
 800b3d4:	20000030 	.word	0x20000030

0800b3d8 <free>:
 800b3d8:	4b02      	ldr	r3, [pc, #8]	; (800b3e4 <free+0xc>)
 800b3da:	4601      	mov	r1, r0
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	f000 b819 	b.w	800b414 <_free_r>
 800b3e2:	bf00      	nop
 800b3e4:	20000030 	.word	0x20000030

0800b3e8 <memcpy>:
 800b3e8:	440a      	add	r2, r1
 800b3ea:	4291      	cmp	r1, r2
 800b3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3f0:	d100      	bne.n	800b3f4 <memcpy+0xc>
 800b3f2:	4770      	bx	lr
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3fe:	4291      	cmp	r1, r2
 800b400:	d1f9      	bne.n	800b3f6 <memcpy+0xe>
 800b402:	bd10      	pop	{r4, pc}

0800b404 <memset>:
 800b404:	4402      	add	r2, r0
 800b406:	4603      	mov	r3, r0
 800b408:	4293      	cmp	r3, r2
 800b40a:	d100      	bne.n	800b40e <memset+0xa>
 800b40c:	4770      	bx	lr
 800b40e:	f803 1b01 	strb.w	r1, [r3], #1
 800b412:	e7f9      	b.n	800b408 <memset+0x4>

0800b414 <_free_r>:
 800b414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b416:	2900      	cmp	r1, #0
 800b418:	d048      	beq.n	800b4ac <_free_r+0x98>
 800b41a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b41e:	9001      	str	r0, [sp, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	f1a1 0404 	sub.w	r4, r1, #4
 800b426:	bfb8      	it	lt
 800b428:	18e4      	addlt	r4, r4, r3
 800b42a:	f000 f8ad 	bl	800b588 <__malloc_lock>
 800b42e:	4a20      	ldr	r2, [pc, #128]	; (800b4b0 <_free_r+0x9c>)
 800b430:	9801      	ldr	r0, [sp, #4]
 800b432:	6813      	ldr	r3, [r2, #0]
 800b434:	4615      	mov	r5, r2
 800b436:	b933      	cbnz	r3, 800b446 <_free_r+0x32>
 800b438:	6063      	str	r3, [r4, #4]
 800b43a:	6014      	str	r4, [r2, #0]
 800b43c:	b003      	add	sp, #12
 800b43e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b442:	f000 b8a7 	b.w	800b594 <__malloc_unlock>
 800b446:	42a3      	cmp	r3, r4
 800b448:	d90b      	bls.n	800b462 <_free_r+0x4e>
 800b44a:	6821      	ldr	r1, [r4, #0]
 800b44c:	1862      	adds	r2, r4, r1
 800b44e:	4293      	cmp	r3, r2
 800b450:	bf04      	itt	eq
 800b452:	681a      	ldreq	r2, [r3, #0]
 800b454:	685b      	ldreq	r3, [r3, #4]
 800b456:	6063      	str	r3, [r4, #4]
 800b458:	bf04      	itt	eq
 800b45a:	1852      	addeq	r2, r2, r1
 800b45c:	6022      	streq	r2, [r4, #0]
 800b45e:	602c      	str	r4, [r5, #0]
 800b460:	e7ec      	b.n	800b43c <_free_r+0x28>
 800b462:	461a      	mov	r2, r3
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	b10b      	cbz	r3, 800b46c <_free_r+0x58>
 800b468:	42a3      	cmp	r3, r4
 800b46a:	d9fa      	bls.n	800b462 <_free_r+0x4e>
 800b46c:	6811      	ldr	r1, [r2, #0]
 800b46e:	1855      	adds	r5, r2, r1
 800b470:	42a5      	cmp	r5, r4
 800b472:	d10b      	bne.n	800b48c <_free_r+0x78>
 800b474:	6824      	ldr	r4, [r4, #0]
 800b476:	4421      	add	r1, r4
 800b478:	1854      	adds	r4, r2, r1
 800b47a:	42a3      	cmp	r3, r4
 800b47c:	6011      	str	r1, [r2, #0]
 800b47e:	d1dd      	bne.n	800b43c <_free_r+0x28>
 800b480:	681c      	ldr	r4, [r3, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	6053      	str	r3, [r2, #4]
 800b486:	4421      	add	r1, r4
 800b488:	6011      	str	r1, [r2, #0]
 800b48a:	e7d7      	b.n	800b43c <_free_r+0x28>
 800b48c:	d902      	bls.n	800b494 <_free_r+0x80>
 800b48e:	230c      	movs	r3, #12
 800b490:	6003      	str	r3, [r0, #0]
 800b492:	e7d3      	b.n	800b43c <_free_r+0x28>
 800b494:	6825      	ldr	r5, [r4, #0]
 800b496:	1961      	adds	r1, r4, r5
 800b498:	428b      	cmp	r3, r1
 800b49a:	bf04      	itt	eq
 800b49c:	6819      	ldreq	r1, [r3, #0]
 800b49e:	685b      	ldreq	r3, [r3, #4]
 800b4a0:	6063      	str	r3, [r4, #4]
 800b4a2:	bf04      	itt	eq
 800b4a4:	1949      	addeq	r1, r1, r5
 800b4a6:	6021      	streq	r1, [r4, #0]
 800b4a8:	6054      	str	r4, [r2, #4]
 800b4aa:	e7c7      	b.n	800b43c <_free_r+0x28>
 800b4ac:	b003      	add	sp, #12
 800b4ae:	bd30      	pop	{r4, r5, pc}
 800b4b0:	20008468 	.word	0x20008468

0800b4b4 <_malloc_r>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	1ccd      	adds	r5, r1, #3
 800b4b8:	f025 0503 	bic.w	r5, r5, #3
 800b4bc:	3508      	adds	r5, #8
 800b4be:	2d0c      	cmp	r5, #12
 800b4c0:	bf38      	it	cc
 800b4c2:	250c      	movcc	r5, #12
 800b4c4:	2d00      	cmp	r5, #0
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	db01      	blt.n	800b4ce <_malloc_r+0x1a>
 800b4ca:	42a9      	cmp	r1, r5
 800b4cc:	d903      	bls.n	800b4d6 <_malloc_r+0x22>
 800b4ce:	230c      	movs	r3, #12
 800b4d0:	6033      	str	r3, [r6, #0]
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d6:	f000 f857 	bl	800b588 <__malloc_lock>
 800b4da:	4921      	ldr	r1, [pc, #132]	; (800b560 <_malloc_r+0xac>)
 800b4dc:	680a      	ldr	r2, [r1, #0]
 800b4de:	4614      	mov	r4, r2
 800b4e0:	b99c      	cbnz	r4, 800b50a <_malloc_r+0x56>
 800b4e2:	4f20      	ldr	r7, [pc, #128]	; (800b564 <_malloc_r+0xb0>)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	b923      	cbnz	r3, 800b4f2 <_malloc_r+0x3e>
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f000 f83c 	bl	800b568 <_sbrk_r>
 800b4f0:	6038      	str	r0, [r7, #0]
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f000 f837 	bl	800b568 <_sbrk_r>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	d123      	bne.n	800b546 <_malloc_r+0x92>
 800b4fe:	230c      	movs	r3, #12
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	4630      	mov	r0, r6
 800b504:	f000 f846 	bl	800b594 <__malloc_unlock>
 800b508:	e7e3      	b.n	800b4d2 <_malloc_r+0x1e>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	1b5b      	subs	r3, r3, r5
 800b50e:	d417      	bmi.n	800b540 <_malloc_r+0x8c>
 800b510:	2b0b      	cmp	r3, #11
 800b512:	d903      	bls.n	800b51c <_malloc_r+0x68>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	441c      	add	r4, r3
 800b518:	6025      	str	r5, [r4, #0]
 800b51a:	e004      	b.n	800b526 <_malloc_r+0x72>
 800b51c:	6863      	ldr	r3, [r4, #4]
 800b51e:	42a2      	cmp	r2, r4
 800b520:	bf0c      	ite	eq
 800b522:	600b      	streq	r3, [r1, #0]
 800b524:	6053      	strne	r3, [r2, #4]
 800b526:	4630      	mov	r0, r6
 800b528:	f000 f834 	bl	800b594 <__malloc_unlock>
 800b52c:	f104 000b 	add.w	r0, r4, #11
 800b530:	1d23      	adds	r3, r4, #4
 800b532:	f020 0007 	bic.w	r0, r0, #7
 800b536:	1ac2      	subs	r2, r0, r3
 800b538:	d0cc      	beq.n	800b4d4 <_malloc_r+0x20>
 800b53a:	1a1b      	subs	r3, r3, r0
 800b53c:	50a3      	str	r3, [r4, r2]
 800b53e:	e7c9      	b.n	800b4d4 <_malloc_r+0x20>
 800b540:	4622      	mov	r2, r4
 800b542:	6864      	ldr	r4, [r4, #4]
 800b544:	e7cc      	b.n	800b4e0 <_malloc_r+0x2c>
 800b546:	1cc4      	adds	r4, r0, #3
 800b548:	f024 0403 	bic.w	r4, r4, #3
 800b54c:	42a0      	cmp	r0, r4
 800b54e:	d0e3      	beq.n	800b518 <_malloc_r+0x64>
 800b550:	1a21      	subs	r1, r4, r0
 800b552:	4630      	mov	r0, r6
 800b554:	f000 f808 	bl	800b568 <_sbrk_r>
 800b558:	3001      	adds	r0, #1
 800b55a:	d1dd      	bne.n	800b518 <_malloc_r+0x64>
 800b55c:	e7cf      	b.n	800b4fe <_malloc_r+0x4a>
 800b55e:	bf00      	nop
 800b560:	20008468 	.word	0x20008468
 800b564:	2000846c 	.word	0x2000846c

0800b568 <_sbrk_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4d06      	ldr	r5, [pc, #24]	; (800b584 <_sbrk_r+0x1c>)
 800b56c:	2300      	movs	r3, #0
 800b56e:	4604      	mov	r4, r0
 800b570:	4608      	mov	r0, r1
 800b572:	602b      	str	r3, [r5, #0]
 800b574:	f7f5 fea8 	bl	80012c8 <_sbrk>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_sbrk_r+0x1a>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_sbrk_r+0x1a>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	20008d5c 	.word	0x20008d5c

0800b588 <__malloc_lock>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__malloc_lock+0x8>)
 800b58a:	f000 b809 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800b58e:	bf00      	nop
 800b590:	20008d64 	.word	0x20008d64

0800b594 <__malloc_unlock>:
 800b594:	4801      	ldr	r0, [pc, #4]	; (800b59c <__malloc_unlock+0x8>)
 800b596:	f000 b804 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800b59a:	bf00      	nop
 800b59c:	20008d64 	.word	0x20008d64

0800b5a0 <__retarget_lock_acquire_recursive>:
 800b5a0:	4770      	bx	lr

0800b5a2 <__retarget_lock_release_recursive>:
 800b5a2:	4770      	bx	lr

0800b5a4 <_init>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	bf00      	nop
 800b5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5aa:	bc08      	pop	{r3}
 800b5ac:	469e      	mov	lr, r3
 800b5ae:	4770      	bx	lr

0800b5b0 <_fini>:
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	bf00      	nop
 800b5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5b6:	bc08      	pop	{r3}
 800b5b8:	469e      	mov	lr, r3
 800b5ba:	4770      	bx	lr
