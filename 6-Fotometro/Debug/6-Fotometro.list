
6-Fotometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800174c  0800174c  0001174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000000c  20000000  08001750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000008c  2000000c  0800175c  0002000c  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20000098  080017e8  0002000c  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00007d81  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000013f3  00000000  00000000  00027dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000870  00000000  00000000  000291b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000007c8  00000000  00000000  00029a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000250ac  00000000  00000000  0002a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000a311  00000000  00000000  0004f294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000e5a35  00000000  00000000  000595a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  0013efda  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000228c  00000000  00000000  0013f030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001730 	.word	0x08001730

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001730 	.word	0x08001730

080001c8 <main>:
uint8_t F3=0;			// Digito 3
uint8_t F4=0;			// Digito 4

// ----- main() ---------------------------------------------------------------
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	/* Conf. Variables */

	/* System Tick Init */
	SysTick_Init (SYSTICK_FREQ_HZ);		// Para hacer el multiplexado del display.
 80001ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d2:	f000 fdaf 	bl	8000d34 <SysTick_Init>

	/* Conf. Entradas */
	//No hay entradas...

	/* Conf. Salidas */
	__HAL_RCC_GPIOA_CLK_ENABLE();	// Habilito el Clock del puerto A. (donde entra la frecuencia del 555)
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
 80001da:	4b56      	ldr	r3, [pc, #344]	; (8000334 <main+0x16c>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a55      	ldr	r2, [pc, #340]	; (8000334 <main+0x16c>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
 80001e6:	4b53      	ldr	r3, [pc, #332]	; (8000334 <main+0x16c>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE(); // Enable GPIOC Peripheral clock	(Para seleccionar los digitos del display)
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	4b4f      	ldr	r3, [pc, #316]	; (8000334 <main+0x16c>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fa:	4a4e      	ldr	r2, [pc, #312]	; (8000334 <main+0x16c>)
 80001fc:	f043 0304 	orr.w	r3, r3, #4
 8000200:	6313      	str	r3, [r2, #48]	; 0x30
 8000202:	4b4c      	ldr	r3, [pc, #304]	; (8000334 <main+0x16c>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	f003 0304 	and.w	r3, r3, #4
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE(); // Enable GPIOD Peripheral clock	(Para seleccionar los segmentos del display)
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	4b48      	ldr	r3, [pc, #288]	; (8000334 <main+0x16c>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a47      	ldr	r2, [pc, #284]	; (8000334 <main+0x16c>)
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
 800021e:	4b45      	ldr	r3, [pc, #276]	; (8000334 <main+0x16c>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	f003 0308 	and.w	r3, r3, #8
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();	  // Habilito el Timer 3. (el que me genera las interrupciones del ADC)
 800022a:	2300      	movs	r3, #0
 800022c:	603b      	str	r3, [r7, #0]
 800022e:	4b41      	ldr	r3, [pc, #260]	; (8000334 <main+0x16c>)
 8000230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000232:	4a40      	ldr	r2, [pc, #256]	; (8000334 <main+0x16c>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6413      	str	r3, [r2, #64]	; 0x40
 800023a:	4b3e      	ldr	r3, [pc, #248]	; (8000334 <main+0x16c>)
 800023c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800023e:	f003 0301 	and.w	r3, r3, #1
 8000242:	603b      	str	r3, [r7, #0]
 8000244:	683b      	ldr	r3, [r7, #0]
	Out_Init(GPIOC, SEL_MUX_0|SEL_MUX_1);	// Defino como salidas las entradas al decodificador.
 8000246:	2105      	movs	r1, #5
 8000248:	483b      	ldr	r0, [pc, #236]	; (8000338 <main+0x170>)
 800024a:	f000 fd08 	bl	8000c5e <Out_Init>
												// Defino como salidas cada segmento de los displays.
	Out_Init(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD);
 800024e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000252:	483a      	ldr	r0, [pc, #232]	; (800033c <main+0x174>)
 8000254:	f000 fd03 	bl	8000c5e <Out_Init>
	// INICIALIZACION
	Init_ICTimer();				// Dentro de esta funcion CONFIGURO GPIOA, TIM2, Preescalers...
 8000258:	f000 fc82 	bl	8000b60 <Init_ICTimer>


	while(1){

													//frec=2153
		F1=(uint8_t)frec/1000;						//F1=2
 800025c:	4b38      	ldr	r3, [pc, #224]	; (8000340 <main+0x178>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4a38      	ldr	r2, [pc, #224]	; (8000344 <main+0x17c>)
 8000264:	fb82 1203 	smull	r1, r2, r2, r3
 8000268:	1192      	asrs	r2, r2, #6
 800026a:	17db      	asrs	r3, r3, #31
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b35      	ldr	r3, [pc, #212]	; (8000348 <main+0x180>)
 8000272:	701a      	strb	r2, [r3, #0]
		F2=(uint8_t)(frec/100)-10*F1;				//F2=1
 8000274:	4b32      	ldr	r3, [pc, #200]	; (8000340 <main+0x178>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	4a34      	ldr	r2, [pc, #208]	; (800034c <main+0x184>)
 800027a:	fba2 2303 	umull	r2, r3, r2, r3
 800027e:	095b      	lsrs	r3, r3, #5
 8000280:	b29b      	uxth	r3, r3
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b30      	ldr	r3, [pc, #192]	; (8000348 <main+0x180>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	4619      	mov	r1, r3
 800028a:	0149      	lsls	r1, r1, #5
 800028c:	1ac9      	subs	r1, r1, r3
 800028e:	0089      	lsls	r1, r1, #2
 8000290:	1acb      	subs	r3, r1, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	b2db      	uxtb	r3, r3
 8000296:	4413      	add	r3, r2
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4b2d      	ldr	r3, [pc, #180]	; (8000350 <main+0x188>)
 800029c:	701a      	strb	r2, [r3, #0]
		F3=(uint8_t)(frec/10 -100*F1-10*F2);		//F3=5
 800029e:	4b28      	ldr	r3, [pc, #160]	; (8000340 <main+0x178>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	4a2c      	ldr	r2, [pc, #176]	; (8000354 <main+0x18c>)
 80002a4:	fba2 2303 	umull	r2, r3, r2, r3
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <main+0x180>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	4619      	mov	r1, r3
 80002b4:	0089      	lsls	r1, r1, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	4619      	mov	r1, r3
 80002ba:	0088      	lsls	r0, r1, #2
 80002bc:	4619      	mov	r1, r3
 80002be:	4603      	mov	r3, r0
 80002c0:	440b      	add	r3, r1
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b21      	ldr	r3, [pc, #132]	; (8000350 <main+0x188>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4619      	mov	r1, r3
 80002d0:	0089      	lsls	r1, r1, #2
 80002d2:	440b      	add	r3, r1
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <main+0x190>)
 80002de:	701a      	strb	r2, [r3, #0]
		F4=(uint8_t)(frec -1000*F1 -100*F2 -10*F3);	//F4=3
 80002e0:	4b17      	ldr	r3, [pc, #92]	; (8000340 <main+0x178>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <main+0x180>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	4619      	mov	r1, r3
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	1acb      	subs	r3, r1, r3
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <main+0x188>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4619      	mov	r1, r3
 80002fe:	0089      	lsls	r1, r1, #2
 8000300:	440b      	add	r3, r1
 8000302:	4619      	mov	r1, r3
 8000304:	0088      	lsls	r0, r1, #2
 8000306:	4619      	mov	r1, r3
 8000308:	4603      	mov	r3, r0
 800030a:	440b      	add	r3, r1
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	b2db      	uxtb	r3, r3
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <main+0x190>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4619      	mov	r1, r3
 800031a:	0089      	lsls	r1, r1, #2
 800031c:	440b      	add	r3, r1
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <main+0x194>)
 8000328:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800032a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032e:	f000 f989 	bl	8000644 <HAL_Delay>
		F1=(uint8_t)frec/1000;						//F1=2
 8000332:	e793      	b.n	800025c <main+0x94>
 8000334:	40023800 	.word	0x40023800
 8000338:	40020800 	.word	0x40020800
 800033c:	40020c00 	.word	0x40020c00
 8000340:	20000028 	.word	0x20000028
 8000344:	10624dd3 	.word	0x10624dd3
 8000348:	2000002a 	.word	0x2000002a
 800034c:	51eb851f 	.word	0x51eb851f
 8000350:	2000002b 	.word	0x2000002b
 8000354:	cccccccd 	.word	0xcccccccd
 8000358:	2000002c 	.word	0x2000002c
 800035c:	2000002d 	.word	0x2000002d

08000360 <SysTickHook>:
	}
}
// ----------------------------------------------------------------------------
void SysTickHook (void) // Para colgarse del System Tick
{
 8000360:	b5b0      	push	{r4, r5, r7, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28
 8000364:	af00      	add	r7, sp, #0
	static uint8_t Digito =0;		// digito se inicializa en 0. Como se definio static
										// el programa no vuelve a pasar por aca. No vuelve a hacerse 0 cada
										// vez que pasa.

	//Conversion BCD -> 7 segmentos
	const uint32_t BIN7SEG[] = {
 8000366:	4b3f      	ldr	r3, [pc, #252]	; (8000464 <SysTickHook+0x104>)
 8000368:	463c      	mov	r4, r7
 800036a:	461d      	mov	r5, r3
 800036c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000374:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000378:	e884 0003 	stmia.w	r4, {r0, r1}
			SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g,	// Ocho
			SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_f|SEGMENTO_g};			// Nueve

		// Escriba su codigo aqui

	BufDisp[0]=F1;
 800037c:	4b3a      	ldr	r3, [pc, #232]	; (8000468 <SysTickHook+0x108>)
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	4b3a      	ldr	r3, [pc, #232]	; (800046c <SysTickHook+0x10c>)
 8000382:	701a      	strb	r2, [r3, #0]
	BufDisp[1]=F2;
 8000384:	4b3a      	ldr	r3, [pc, #232]	; (8000470 <SysTickHook+0x110>)
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	4b38      	ldr	r3, [pc, #224]	; (800046c <SysTickHook+0x10c>)
 800038a:	705a      	strb	r2, [r3, #1]
	BufDisp[2]=F3;
 800038c:	4b39      	ldr	r3, [pc, #228]	; (8000474 <SysTickHook+0x114>)
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b36      	ldr	r3, [pc, #216]	; (800046c <SysTickHook+0x10c>)
 8000392:	709a      	strb	r2, [r3, #2]
	BufDisp[3]=F4;
 8000394:	4b38      	ldr	r3, [pc, #224]	; (8000478 <SysTickHook+0x118>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	4b34      	ldr	r3, [pc, #208]	; (800046c <SysTickHook+0x10c>)
 800039a:	70da      	strb	r2, [r3, #3]

	if(Digito == 4){
 800039c:	4b37      	ldr	r3, [pc, #220]	; (800047c <SysTickHook+0x11c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	d102      	bne.n	80003aa <SysTickHook+0x4a>
		Digito= 0;
 80003a4:	4b35      	ldr	r3, [pc, #212]	; (800047c <SysTickHook+0x11c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
	}

	switch(Digito){		// display organizado como: D3.D2.D1.D0
 80003aa:	4b34      	ldr	r3, [pc, #208]	; (800047c <SysTickHook+0x11c>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b03      	cmp	r3, #3
 80003b0:	d836      	bhi.n	8000420 <SysTickHook+0xc0>
 80003b2:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <SysTickHook+0x58>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080003c9 	.word	0x080003c9
 80003bc:	080003df 	.word	0x080003df
 80003c0:	080003f5 	.word	0x080003f5
 80003c4:	0800040b 	.word	0x0800040b
		case 0:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2104      	movs	r1, #4
 80003cc:	482c      	ldr	r0, [pc, #176]	; (8000480 <SysTickHook+0x120>)
 80003ce:	f000 fbad 	bl	8000b2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2101      	movs	r1, #1
 80003d6:	482a      	ldr	r0, [pc, #168]	; (8000480 <SysTickHook+0x120>)
 80003d8:	f000 fba8 	bl	8000b2c <HAL_GPIO_WritePin>
			break;
 80003dc:	e020      	b.n	8000420 <SysTickHook+0xc0>
		case 1:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2104      	movs	r1, #4
 80003e2:	4827      	ldr	r0, [pc, #156]	; (8000480 <SysTickHook+0x120>)
 80003e4:	f000 fba2 	bl	8000b2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2101      	movs	r1, #1
 80003ec:	4824      	ldr	r0, [pc, #144]	; (8000480 <SysTickHook+0x120>)
 80003ee:	f000 fb9d 	bl	8000b2c <HAL_GPIO_WritePin>
			break;
 80003f2:	e015      	b.n	8000420 <SysTickHook+0xc0>
		case 2:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2104      	movs	r1, #4
 80003f8:	4821      	ldr	r0, [pc, #132]	; (8000480 <SysTickHook+0x120>)
 80003fa:	f000 fb97 	bl	8000b2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2101      	movs	r1, #1
 8000402:	481f      	ldr	r0, [pc, #124]	; (8000480 <SysTickHook+0x120>)
 8000404:	f000 fb92 	bl	8000b2c <HAL_GPIO_WritePin>
			break;
 8000408:	e00a      	b.n	8000420 <SysTickHook+0xc0>
		case 3:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2104      	movs	r1, #4
 800040e:	481c      	ldr	r0, [pc, #112]	; (8000480 <SysTickHook+0x120>)
 8000410:	f000 fb8c 	bl	8000b2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2101      	movs	r1, #1
 8000418:	4819      	ldr	r0, [pc, #100]	; (8000480 <SysTickHook+0x120>)
 800041a:	f000 fb87 	bl	8000b2c <HAL_GPIO_WritePin>
			break;
 800041e:	bf00      	nop
		}

	//	Out_Init(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD);
	HAL_GPIO_WritePin(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD , GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000426:	4817      	ldr	r0, [pc, #92]	; (8000484 <SysTickHook+0x124>)
 8000428:	f000 fb80 	bl	8000b2c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, BIN7SEG[BufDisp[-Digito+3]], GPIO_PIN_SET);	//Enciendo los segmentos correspondientes.
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <SysTickHook+0x11c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	f1c3 0303 	rsb	r3, r3, #3
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <SysTickHook+0x10c>)
 8000436:	5cd3      	ldrb	r3, [r2, r3]
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800043e:	4413      	add	r3, r2
 8000440:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000444:	b29b      	uxth	r3, r3
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	480e      	ldr	r0, [pc, #56]	; (8000484 <SysTickHook+0x124>)
 800044c:	f000 fb6e 	bl	8000b2c <HAL_GPIO_WritePin>
	Digito=Digito+1;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <SysTickHook+0x11c>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <SysTickHook+0x11c>)
 800045a:	701a      	strb	r2, [r3, #0]

}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	; 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bdb0      	pop	{r4, r5, r7, pc}
 8000464:	08001708 	.word	0x08001708
 8000468:	2000002a 	.word	0x2000002a
 800046c:	20000030 	.word	0x20000030
 8000470:	2000002b 	.word	0x2000002b
 8000474:	2000002c 	.word	0x2000002c
 8000478:	2000002d 	.word	0x2000002d
 800047c:	20000034 	.word	0x20000034
 8000480:	40020800 	.word	0x40020800
 8000484:	40020c00 	.word	0x40020c00

08000488 <ICTimerHook>:

void ICTimerHook (uint32_t CapturedValue)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	static uint32_t Nactual =0;	//	Numero del contador actual
	static uint32_t Nanterior =0;	//	Numero del contador anterior
	static uint32_t Nciclos = 0;	//	Numero del contador anterior

	Nactual=CapturedValue;
 8000490:	4a26      	ldr	r2, [pc, #152]	; (800052c <ICTimerHook+0xa4>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]

	if(Nactual>Nanterior){
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <ICTimerHook+0xa4>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <ICTimerHook+0xa8>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d90f      	bls.n	80004c2 <ICTimerHook+0x3a>
		Nciclos=Nactual-Nanterior;
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <ICTimerHook+0xa4>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <ICTimerHook+0xa8>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	4a21      	ldr	r2, [pc, #132]	; (8000534 <ICTimerHook+0xac>)
 80004ae:	6013      	str	r3, [r2, #0]
		frec=2000000/Nciclos;
 80004b0:	4b20      	ldr	r3, [pc, #128]	; (8000534 <ICTimerHook+0xac>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a20      	ldr	r2, [pc, #128]	; (8000538 <ICTimerHook+0xb0>)
 80004b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <ICTimerHook+0xb4>)
 80004be:	801a      	strh	r2, [r3, #0]
 80004c0:	e029      	b.n	8000516 <ICTimerHook+0x8e>
	}
	else if(Nactual<Nanterior){		//Significa que el contador se reseteó. el contador es de 32 bits.
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <ICTimerHook+0xa4>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <ICTimerHook+0xa8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d220      	bcs.n	8000510 <ICTimerHook+0x88>
		Nciclos=(ModuloContador-Nanterior)+Nactual;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <ICTimerHook+0xa8>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	ee07 3a90 	vmov	s15, r3
 80004d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000540 <ICTimerHook+0xb8>
 80004de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <ICTimerHook+0xa4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	ee07 3a90 	vmov	s15, r3
 80004ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004f6:	ee17 2a90 	vmov	r2, s15
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <ICTimerHook+0xac>)
 80004fc:	601a      	str	r2, [r3, #0]
		frec=2000000/Nciclos;
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <ICTimerHook+0xac>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <ICTimerHook+0xb0>)
 8000504:	fbb2 f3f3 	udiv	r3, r2, r3
 8000508:	b29a      	uxth	r2, r3
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <ICTimerHook+0xb4>)
 800050c:	801a      	strh	r2, [r3, #0]
 800050e:	e002      	b.n	8000516 <ICTimerHook+0x8e>
	}
	else{							//(Nactual==Nanterior)
		frec=0;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <ICTimerHook+0xb4>)
 8000512:	2200      	movs	r2, #0
 8000514:	801a      	strh	r2, [r3, #0]
	}

	Nanterior=Nactual;
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <ICTimerHook+0xa4>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <ICTimerHook+0xa8>)
 800051c:	6013      	str	r3, [r2, #0]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000038 	.word	0x20000038
 8000530:	2000003c 	.word	0x2000003c
 8000534:	20000040 	.word	0x20000040
 8000538:	001e8480 	.word	0x001e8480
 800053c:	20000028 	.word	0x20000028
 8000540:	42040000 	.word	0x42040000

08000544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <SystemInit+0x60>)
 800054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054e:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <SystemInit+0x60>)
 8000550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <SystemInit+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <SystemInit+0x64>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <SystemInit+0x64>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <SystemInit+0x64>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <SystemInit+0x64>)
 8000570:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000578:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <SystemInit+0x64>)
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <SystemInit+0x68>)
 800057e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <SystemInit+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <SystemInit+0x64>)
 8000586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800058a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <SystemInit+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <SystemInit+0x60>)
 8000594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000598:	609a      	str	r2, [r3, #8]
#endif
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00
 80005a8:	40023800 	.word	0x40023800
 80005ac:	24003010 	.word	0x24003010

080005b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005b6:	e003      	b.n	80005c0 <LoopCopyDataInit>

080005b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005be:	3104      	adds	r1, #4

080005c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005c8:	d3f6      	bcc.n	80005b8 <CopyDataInit>
  ldr  r2, =_sbss
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005cc:	e002      	b.n	80005d4 <LoopFillZerobss>

080005ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005d0:	f842 3b04 	str.w	r3, [r2], #4

080005d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005d8:	d3f9      	bcc.n	80005ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005da:	f7ff ffb3 	bl	8000544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005de:	f001 f86f 	bl	80016c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005e2:	f7ff fdf1 	bl	80001c8 <main>
  bx  lr    
 80005e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005ec:	08001750 	.word	0x08001750
  ldr  r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005f4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80005f8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80005fc:	20000098 	.word	0x20000098

08000600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000008 	.word	0x20000008
 8000628:	20000094 	.word	0x20000094

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000094 	.word	0x20000094

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_Delay+0x44>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800066a:	bf00      	nop
 800066c:	f7ff ffde 	bl	800062c <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
  {
  }
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db0b      	blt.n	80006d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 021f 	and.w	r2, r3, #31
 80006c0:	4907      	ldr	r1, [pc, #28]	; (80006e0 <__NVIC_EnableIRQ+0x38>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	095b      	lsrs	r3, r3, #5
 80006c8:	2001      	movs	r0, #1
 80006ca:	fa00 f202 	lsl.w	r2, r0, r2
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db0a      	blt.n	800070e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	490c      	ldr	r1, [pc, #48]	; (8000730 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070c:	e00a      	b.n	8000724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	0112      	lsls	r2, r2, #4
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	440b      	add	r3, r1
 8000722:	761a      	strb	r2, [r3, #24]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	f1c3 0307 	rsb	r3, r3, #7
 8000752:	2b04      	cmp	r3, #4
 8000754:	bf28      	it	cs
 8000756:	2304      	movcs	r3, #4
 8000758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3304      	adds	r3, #4
 800075e:	2b06      	cmp	r3, #6
 8000760:	d902      	bls.n	8000768 <NVIC_EncodePriority+0x30>
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3b03      	subs	r3, #3
 8000766:	e000      	b.n	800076a <NVIC_EncodePriority+0x32>
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	f04f 32ff 	mov.w	r2, #4294967295
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43da      	mvns	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	401a      	ands	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000780:	f04f 31ff 	mov.w	r1, #4294967295
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43d9      	mvns	r1, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	4313      	orrs	r3, r2
         );
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff6c 	bl	800068c <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ffbc 	bl	8000738 <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff8b 	bl	80006e4 <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff5f 	bl	80006a8 <__NVIC_EnableIRQ>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
 800080e:	e16b      	b.n	8000ae8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000810:	2201      	movs	r2, #1
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	429a      	cmp	r2, r3
 800082a:	f040 815a 	bne.w	8000ae2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d003      	beq.n	800083e <HAL_GPIO_Init+0x4a>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b12      	cmp	r3, #18
 800083c:	d123      	bne.n	8000886 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	08da      	lsrs	r2, r3, #3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3208      	adds	r2, #8
 8000846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	220f      	movs	r2, #15
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	4013      	ands	r3, r2
 8000860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	691a      	ldr	r2, [r3, #16]
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	4313      	orrs	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	08da      	lsrs	r2, r3, #3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3208      	adds	r2, #8
 8000880:	69b9      	ldr	r1, [r7, #24]
 8000882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	2203      	movs	r2, #3
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4013      	ands	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0203 	and.w	r2, r3, #3
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d00b      	beq.n	80008da <HAL_GPIO_Init+0xe6>
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d007      	beq.n	80008da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	2b11      	cmp	r3, #17
 80008d0:	d003      	beq.n	80008da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d130      	bne.n	800093c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	2203      	movs	r2, #3
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4013      	ands	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	68da      	ldr	r2, [r3, #12]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	4313      	orrs	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000910:	2201      	movs	r2, #1
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	f003 0201 	and.w	r2, r3, #1
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 80b4 	beq.w	8000ae2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b60      	ldr	r3, [pc, #384]	; (8000b00 <HAL_GPIO_Init+0x30c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a5f      	ldr	r2, [pc, #380]	; (8000b00 <HAL_GPIO_Init+0x30c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <HAL_GPIO_Init+0x30c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000996:	4a5b      	ldr	r2, [pc, #364]	; (8000b04 <HAL_GPIO_Init+0x310>)
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a52      	ldr	r2, [pc, #328]	; (8000b08 <HAL_GPIO_Init+0x314>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d02b      	beq.n	8000a1a <HAL_GPIO_Init+0x226>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a51      	ldr	r2, [pc, #324]	; (8000b0c <HAL_GPIO_Init+0x318>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d025      	beq.n	8000a16 <HAL_GPIO_Init+0x222>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a50      	ldr	r2, [pc, #320]	; (8000b10 <HAL_GPIO_Init+0x31c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d01f      	beq.n	8000a12 <HAL_GPIO_Init+0x21e>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4f      	ldr	r2, [pc, #316]	; (8000b14 <HAL_GPIO_Init+0x320>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d019      	beq.n	8000a0e <HAL_GPIO_Init+0x21a>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4e      	ldr	r2, [pc, #312]	; (8000b18 <HAL_GPIO_Init+0x324>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0x216>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4d      	ldr	r2, [pc, #308]	; (8000b1c <HAL_GPIO_Init+0x328>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00d      	beq.n	8000a06 <HAL_GPIO_Init+0x212>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4c      	ldr	r2, [pc, #304]	; (8000b20 <HAL_GPIO_Init+0x32c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0x20e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4b      	ldr	r2, [pc, #300]	; (8000b24 <HAL_GPIO_Init+0x330>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_GPIO_Init+0x20a>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e00e      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 80009fe:	2308      	movs	r3, #8
 8000a00:	e00c      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 8000a02:	2306      	movs	r3, #6
 8000a04:	e00a      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 8000a06:	2305      	movs	r3, #5
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x228>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2c:	4935      	ldr	r1, [pc, #212]	; (8000b04 <HAL_GPIO_Init+0x310>)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a5e:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a88:	4a27      	ldr	r2, [pc, #156]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <HAL_GPIO_Init+0x334>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f67f ae90 	bls.w	8000810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40021c00 	.word	0x40021c00
 8000b28:	40013c00 	.word	0x40013c00

08000b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b3c:	787b      	ldrb	r3, [r7, #1]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b48:	e003      	b.n	8000b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	041a      	lsls	r2, r3, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	619a      	str	r2, [r3, #24]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <Init_ICTimer>:
 * Año 2021
 */
#include "ICTimer.h"

void Init_ICTimer(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef   GPIO_InitStruct;
	/* Configure  (TIM2_Channel4) in Alternate function, push-pull and 100MHz speed */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b66:	2308      	movs	r3, #8
 8000b68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4823      	ldr	r0, [pc, #140]	; (8000c0c <Init_ICTimer+0xac>)
 8000b80:	f7ff fe38 	bl	80007f4 <HAL_GPIO_Init>

	/*##-2- Configure the NVIC for TIMx #########################################*/
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	201c      	movs	r0, #28
 8000b8a:	f7ff fe08 	bl	800079e <HAL_NVIC_SetPriority>
	/* Enable the TIMx global Interrupt */
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b8e:	201c      	movs	r0, #28
 8000b90:	f7ff fe21 	bl	80007d6 <HAL_NVIC_EnableIRQ>

	TimHandle.Instance = TIM2;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <Init_ICTimer+0xb0>)
 8000b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9a:	601a      	str	r2, [r3, #0]
	/* Initialize TIM2 peripheral as follows:
      + Period = 0xFFFFFFFF (Timer de 32 bits)
      + Prescaler
      + ClockDivision = 0
      + Counter direction = Up */
	TimHandle.Init.Period        = 0xFFFFFFFF;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <Init_ICTimer+0xb0>)
 8000b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba2:	60da      	str	r2, [r3, #12]
	TimHandle.Init.Prescaler     = TIM2_PSC-1; // Timer 2 Prescaler !!!
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <Init_ICTimer+0xb0>)
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	605a      	str	r2, [r3, #4]
	TimHandle.Init.ClockDivision = 0;
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <Init_ICTimer+0xb0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
	TimHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <Init_ICTimer+0xb0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_IC_Init(&TimHandle) != HAL_OK)
 8000bb6:	4816      	ldr	r0, [pc, #88]	; (8000c10 <Init_ICTimer+0xb0>)
 8000bb8:	f000 f8d0 	bl	8000d5c <HAL_TIM_IC_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <Init_ICTimer+0x66>
	{
		/* Initialization Error */
		Error_Handler();
 8000bc2:	f000 f849 	bl	8000c58 <Error_Handler>
	}

	/*##-2- Configure the Input Capture channel ################################*/
	/* Configure the Input Capture of channel 4 */
	sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <Init_ICTimer+0xb4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
	sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <Init_ICTimer+0xb4>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	605a      	str	r2, [r3, #4]
	sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <Init_ICTimer+0xb4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
	sICConfig.ICFilter    = 0;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <Init_ICTimer+0xb4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_IC_ConfigChannel(&TimHandle, &sICConfig, TIM_CHANNEL_4) != HAL_OK)
 8000bde:	220c      	movs	r2, #12
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <Init_ICTimer+0xb4>)
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <Init_ICTimer+0xb0>)
 8000be4:	f000 fa60 	bl	80010a8 <HAL_TIM_IC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <Init_ICTimer+0x92>
	{
		/* Configuration Error */
		Error_Handler();
 8000bee:	f000 f833 	bl	8000c58 <Error_Handler>
	}

	/*##-3- Start the Input Capture in interrupt mode ##########################*/
	if(HAL_TIM_IC_Start_IT(&TimHandle, TIM_CHANNEL_4) != HAL_OK)
 8000bf2:	210c      	movs	r1, #12
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <Init_ICTimer+0xb0>)
 8000bf6:	f000 f8e7 	bl	8000dc8 <HAL_TIM_IC_Start_IT>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <Init_ICTimer+0xa4>
	{
		/* Starting Error */
		Error_Handler();
 8000c00:	f000 f82a 	bl	8000c58 <Error_Handler>
	PCLK1=Frec. de entrada Timer 2 (antes del PSC)
	Ftim2=Frec. de entrada al contador (luego del prescaler)
	PCLK1=HCLK/APB1_Prescaler ;obtengo esta frec. llamando a HAL_RCC_GetPCLK1Freq()
	Ftim2=PCLK1/Prescaler_Timer_2
	PCLK1=HAL_RCC_GetPCLK1Freq(); // Frecuencia PCLK1					*/
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	20000044 	.word	0x20000044
 8000c14:	20000084 	.word	0x20000084

08000c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	__IO uint32_t CapturedValue;

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7f1b      	ldrb	r3, [r3, #28]
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d109      	bne.n	8000c3c <HAL_TIM_IC_CaptureCallback+0x24>
	{
		CapturedValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000c28:	210c      	movs	r1, #12
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fad8 	bl	80011e0 <HAL_TIM_ReadCapturedValue>
 8000c30:	4603      	mov	r3, r0
 8000c32:	60fb      	str	r3, [r7, #12]
		ICTimerHook(CapturedValue);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc26 	bl	8000488 <ICTimerHook>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&TimHandle);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM2_IRQHandler+0x10>)
 8000c4a:	f000 f925 	bl	8000e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000044 	.word	0x20000044

08000c58 <Error_Handler>:

void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
    while(1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x4>

08000c5e <Out_Init>:
 */
#include "Salidas.h"
/*----------------------------------------------------------------------------
  inicializa Port E/S
 *----------------------------------------------------------------------------*/
void Out_Init(GPIO_TypeDef  *GPIOx, uint32_t mask) {
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b088      	sub	sp, #32
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	// Configure pin(s)
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = mask;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;	// Pin(s) as Output
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;		// Frec.Max.
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;			// Pin(s) as No Pull
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);		// Initialize GPIO_InitStructure on GPIOx
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fdb8 	bl	80007f4 <HAL_GPIO_Init>
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <__NVIC_SetPriority>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ffc2 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <SysTick_Handler>:
#include "SysTick.h"
// ----------------------------------------------------------------------------
// ----- SysTick_Handler() ----------------------------------------------------
// ----------------------------------------------------------------------------
void SysTick_Handler (void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	HAL_IncTick();	//Incrementa Tick del sistema (usado por algunas funciones de HAL Driver)
 8000d28:	f7ff fc6c 	bl	8000604 <HAL_IncTick>
	SysTickHook (); // Función para colgarse de la interrupción del System Tick
 8000d2c:	f7ff fb18 	bl	8000360 <SysTickHook>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <SysTick_Init>:

void SysTick_Init(uint16_t Frec_Ticks_Hz){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
	SysTick_Config (SystemCoreClock / Frec_Ticks_Hz);
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SysTick_Init+0x24>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ffc9 	bl	8000ce0 <SysTick_Config>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000000 	.word	0x20000000

08000d5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e01d      	b.n	8000daa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d106      	bne.n	8000d88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f815 	bl	8000db2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3304      	adds	r3, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	f000 fa8c 	bl	80012b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	d841      	bhi.n	8000e5c <HAL_TIM_IC_Start_IT+0x94>
 8000dd8:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <HAL_TIM_IC_Start_IT+0x18>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000e15 	.word	0x08000e15
 8000de4:	08000e5d 	.word	0x08000e5d
 8000de8:	08000e5d 	.word	0x08000e5d
 8000dec:	08000e5d 	.word	0x08000e5d
 8000df0:	08000e27 	.word	0x08000e27
 8000df4:	08000e5d 	.word	0x08000e5d
 8000df8:	08000e5d 	.word	0x08000e5d
 8000dfc:	08000e5d 	.word	0x08000e5d
 8000e00:	08000e39 	.word	0x08000e39
 8000e04:	08000e5d 	.word	0x08000e5d
 8000e08:	08000e5d 	.word	0x08000e5d
 8000e0c:	08000e5d 	.word	0x08000e5d
 8000e10:	08000e4b 	.word	0x08000e4b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0202 	orr.w	r2, r2, #2
 8000e22:	60da      	str	r2, [r3, #12]
      break;
 8000e24:	e01b      	b.n	8000e5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 0204 	orr.w	r2, r2, #4
 8000e34:	60da      	str	r2, [r3, #12]
      break;
 8000e36:	e012      	b.n	8000e5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0208 	orr.w	r2, r2, #8
 8000e46:	60da      	str	r2, [r3, #12]
      break;
 8000e48:	e009      	b.n	8000e5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0210 	orr.w	r2, r2, #16
 8000e58:	60da      	str	r2, [r3, #12]
      break;
 8000e5a:	e000      	b.n	8000e5e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8000e5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	6839      	ldr	r1, [r7, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fbf0 	bl	800164c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d007      	beq.n	8000e8e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 0201 	orr.w	r2, r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d122      	bne.n	8000ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d11b      	bne.n	8000ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f06f 0202 	mvn.w	r2, #2
 8000ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fe9c 	bl	8000c18 <HAL_TIM_IC_CaptureCallback>
 8000ee0:	e005      	b.n	8000eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f9ca 	bl	800127c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f9d1 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d122      	bne.n	8000f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d11b      	bne.n	8000f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f06f 0204 	mvn.w	r2, #4
 8000f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fe72 	bl	8000c18 <HAL_TIM_IC_CaptureCallback>
 8000f34:	e005      	b.n	8000f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f9a0 	bl	800127c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f9a7 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d122      	bne.n	8000f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d11b      	bne.n	8000f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f06f 0208 	mvn.w	r2, #8
 8000f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2204      	movs	r2, #4
 8000f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fe48 	bl	8000c18 <HAL_TIM_IC_CaptureCallback>
 8000f88:	e005      	b.n	8000f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f97d 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	2b10      	cmp	r3, #16
 8000fa8:	d122      	bne.n	8000ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b10      	cmp	r3, #16
 8000fb6:	d11b      	bne.n	8000ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f06f 0210 	mvn.w	r2, #16
 8000fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fe1e 	bl	8000c18 <HAL_TIM_IC_CaptureCallback>
 8000fdc:	e005      	b.n	8000fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f94c 	bl	800127c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f953 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d10e      	bne.n	800101c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	d107      	bne.n	800101c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f06f 0201 	mvn.w	r2, #1
 8001014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f926 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	2b80      	cmp	r3, #128	; 0x80
 8001028:	d10e      	bne.n	8001048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001034:	2b80      	cmp	r3, #128	; 0x80
 8001036:	d107      	bne.n	8001048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fb31 	bl	80016aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	2b40      	cmp	r3, #64	; 0x40
 8001054:	d10e      	bne.n	8001074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001060:	2b40      	cmp	r3, #64	; 0x40
 8001062:	d107      	bne.n	8001074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800106c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f918 	bl	80012a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	2b20      	cmp	r3, #32
 8001080:	d10e      	bne.n	80010a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	2b20      	cmp	r3, #32
 800108e:	d107      	bne.n	80010a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f06f 0220 	mvn.w	r2, #32
 8001098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fafb 	bl	8001696 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80010be:	2302      	movs	r3, #2
 80010c0:	e08a      	b.n	80011d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2202      	movs	r2, #2
 80010ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d11b      	bne.n	8001110 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f000 f986 	bl	80013f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 020c 	bic.w	r2, r2, #12
 80010fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6999      	ldr	r1, [r3, #24]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	619a      	str	r2, [r3, #24]
 800110e:	e05a      	b.n	80011c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b04      	cmp	r3, #4
 8001114:	d11c      	bne.n	8001150 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	6819      	ldr	r1, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f000 f9db 	bl	80014e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001138:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6999      	ldr	r1, [r3, #24]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	021a      	lsls	r2, r3, #8
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	e03a      	b.n	80011c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d11b      	bne.n	800118e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f000 f9f8 	bl	800155a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69da      	ldr	r2, [r3, #28]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 020c 	bic.w	r2, r2, #12
 8001178:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	69d9      	ldr	r1, [r3, #28]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	61da      	str	r2, [r3, #28]
 800118c:	e01b      	b.n	80011c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	6819      	ldr	r1, [r3, #0]
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f000 fa18 	bl	80015d2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	69da      	ldr	r2, [r3, #28]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80011b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	69d9      	ldr	r1, [r3, #28]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	021a      	lsls	r2, r3, #8
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b0c      	cmp	r3, #12
 80011f2:	d831      	bhi.n	8001258 <HAL_TIM_ReadCapturedValue+0x78>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	08001231 	.word	0x08001231
 8001200:	08001259 	.word	0x08001259
 8001204:	08001259 	.word	0x08001259
 8001208:	08001259 	.word	0x08001259
 800120c:	0800123b 	.word	0x0800123b
 8001210:	08001259 	.word	0x08001259
 8001214:	08001259 	.word	0x08001259
 8001218:	08001259 	.word	0x08001259
 800121c:	08001245 	.word	0x08001245
 8001220:	08001259 	.word	0x08001259
 8001224:	08001259 	.word	0x08001259
 8001228:	08001259 	.word	0x08001259
 800122c:	0800124f 	.word	0x0800124f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001236:	60fb      	str	r3, [r7, #12]

      break;
 8001238:	e00f      	b.n	800125a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001240:	60fb      	str	r3, [r7, #12]

      break;
 8001242:	e00a      	b.n	800125a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124a:	60fb      	str	r3, [r7, #12]

      break;
 800124c:	e005      	b.n	800125a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	60fb      	str	r3, [r7, #12]

      break;
 8001256:	e000      	b.n	800125a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001258:	bf00      	nop
  }

  return tmpreg;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a40      	ldr	r2, [pc, #256]	; (80013cc <TIM_Base_SetConfig+0x114>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d013      	beq.n	80012f8 <TIM_Base_SetConfig+0x40>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d6:	d00f      	beq.n	80012f8 <TIM_Base_SetConfig+0x40>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3d      	ldr	r2, [pc, #244]	; (80013d0 <TIM_Base_SetConfig+0x118>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d00b      	beq.n	80012f8 <TIM_Base_SetConfig+0x40>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a3c      	ldr	r2, [pc, #240]	; (80013d4 <TIM_Base_SetConfig+0x11c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d007      	beq.n	80012f8 <TIM_Base_SetConfig+0x40>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a3b      	ldr	r2, [pc, #236]	; (80013d8 <TIM_Base_SetConfig+0x120>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d003      	beq.n	80012f8 <TIM_Base_SetConfig+0x40>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <TIM_Base_SetConfig+0x124>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d108      	bne.n	800130a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <TIM_Base_SetConfig+0x114>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001318:	d027      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <TIM_Base_SetConfig+0x118>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d023      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <TIM_Base_SetConfig+0x11c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <TIM_Base_SetConfig+0x120>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01b      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a29      	ldr	r2, [pc, #164]	; (80013dc <TIM_Base_SetConfig+0x124>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d017      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <TIM_Base_SetConfig+0x128>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <TIM_Base_SetConfig+0x12c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00f      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <TIM_Base_SetConfig+0x130>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00b      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <TIM_Base_SetConfig+0x134>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <TIM_Base_SetConfig+0x138>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d003      	beq.n	800136a <TIM_Base_SetConfig+0xb2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <TIM_Base_SetConfig+0x13c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d108      	bne.n	800137c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4313      	orrs	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <TIM_Base_SetConfig+0x114>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d003      	beq.n	80013b0 <TIM_Base_SetConfig+0xf8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <TIM_Base_SetConfig+0x124>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d103      	bne.n	80013b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	615a      	str	r2, [r3, #20]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40010000 	.word	0x40010000
 80013d0:	40000400 	.word	0x40000400
 80013d4:	40000800 	.word	0x40000800
 80013d8:	40000c00 	.word	0x40000c00
 80013dc:	40010400 	.word	0x40010400
 80013e0:	40014000 	.word	0x40014000
 80013e4:	40014400 	.word	0x40014400
 80013e8:	40014800 	.word	0x40014800
 80013ec:	40001800 	.word	0x40001800
 80013f0:	40001c00 	.word	0x40001c00
 80013f4:	40002000 	.word	0x40002000

080013f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	f023 0201 	bic.w	r2, r3, #1
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <TIM_TI1_SetConfig+0xcc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01b      	beq.n	800145e <TIM_TI1_SetConfig+0x66>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d017      	beq.n	800145e <TIM_TI1_SetConfig+0x66>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <TIM_TI1_SetConfig+0xd0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <TIM_TI1_SetConfig+0x66>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4a24      	ldr	r2, [pc, #144]	; (80014cc <TIM_TI1_SetConfig+0xd4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00f      	beq.n	800145e <TIM_TI1_SetConfig+0x66>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <TIM_TI1_SetConfig+0xd8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00b      	beq.n	800145e <TIM_TI1_SetConfig+0x66>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <TIM_TI1_SetConfig+0xdc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <TIM_TI1_SetConfig+0x66>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <TIM_TI1_SetConfig+0xe0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d003      	beq.n	800145e <TIM_TI1_SetConfig+0x66>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <TIM_TI1_SetConfig+0xe4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <TIM_TI1_SetConfig+0x6a>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <TIM_TI1_SetConfig+0x6c>
 8001462:	2300      	movs	r3, #0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e003      	b.n	8001482 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	b2db      	uxtb	r3, r3
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4313      	orrs	r3, r2
 8001494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f023 030a 	bic.w	r3, r3, #10
 800149c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 030a 	and.w	r3, r3, #10
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	621a      	str	r2, [r3, #32]
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40010000 	.word	0x40010000
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40000800 	.word	0x40000800
 80014d0:	40000c00 	.word	0x40000c00
 80014d4:	40010400 	.word	0x40010400
 80014d8:	40014000 	.word	0x40014000
 80014dc:	40001800 	.word	0x40001800

080014e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	f023 0210 	bic.w	r2, r3, #16
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800150c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800151e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	031b      	lsls	r3, r3, #12
 8001524:	b29b      	uxth	r3, r3
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001532:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	621a      	str	r2, [r3, #32]
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f023 0303 	bic.w	r3, r3, #3
 8001586:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001596:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80015aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	621a      	str	r2, [r3, #32]
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001610:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	031b      	lsls	r3, r3, #12
 8001616:	b29b      	uxth	r3, r3
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	4313      	orrs	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001624:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	031b      	lsls	r3, r3, #12
 800162a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	621a      	str	r2, [r3, #32]
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	2201      	movs	r2, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a1a      	ldr	r2, [r3, #32]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	621a      	str	r2, [r3, #32]
}
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <__libc_init_array>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4d0d      	ldr	r5, [pc, #52]	; (80016f8 <__libc_init_array+0x38>)
 80016c4:	4c0d      	ldr	r4, [pc, #52]	; (80016fc <__libc_init_array+0x3c>)
 80016c6:	1b64      	subs	r4, r4, r5
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	2600      	movs	r6, #0
 80016cc:	42a6      	cmp	r6, r4
 80016ce:	d109      	bne.n	80016e4 <__libc_init_array+0x24>
 80016d0:	4d0b      	ldr	r5, [pc, #44]	; (8001700 <__libc_init_array+0x40>)
 80016d2:	4c0c      	ldr	r4, [pc, #48]	; (8001704 <__libc_init_array+0x44>)
 80016d4:	f000 f82c 	bl	8001730 <_init>
 80016d8:	1b64      	subs	r4, r4, r5
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	2600      	movs	r6, #0
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d105      	bne.n	80016ee <__libc_init_array+0x2e>
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e8:	4798      	blx	r3
 80016ea:	3601      	adds	r6, #1
 80016ec:	e7ee      	b.n	80016cc <__libc_init_array+0xc>
 80016ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f2:	4798      	blx	r3
 80016f4:	3601      	adds	r6, #1
 80016f6:	e7f2      	b.n	80016de <__libc_init_array+0x1e>
 80016f8:	08001748 	.word	0x08001748
 80016fc:	08001748 	.word	0x08001748
 8001700:	08001748 	.word	0x08001748
 8001704:	0800174c 	.word	0x0800174c
 8001708:	0000eb00 	.word	0x0000eb00
 800170c:	00000900 	.word	0x00000900
 8001710:	00007300 	.word	0x00007300
 8001714:	00005b00 	.word	0x00005b00
 8001718:	00009900 	.word	0x00009900
 800171c:	0000da00 	.word	0x0000da00
 8001720:	0000ba00 	.word	0x0000ba00
 8001724:	00004900 	.word	0x00004900
 8001728:	0000fb00 	.word	0x0000fb00
 800172c:	0000d900 	.word	0x0000d900

08001730 <_init>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	bf00      	nop
 8001734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001736:	bc08      	pop	{r3}
 8001738:	469e      	mov	lr, r3
 800173a:	4770      	bx	lr

0800173c <_fini>:
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173e:	bf00      	nop
 8001740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001742:	bc08      	pop	{r3}
 8001744:	469e      	mov	lr, r3
 8001746:	4770      	bx	lr
