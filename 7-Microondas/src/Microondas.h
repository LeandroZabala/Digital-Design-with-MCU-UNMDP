/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef MICROONDAS_H_
#define MICROONDAS_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Microondas state machine.
*/
typedef struct Microondas Microondas;

/*!
* Forward declaration of the data structure for the MicroondasInternal interface scope.
*/
typedef struct MicroondasInternal MicroondasInternal;

/*!
* Forward declaration of the data structure for the MicroondasIfaceESW1 interface scope.
*/
typedef struct MicroondasIfaceESW1 MicroondasIfaceESW1;

/*!
* Forward declaration of the data structure for the MicroondasIfaceESW2 interface scope.
*/
typedef struct MicroondasIfaceESW2 MicroondasIfaceESW2;

/*!
* Forward declaration of the data structure for the MicroondasIfaceESW3 interface scope.
*/
typedef struct MicroondasIfaceESW3 MicroondasIfaceESW3;

/*!
* Forward declaration of the data structure for the MicroondasTimeEvents interface scope.
*/
typedef struct MicroondasTimeEvents MicroondasTimeEvents;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'Microondas'.
*/

/*! Define number of states in the state enum */
#define MICROONDAS_STATE_COUNT 36

/*! Define dimension of the state configuration vector for orthogonal states. */
#define MICROONDAS_MAX_ORTHOGONAL_STATES 7
/*! Define maximum number of time events that can be active at once */
#define MICROONDAS_MAX_PARALLEL_TIME_EVENTS 9

/*! Define indices of states in the StateConfVector */
#define SCVI_MICROONDAS_RH_CONTROL 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_HORONO_REPOSO 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_AJUSTE_RELOJ 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_VENTANA2S 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_PROGRAMACION_HORNO 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_HORNO_ENCENDIDO 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_HORNO_ENCENDIDO_R1_MENOSSEG 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_HORNO_ENCENDIDO_R1_MENOSMIN 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_HORNO_ENCENDIDO_R1_DEMORADESALIDA 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_HORNO_ENCENDIDO_R1_FIN 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_EN_PAUSA 0
#define SCVI_MICROONDAS_RH_CONTROL_HORNO_RESET 0
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO 1
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_R1_DISPLAY_APAGADO 1
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_R1_DISPLAY_ENCENDIDO 1
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_R1_DISPLAY_ENCENDIDO_R1_D2 1
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_R1_DISPLAY_ENCENDIDO_R1_D3 1
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_R1_DISPLAY_ENCENDIDO_R1_D0 1
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_R1_DISPLAY_ENCENDIDO_R1_D1 1
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_I_PRESENTO_RELOJ 2
#define SCVI_MICROONDAS_RH_CONTROL_RDSP_MULTIPLEXADO_I_PRESENTO_T_COCCION 2
#define SCVI_MICROONDAS_RS_SWITCHES 3
#define SCVI_MICROONDAS_RS_SWITCHES_SW1_ESPERANDO 3
#define SCVI_MICROONDAS_RS_SWITCHES_SW1_ANTIRREBOTE 3
#define SCVI_MICROONDAS_RS_SWITCHES_SW1_VERIFICO 3
#define SCVI_MICROONDAS_RS_SWITCHES_SW1_TRAMPA 3
#define SCVI_MICROONDAS_RS_SWITCHES_SW2_ESPERANDO 4
#define SCVI_MICROONDAS_RS_SWITCHES_SW2_ANTIRREBOTE 4
#define SCVI_MICROONDAS_RS_SWITCHES_SW2_VERIFICO 4
#define SCVI_MICROONDAS_RS_SWITCHES_SW2_TRAMPA 4
#define SCVI_MICROONDAS_RS_SWITCHES_SW3_ESPERANDO 5
#define SCVI_MICROONDAS_RS_SWITCHES_SW3_ANTIRREBOTE 5
#define SCVI_MICROONDAS_RS_SWITCHES_SW3_VERIFICO 5
#define SCVI_MICROONDAS_RS_SWITCHES_SW3_TRAMPA 5
#define SCVI_MICROONDAS_RR_RELOJ 6
#define SCVI_MICROONDAS_RR_RELOJ_DETENIDO 6

/*! Enumeration of all states */ 
typedef enum
{
	Microondas_last_state,
	Microondas_RH_CONTROL,
	Microondas_RH_CONTROL_HORNO_Horono_reposo,
	Microondas_RH_CONTROL_HORNO_Ajuste_reloj,
	Microondas_RH_CONTROL_HORNO_Ventana2s,
	Microondas_RH_CONTROL_HORNO_Programacion_horno,
	Microondas_RH_CONTROL_HORNO_Horno_encendido,
	Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg,
	Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin,
	Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida,
	Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_fin,
	Microondas_RH_CONTROL_HORNO_En_pausa,
	Microondas_RH_CONTROL_HORNO_Reset,
	Microondas_RH_CONTROL_RDSP_multiplexado,
	Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado,
	Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido,
	Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2,
	Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3,
	Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0,
	Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1,
	Microondas_RH_CONTROL_RDSP_multiplexado_i_presento_reloj,
	Microondas_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion,
	Microondas_RS_SWITCHES,
	Microondas_RS_SWITCHES_SW1_esperando,
	Microondas_RS_SWITCHES_SW1_antirrebote,
	Microondas_RS_SWITCHES_SW1_verifico,
	Microondas_RS_SWITCHES_SW1_trampa,
	Microondas_RS_SWITCHES_SW2_esperando,
	Microondas_RS_SWITCHES_SW2_antirrebote,
	Microondas_RS_SWITCHES_SW2_verifico,
	Microondas_RS_SWITCHES_SW2_trampa,
	Microondas_RS_SWITCHES_SW3_esperando,
	Microondas_RS_SWITCHES_SW3_antirrebote,
	Microondas_RS_SWITCHES_SW3_verifico,
	Microondas_RS_SWITCHES_SW3_trampa,
	Microondas_RR_Reloj,
	Microondas_RR_Reloj_detenido
} MicroondasStates;






/*! Type declaration of the data structure for the MicroondasInternal interface scope. */
struct MicroondasInternal
{
	sc_boolean sSW1_raised;
	sc_boolean sSW2_raised;
	sc_boolean sSW3_raised;
	sc_boolean sDISPARO_raised;
	sc_boolean smuestroreloj_raised;
	sc_boolean smuestroTcoccion_raised;
	uint8_t conta;
	uint8_t conta2;
	uint8_t contahr;
	uint8_t contamin;
	uint8_t flag_ajuste_reloj;
	uint8_t mincoc;
	uint8_t segcoc;
	uint8_t vd3;
	uint8_t vd2;
	uint8_t vd1;
	uint8_t vd0;
	uint8_t numero;
	uint8_t vdigito;
	uint8_t vdp;
};



/*! Type declaration of the data structure for the MicroondasIfaceESW1 interface scope. */
struct MicroondasIfaceESW1
{
	sc_boolean press_raised;
	sc_boolean nopress_raised;
};



/*! Type declaration of the data structure for the MicroondasIfaceESW2 interface scope. */
struct MicroondasIfaceESW2
{
	sc_boolean press_raised;
	sc_boolean nopress_raised;
};



/*! Type declaration of the data structure for the MicroondasIfaceESW3 interface scope. */
struct MicroondasIfaceESW3
{
	sc_boolean press_raised;
	sc_boolean nopress_raised;
};



/*! Type declaration of the data structure for the MicroondasTimeEvents interface scope. */
struct MicroondasTimeEvents
{
	sc_boolean microondas_RH_CONTROL_HORNO_Ajuste_reloj_tev0_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_Ventana2s_tev0_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_Programacion_horno_tev0_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_Programacion_horno_tev1_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_Horno_encendido_tev0_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_Horno_encendido_tev1_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_tev0_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_tev0_raised;
	sc_boolean microondas_RH_CONTROL_HORNO_En_pausa_tev0_raised;
	sc_boolean microondas_RH_CONTROL_RDSP_multiplexado_tev0_raised;
	sc_boolean microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_tev0_raised;
	sc_boolean microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_tev0_raised;
	sc_boolean microondas_RS_SWITCHES_SW1_antirrebote_tev0_raised;
	sc_boolean microondas_RS_SWITCHES_SW2_antirrebote_tev0_raised;
	sc_boolean microondas_RS_SWITCHES_SW3_antirrebote_tev0_raised;
	sc_boolean microondas_RR_Reloj_tev0_raised;
};





typedef struct MicroondasInternalEvBuf MicroondasInternalEvBuf;
struct MicroondasInternalEvBuf {
	sc_boolean sSW1_raised;
	sc_boolean sSW2_raised;
	sc_boolean sSW3_raised;
	sc_boolean sDISPARO_raised;
	sc_boolean smuestroreloj_raised;
	sc_boolean smuestroTcoccion_raised;
};

typedef struct MicroondasIfaceESW1EvBuf MicroondasIfaceESW1EvBuf;
struct MicroondasIfaceESW1EvBuf {
	sc_boolean press_raised;
	sc_boolean nopress_raised;
};

typedef struct MicroondasIfaceESW2EvBuf MicroondasIfaceESW2EvBuf;
struct MicroondasIfaceESW2EvBuf {
	sc_boolean press_raised;
	sc_boolean nopress_raised;
};

typedef struct MicroondasIfaceESW3EvBuf MicroondasIfaceESW3EvBuf;
struct MicroondasIfaceESW3EvBuf {
	sc_boolean press_raised;
	sc_boolean nopress_raised;
};

typedef struct MicroondasTimeEventsEvBuf MicroondasTimeEventsEvBuf;
struct MicroondasTimeEventsEvBuf {
	sc_boolean Microondas_RH_CONTROL_HORNO_Ajuste_reloj_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_Ventana2s_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_1_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_1_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_HORNO_En_pausa_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_RDSP_multiplexado_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_time_event_0_raised;
	sc_boolean Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_time_event_0_raised;
	sc_boolean Microondas_RS_SWITCHES_SW1_antirrebote_time_event_0_raised;
	sc_boolean Microondas_RS_SWITCHES_SW2_antirrebote_time_event_0_raised;
	sc_boolean Microondas_RS_SWITCHES_SW3_antirrebote_time_event_0_raised;
	sc_boolean Microondas_RR_Reloj_time_event_0_raised;
};

typedef struct MicroondasEvBuf MicroondasEvBuf;
struct MicroondasEvBuf {
	MicroondasInternalEvBuf internal;
	MicroondasIfaceESW1EvBuf ifaceESW1;
	MicroondasIfaceESW2EvBuf ifaceESW2;
	MicroondasIfaceESW3EvBuf ifaceESW3;
	MicroondasTimeEventsEvBuf timeEvents;
};


/*! 
 * Type declaration of the data structure for the Microondas state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Microondas
{
	MicroondasStates stateConfVector[MICROONDAS_MAX_ORTHOGONAL_STATES];
	MicroondasInternal internal;
	MicroondasIfaceESW1 ifaceESW1;
	MicroondasIfaceESW2 ifaceESW2;
	MicroondasIfaceESW3 ifaceESW3;
	MicroondasTimeEvents timeEvents;
	sc_boolean completed;
	sc_boolean doCompletion;
	MicroondasEvBuf current;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
};



/*! Initializes the Microondas state machine data structures. Must be called before first usage.*/
extern void microondas_init(Microondas* handle);


/*! Performs a 'run to completion' step. */
extern void microondas_run_cycle(Microondas* handle);

/*! Activates the state machine. */
extern void microondas_enter(Microondas* handle);

/*! Deactivates the state machine. */
extern void microondas_exit(Microondas* handle);



/*! Raises a time event. */
extern void microondas_raise_time_event(Microondas* handle, sc_eventid evid);

/*! Raises the in event 'press' that is defined in the interface scope 'eSW1'. */ 
extern void microondas_eSW1_raise_press(Microondas* handle);
/*! Raises the in event 'nopress' that is defined in the interface scope 'eSW1'. */ 
extern void microondas_eSW1_raise_nopress(Microondas* handle);
/*! Raises the in event 'press' that is defined in the interface scope 'eSW2'. */ 
extern void microondas_eSW2_raise_press(Microondas* handle);
/*! Raises the in event 'nopress' that is defined in the interface scope 'eSW2'. */ 
extern void microondas_eSW2_raise_nopress(Microondas* handle);
/*! Raises the in event 'press' that is defined in the interface scope 'eSW3'. */ 
extern void microondas_eSW3_raise_press(Microondas* handle);
/*! Raises the in event 'nopress' that is defined in the interface scope 'eSW3'. */ 
extern void microondas_eSW3_raise_nopress(Microondas* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean microondas_is_active(const Microondas* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean microondas_is_final(const Microondas* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean microondas_is_state_active(const Microondas* handle, MicroondasStates state);


#ifdef __cplusplus
}
#endif 

#endif /* MICROONDAS_H_ */
