
7-Microondas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000443c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000000c  20000000  080045cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001ec  2000000c  080045d8  0002000c  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200001f8  080047c4  0002000c  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000ac18  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00001788  00000000  00000000  0002ac54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000e98  00000000  00000000  0002c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000dc0  00000000  00000000  0002d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000257bc  00000000  00000000  0002e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000d8c4  00000000  00000000  000537f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000e931e  00000000  00000000  000610b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  0014a3d6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003dd8  00000000  00000000  0014a42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045ac 	.word	0x080045ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080045ac 	.word	0x080045ac

080001c8 <microondas_init>:
const uint16_t MICROONDAS_MICROONDASINTERNAL_NOTA132 = 7566;
const uint16_t MICROONDAS_MICROONDASINTERNAL_NOTA528 = 1893;


void microondas_init(Microondas* handle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	sc_integer i;
	
	for (i = 0; i < MICROONDAS_MAX_ORTHOGONAL_STATES; ++i)
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e007      	b.n	80001e6 <microondas_init+0x1e>
	{
		handle->stateConfVector[i] = Microondas_last_state;
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	4413      	add	r3, r2
 80001dc:	2200      	movs	r2, #0
 80001de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MICROONDAS_MAX_ORTHOGONAL_STATES; ++i)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	3301      	adds	r3, #1
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	2b06      	cmp	r3, #6
 80001ea:	ddf4      	ble.n	80001d6 <microondas_init+0xe>
	}
	
				
	clear_in_events(handle);
 80001ec:	6878      	ldr	r0, [r7, #4]
 80001ee:	f000 f9c5 	bl	800057c <clear_in_events>
	clear_internal_events(handle);
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 fab1 	bl	800075a <clear_internal_events>
	swap_in_events(handle);
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f000 f8e3 	bl	80003c4 <swap_in_events>
	swap_internal_events(handle);
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f000 fa19 	bl	8000636 <swap_internal_events>
	
	
	/* Default init sequence for statechart Microondas */
	handle->internal.conta = 0;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	735a      	strb	r2, [r3, #13]
	handle->internal.conta2 = 0;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2200      	movs	r2, #0
 800020e:	739a      	strb	r2, [r3, #14]
	handle->internal.contahr = 0;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	73da      	strb	r2, [r3, #15]
	handle->internal.contamin = 0;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2200      	movs	r2, #0
 800021a:	741a      	strb	r2, [r3, #16]
	handle->internal.flag_ajuste_reloj = 0;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	745a      	strb	r2, [r3, #17]
	handle->internal.mincoc = 0;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2200      	movs	r2, #0
 8000226:	749a      	strb	r2, [r3, #18]
	handle->internal.segcoc = 0;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	74da      	strb	r2, [r3, #19]
	handle->internal.vd3 = 0;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	751a      	strb	r2, [r3, #20]
	handle->internal.vd2 = 0;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	755a      	strb	r2, [r3, #21]
	handle->internal.vd1 = 0;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2200      	movs	r2, #0
 800023e:	759a      	strb	r2, [r3, #22]
	handle->internal.vd0 = 0;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	75da      	strb	r2, [r3, #23]
	handle->internal.numero = 0;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	761a      	strb	r2, [r3, #24]
	handle->internal.vdigito = 0;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	765a      	strb	r2, [r3, #25]
	handle->internal.vdp = 0;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	769a      	strb	r2, [r3, #26]
	
	handle->isExecuting = bool_false;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <microondas_run_cycle>:

void microondas_run_cycle(Microondas* handle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	/* Performs a 'run to completion' step. */
	if (handle->isExecuting == bool_true)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000276:	2b00      	cmp	r3, #0
 8000278:	d149      	bne.n	800030e <microondas_run_cycle+0xa6>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2201      	movs	r2, #1
 800027e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	swap_in_events(handle);
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f000 f89e 	bl	80003c4 <swap_in_events>
	do
	{ 
		handle->doCompletion = bool_false;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		do
		{ 
			if (handle->completed == bool_true)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <microondas_run_cycle+0x3a>
			{ 
				handle->doCompletion = bool_true;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2201      	movs	r2, #1
 800029e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			} 
			handle->completed = bool_false;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2200      	movs	r2, #0
 80002a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			micro_step(handle);
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 fa72 	bl	8000794 <micro_step>
			handle->doCompletion = bool_false;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		} while (handle->completed == bool_true);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1e6      	bne.n	8000290 <microondas_run_cycle+0x28>
		swap_internal_events(handle);
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f000 f9b7 	bl	8000636 <swap_internal_events>
	} while ((((((handle->current.internal.sSW1_raised == bool_true) || (handle->current.internal.sSW2_raised == bool_true)) || (handle->current.internal.sSW3_raised == bool_true)) || (handle->current.internal.sDISPARO_raised == bool_true)) || (handle->current.internal.smuestroreloj_raised == bool_true)) || (handle->current.internal.smuestroTcoccion_raised == bool_true));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1da      	bne.n	8000288 <microondas_run_cycle+0x20>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1d5      	bne.n	8000288 <microondas_run_cycle+0x20>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1d0      	bne.n	8000288 <microondas_run_cycle+0x20>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1cb      	bne.n	8000288 <microondas_run_cycle+0x20>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1c6      	bne.n	8000288 <microondas_run_cycle+0x20>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1c1      	bne.n	8000288 <microondas_run_cycle+0x20>
	handle->isExecuting = bool_false;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2200      	movs	r2, #0
 8000308:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 800030c:	e000      	b.n	8000310 <microondas_run_cycle+0xa8>
		return;
 800030e:	bf00      	nop
}
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <microondas_enter>:

void microondas_enter(Microondas* handle)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b082      	sub	sp, #8
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
	/* Activates the state machine. */
	if (handle->isExecuting == bool_true)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000324:	2b00      	cmp	r3, #0
 8000326:	d12e      	bne.n	8000386 <microondas_enter+0x70>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2201      	movs	r2, #1
 800032c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	/* Default enter sequence for statechart Microondas */
	enseq_RH_default(handle);
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 f90f 	bl	8001554 <enseq_RH_default>
	enseq_RS_default(handle);
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f001 f959 	bl	80015ee <enseq_RS_default>
	enseq_RR_default(handle);
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f001 f982 	bl	8001646 <enseq_RR_default>
	handle->doCompletion = bool_false;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	do
	{ 
		if (handle->completed == bool_true)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000350:	2b00      	cmp	r3, #0
 8000352:	d003      	beq.n	800035c <microondas_enter+0x46>
		{ 
			handle->doCompletion = bool_true;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2201      	movs	r2, #1
 8000358:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		} 
		handle->completed = bool_false;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		micro_step(handle);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f000 fa15 	bl	8000794 <micro_step>
		handle->doCompletion = bool_false;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2200      	movs	r2, #0
 800036e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	} while (handle->completed == bool_true);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1e6      	bne.n	800034a <microondas_enter+0x34>
	handle->isExecuting = bool_false;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000384:	e000      	b.n	8000388 <microondas_enter+0x72>
		return;
 8000386:	bf00      	nop
}
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <microondas_raise_time_event>:
	SC_UNUSED(handle);
	return bool_false;
}

void microondas_raise_time_event(Microondas* handle, sc_eventid evid)
{
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	6039      	str	r1, [r7, #0]
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3321      	adds	r3, #33	; 0x21
 800039c:	461a      	mov	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	dc09      	bgt.n	80003b8 <microondas_raise_time_event+0x2a>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(MicroondasTimeEvents))
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3321      	adds	r3, #33	; 0x21
 80003a8:	f103 0210 	add.w	r2, r3, #16
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d902      	bls.n	80003b8 <microondas_raise_time_event+0x2a>
		{
		*(sc_boolean*)evid = bool_true;
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	2201      	movs	r2, #1
 80003b6:	701a      	strb	r2, [r3, #0]
	}
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <swap_in_events>:
	}
	return result;
}

static void swap_in_events(Microondas* handle)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	handle->current.ifaceESW1.press_raised = handle->ifaceESW1.press_raised;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	7eda      	ldrb	r2, [r3, #27]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	handle->ifaceESW1.press_raised = bool_false;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	76da      	strb	r2, [r3, #27]
	handle->current.ifaceESW1.nopress_raised = handle->ifaceESW1.nopress_raised;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7f1a      	ldrb	r2, [r3, #28]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	handle->ifaceESW1.nopress_raised = bool_false;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
	handle->current.ifaceESW2.press_raised = handle->ifaceESW2.press_raised;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7f5a      	ldrb	r2, [r3, #29]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	handle->ifaceESW2.press_raised = bool_false;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2200      	movs	r2, #0
 80003fa:	775a      	strb	r2, [r3, #29]
	handle->current.ifaceESW2.nopress_raised = handle->ifaceESW2.nopress_raised;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7f9a      	ldrb	r2, [r3, #30]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	handle->ifaceESW2.nopress_raised = bool_false;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	779a      	strb	r2, [r3, #30]
	handle->current.ifaceESW3.press_raised = handle->ifaceESW3.press_raised;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7fda      	ldrb	r2, [r3, #31]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	handle->ifaceESW3.press_raised = bool_false;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2200      	movs	r2, #0
 800041a:	77da      	strb	r2, [r3, #31]
	handle->current.ifaceESW3.nopress_raised = handle->ifaceESW3.nopress_raised;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	handle->ifaceESW3.nopress_raised = bool_false;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2200      	movs	r2, #0
 800042c:	f883 2020 	strb.w	r2, [r3, #32]
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Ajuste_reloj_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Ajuste_reloj_tev0_raised;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Ajuste_reloj_tev0_raised = bool_false;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2200      	movs	r2, #0
 8000440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Ventana2s_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Ventana2s_tev0_raised;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Ventana2s_tev0_raised = bool_false;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2200      	movs	r2, #0
 8000454:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev0_raised;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev0_raised = bool_false;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2200      	movs	r2, #0
 8000468:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_1_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev1_raised;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev1_raised = bool_false;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2200      	movs	r2, #0
 800047c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev0_raised;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev0_raised = bool_false;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2200      	movs	r2, #0
 8000490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_1_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev1_raised;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev1_raised = bool_false;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_tev0_raised;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_tev0_raised = bool_false;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_tev0_raised;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_tev0_raised = bool_false;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_En_pausa_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_HORNO_En_pausa_tev0_raised;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	handle->timeEvents.microondas_RH_CONTROL_HORNO_En_pausa_tev0_raised = bool_false;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_tev0_raised;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_tev0_raised = bool_false;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_tev0_raised;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_tev0_raised = bool_false;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_time_event_0_raised = handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_tev0_raised;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_tev0_raised = bool_false;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	handle->current.timeEvents.Microondas_RS_SWITCHES_SW1_antirrebote_time_event_0_raised = handle->timeEvents.microondas_RS_SWITCHES_SW1_antirrebote_tev0_raised;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	handle->timeEvents.microondas_RS_SWITCHES_SW1_antirrebote_tev0_raised = bool_false;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	handle->current.timeEvents.Microondas_RS_SWITCHES_SW2_antirrebote_time_event_0_raised = handle->timeEvents.microondas_RS_SWITCHES_SW2_antirrebote_tev0_raised;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	handle->timeEvents.microondas_RS_SWITCHES_SW2_antirrebote_tev0_raised = bool_false;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	handle->current.timeEvents.Microondas_RS_SWITCHES_SW3_antirrebote_time_event_0_raised = handle->timeEvents.microondas_RS_SWITCHES_SW3_antirrebote_tev0_raised;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	handle->timeEvents.microondas_RS_SWITCHES_SW3_antirrebote_tev0_raised = bool_false;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	handle->current.timeEvents.Microondas_RR_Reloj_time_event_0_raised = handle->timeEvents.microondas_RR_Reloj_tev0_raised;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	handle->timeEvents.microondas_RR_Reloj_tev0_raised = bool_false;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <clear_in_events>:

static void clear_in_events(Microondas* handle)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	handle->ifaceESW1.press_raised = bool_false;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	76da      	strb	r2, [r3, #27]
	handle->ifaceESW1.nopress_raised = bool_false;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	771a      	strb	r2, [r3, #28]
	handle->ifaceESW2.press_raised = bool_false;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	775a      	strb	r2, [r3, #29]
	handle->ifaceESW2.nopress_raised = bool_false;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	779a      	strb	r2, [r3, #30]
	handle->ifaceESW3.press_raised = bool_false;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	77da      	strb	r2, [r3, #31]
	handle->ifaceESW3.nopress_raised = bool_false;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Ajuste_reloj_tev0_raised = bool_false;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Ventana2s_tev0_raised = bool_false;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev0_raised = bool_false;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev1_raised = bool_false;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev0_raised = bool_false;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev1_raised = bool_false;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_tev0_raised = bool_false;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_tev0_raised = bool_false;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	handle->timeEvents.microondas_RH_CONTROL_HORNO_En_pausa_tev0_raised = bool_false;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_tev0_raised = bool_false;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_tev0_raised = bool_false;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_tev0_raised = bool_false;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	handle->timeEvents.microondas_RS_SWITCHES_SW1_antirrebote_tev0_raised = bool_false;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	handle->timeEvents.microondas_RS_SWITCHES_SW2_antirrebote_tev0_raised = bool_false;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	handle->timeEvents.microondas_RS_SWITCHES_SW3_antirrebote_tev0_raised = bool_false;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	handle->timeEvents.microondas_RR_Reloj_tev0_raised = bool_false;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <swap_internal_events>:

static void swap_internal_events(Microondas* handle)
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	/* When processing internal events all incoming events are processed and must be cleared from current buffer. */
	handle->current.ifaceESW1.press_raised = bool_false;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	handle->current.ifaceESW1.nopress_raised = bool_false;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	handle->current.ifaceESW2.press_raised = bool_false;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	handle->current.ifaceESW2.nopress_raised = bool_false;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	handle->current.ifaceESW3.press_raised = bool_false;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	handle->current.ifaceESW3.nopress_raised = bool_false;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Ajuste_reloj_time_event_0_raised = bool_false;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Ventana2s_time_event_0_raised = bool_false;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_0_raised = bool_false;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_1_raised = bool_false;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_0_raised = bool_false;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_1_raised = bool_false;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_time_event_0_raised = bool_false;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_time_event_0_raised = bool_false;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_En_pausa_time_event_0_raised = bool_false;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_time_event_0_raised = bool_false;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_time_event_0_raised = bool_false;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_time_event_0_raised = bool_false;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	handle->current.timeEvents.Microondas_RS_SWITCHES_SW1_antirrebote_time_event_0_raised = bool_false;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	handle->current.timeEvents.Microondas_RS_SWITCHES_SW2_antirrebote_time_event_0_raised = bool_false;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	handle->current.timeEvents.Microondas_RS_SWITCHES_SW3_antirrebote_time_event_0_raised = bool_false;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	handle->current.timeEvents.Microondas_RR_Reloj_time_event_0_raised = bool_false;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	/* Swap all internal events. */
	handle->current.internal.sSW1_raised = handle->internal.sSW1_raised;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	79da      	ldrb	r2, [r3, #7]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	handle->internal.sSW1_raised = bool_false;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	71da      	strb	r2, [r3, #7]
	handle->current.internal.sSW2_raised = handle->internal.sSW2_raised;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a1a      	ldrb	r2, [r3, #8]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	handle->internal.sSW2_raised = bool_false;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	721a      	strb	r2, [r3, #8]
	handle->current.internal.sSW3_raised = handle->internal.sSW3_raised;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7a5a      	ldrb	r2, [r3, #9]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	handle->internal.sSW3_raised = bool_false;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	725a      	strb	r2, [r3, #9]
	handle->current.internal.sDISPARO_raised = handle->internal.sDISPARO_raised;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7a9a      	ldrb	r2, [r3, #10]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	handle->internal.sDISPARO_raised = bool_false;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	729a      	strb	r2, [r3, #10]
	handle->current.internal.smuestroreloj_raised = handle->internal.smuestroreloj_raised;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7ada      	ldrb	r2, [r3, #11]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	handle->internal.smuestroreloj_raised = bool_false;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	72da      	strb	r2, [r3, #11]
	handle->current.internal.smuestroTcoccion_raised = handle->internal.smuestroTcoccion_raised;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7b1a      	ldrb	r2, [r3, #12]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	handle->internal.smuestroTcoccion_raised = bool_false;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	731a      	strb	r2, [r3, #12]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <clear_internal_events>:

static void clear_internal_events(Microondas* handle)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	handle->internal.sSW1_raised = bool_false;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	71da      	strb	r2, [r3, #7]
	handle->internal.sSW2_raised = bool_false;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	721a      	strb	r2, [r3, #8]
	handle->internal.sSW3_raised = bool_false;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	725a      	strb	r2, [r3, #9]
	handle->internal.sDISPARO_raised = bool_false;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	729a      	strb	r2, [r3, #10]
	handle->internal.smuestroreloj_raised = bool_false;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	72da      	strb	r2, [r3, #11]
	handle->internal.smuestroTcoccion_raised = bool_false;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	731a      	strb	r2, [r3, #12]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <micro_step>:

static void micro_step(Microondas* handle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 			sc_integer transitioned = -1;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	60fb      	str	r3, [r7, #12]
	handle->stateConfVectorPosition = 0;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	651a      	str	r2, [r3, #80]	; 0x50
	switch(handle->stateConfVector[ 0 ])
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b02      	subs	r3, #2
 80007ae:	2b0a      	cmp	r3, #10
 80007b0:	d854      	bhi.n	800085c <micro_step+0xc8>
 80007b2:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <micro_step+0x24>)
 80007b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b8:	080007e5 	.word	0x080007e5
 80007bc:	080007f1 	.word	0x080007f1
 80007c0:	080007fd 	.word	0x080007fd
 80007c4:	08000809 	.word	0x08000809
 80007c8:	0800085d 	.word	0x0800085d
 80007cc:	08000815 	.word	0x08000815
 80007d0:	08000821 	.word	0x08000821
 80007d4:	0800082d 	.word	0x0800082d
 80007d8:	08000839 	.word	0x08000839
 80007dc:	08000845 	.word	0x08000845
 80007e0:	08000851 	.word	0x08000851
	{
		case Microondas_RH_CONTROL_HORNO_Horono_reposo :
		{
			transitioned = RH_CONTROL_HORNO_Horono_reposo_react(handle, transitioned);
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f001 fa4a 	bl	8001c80 <RH_CONTROL_HORNO_Horono_reposo_react>
 80007ec:	60f8      	str	r0, [r7, #12]
			break;
 80007ee:	e036      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Ajuste_reloj :
		{
			transitioned = RH_CONTROL_HORNO_Ajuste_reloj_react(handle, transitioned);
 80007f0:	68f9      	ldr	r1, [r7, #12]
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f001 fa7b 	bl	8001cee <RH_CONTROL_HORNO_Ajuste_reloj_react>
 80007f8:	60f8      	str	r0, [r7, #12]
			break;
 80007fa:	e030      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Ventana2s :
		{
			transitioned = RH_CONTROL_HORNO_Ventana2s_react(handle, transitioned);
 80007fc:	68f9      	ldr	r1, [r7, #12]
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f001 fadc 	bl	8001dbc <RH_CONTROL_HORNO_Ventana2s_react>
 8000804:	60f8      	str	r0, [r7, #12]
			break;
 8000806:	e02a      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Programacion_horno :
		{
			transitioned = RH_CONTROL_HORNO_Programacion_horno_react(handle, transitioned);
 8000808:	68f9      	ldr	r1, [r7, #12]
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f001 fb11 	bl	8001e32 <RH_CONTROL_HORNO_Programacion_horno_react>
 8000810:	60f8      	str	r0, [r7, #12]
			break;
 8000812:	e024      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg :
		{
			transitioned = RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react(handle, transitioned);
 8000814:	68f9      	ldr	r1, [r7, #12]
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f001 fbcd 	bl	8001fb6 <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react>
 800081c:	60f8      	str	r0, [r7, #12]
			break;
 800081e:	e01e      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin :
		{
			transitioned = RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_react(handle, transitioned);
 8000820:	68f9      	ldr	r1, [r7, #12]
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f001 fc1b 	bl	800205e <RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_react>
 8000828:	60f8      	str	r0, [r7, #12]
			break;
 800082a:	e018      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida :
		{
			transitioned = RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react(handle, transitioned);
 800082c:	68f9      	ldr	r1, [r7, #12]
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f001 fc43 	bl	80020ba <RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react>
 8000834:	60f8      	str	r0, [r7, #12]
			break;
 8000836:	e012      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_fin :
		{
			transitioned = RH_CONTROL_HORNO_Horno_encendido_r1_fin_react(handle, transitioned);
 8000838:	68f9      	ldr	r1, [r7, #12]
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f001 fc72 	bl	8002124 <RH_CONTROL_HORNO_Horno_encendido_r1_fin_react>
 8000840:	60f8      	str	r0, [r7, #12]
			break;
 8000842:	e00c      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_En_pausa :
		{
			transitioned = RH_CONTROL_HORNO_En_pausa_react(handle, transitioned);
 8000844:	68f9      	ldr	r1, [r7, #12]
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f001 fc96 	bl	8002178 <RH_CONTROL_HORNO_En_pausa_react>
 800084c:	60f8      	str	r0, [r7, #12]
			break;
 800084e:	e006      	b.n	800085e <micro_step+0xca>
		}
		case Microondas_RH_CONTROL_HORNO_Reset :
		{
			transitioned = RH_CONTROL_HORNO_Reset_react(handle, transitioned);
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f001 fcc6 	bl	80021e4 <RH_CONTROL_HORNO_Reset_react>
 8000858:	60f8      	str	r0, [r7, #12]
			break;
 800085a:	e000      	b.n	800085e <micro_step+0xca>
		}
		default: 
			/* do nothing */
			break;
 800085c:	bf00      	nop
	}
	if ((handle->stateConfVectorPosition) < (1))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000862:	2b00      	cmp	r3, #0
 8000864:	dc32      	bgt.n	80008cc <micro_step+0x138>
	{ 
		switch(handle->stateConfVector[ 1 ])
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	3b0e      	subs	r3, #14
 800086c:	2b05      	cmp	r3, #5
 800086e:	d82f      	bhi.n	80008d0 <micro_step+0x13c>
 8000870:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <micro_step+0xe4>)
 8000872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000876:	bf00      	nop
 8000878:	08000891 	.word	0x08000891
 800087c:	080008d1 	.word	0x080008d1
 8000880:	0800089d 	.word	0x0800089d
 8000884:	080008a9 	.word	0x080008a9
 8000888:	080008b5 	.word	0x080008b5
 800088c:	080008c1 	.word	0x080008c1
		{
			case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado :
			{
				transitioned = RH_CONTROL_RDSP_multiplexado_r1_display_apagado_react(handle, transitioned);
 8000890:	68f9      	ldr	r1, [r7, #12]
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f001 fceb 	bl	800226e <RH_CONTROL_RDSP_multiplexado_r1_display_apagado_react>
 8000898:	60f8      	str	r0, [r7, #12]
				break;
 800089a:	e01a      	b.n	80008d2 <micro_step+0x13e>
			}
			case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2 :
			{
				transitioned = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react(handle, transitioned);
 800089c:	68f9      	ldr	r1, [r7, #12]
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f001 fd43 	bl	800232a <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react>
 80008a4:	60f8      	str	r0, [r7, #12]
				break;
 80008a6:	e014      	b.n	80008d2 <micro_step+0x13e>
			}
			case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3 :
			{
				transitioned = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react(handle, transitioned);
 80008a8:	68f9      	ldr	r1, [r7, #12]
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f001 fd6e 	bl	800238c <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react>
 80008b0:	60f8      	str	r0, [r7, #12]
				break;
 80008b2:	e00e      	b.n	80008d2 <micro_step+0x13e>
			}
			case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0 :
			{
				transitioned = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react(handle, transitioned);
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f001 fd99 	bl	80023ee <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react>
 80008bc:	60f8      	str	r0, [r7, #12]
				break;
 80008be:	e008      	b.n	80008d2 <micro_step+0x13e>
			}
			case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1 :
			{
				transitioned = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react(handle, transitioned);
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f001 fdc4 	bl	8002450 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react>
 80008c8:	60f8      	str	r0, [r7, #12]
				break;
 80008ca:	e002      	b.n	80008d2 <micro_step+0x13e>
			}
			default: 
				/* do nothing */
				break;
		}
	} if ((handle->stateConfVectorPosition) < (2))
 80008cc:	bf00      	nop
 80008ce:	e000      	b.n	80008d2 <micro_step+0x13e>
				break;
 80008d0:	bf00      	nop
	} if ((handle->stateConfVectorPosition) < (2))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	dc12      	bgt.n	8000900 <micro_step+0x16c>
	{ 
		switch(handle->stateConfVector[ 2 ])
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	789b      	ldrb	r3, [r3, #2]
 80008de:	2b14      	cmp	r3, #20
 80008e0:	d002      	beq.n	80008e8 <micro_step+0x154>
 80008e2:	2b15      	cmp	r3, #21
 80008e4:	d006      	beq.n	80008f4 <micro_step+0x160>
				transitioned = RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react(handle, transitioned);
				break;
			}
			default: 
				/* do nothing */
				break;
 80008e6:	e00c      	b.n	8000902 <micro_step+0x16e>
				transitioned = RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react(handle, transitioned);
 80008e8:	68f9      	ldr	r1, [r7, #12]
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f001 fde2 	bl	80024b4 <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react>
 80008f0:	60f8      	str	r0, [r7, #12]
				break;
 80008f2:	e006      	b.n	8000902 <micro_step+0x16e>
				transitioned = RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react(handle, transitioned);
 80008f4:	68f9      	ldr	r1, [r7, #12]
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f001 fe52 	bl	80025a0 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react>
 80008fc:	60f8      	str	r0, [r7, #12]
				break;
 80008fe:	e000      	b.n	8000902 <micro_step+0x16e>
		}
	} if ((handle->stateConfVectorPosition) < (3))
 8000900:	bf00      	nop
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000906:	2b02      	cmp	r3, #2
 8000908:	dc28      	bgt.n	800095c <micro_step+0x1c8>
	{ 
		switch(handle->stateConfVector[ 3 ])
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	3b17      	subs	r3, #23
 8000910:	2b03      	cmp	r3, #3
 8000912:	d825      	bhi.n	8000960 <micro_step+0x1cc>
 8000914:	a201      	add	r2, pc, #4	; (adr r2, 800091c <micro_step+0x188>)
 8000916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091a:	bf00      	nop
 800091c:	0800092d 	.word	0x0800092d
 8000920:	08000939 	.word	0x08000939
 8000924:	08000945 	.word	0x08000945
 8000928:	08000951 	.word	0x08000951
		{
			case Microondas_RS_SWITCHES_SW1_esperando :
			{
				transitioned = RS_SWITCHES_SW1_esperando_react(handle, transitioned);
 800092c:	68f9      	ldr	r1, [r7, #12]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f001 feba 	bl	80026a8 <RS_SWITCHES_SW1_esperando_react>
 8000934:	60f8      	str	r0, [r7, #12]
				break;
 8000936:	e014      	b.n	8000962 <micro_step+0x1ce>
			}
			case Microondas_RS_SWITCHES_SW1_antirrebote :
			{
				transitioned = RS_SWITCHES_SW1_antirrebote_react(handle, transitioned);
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f001 fed8 	bl	80026f0 <RS_SWITCHES_SW1_antirrebote_react>
 8000940:	60f8      	str	r0, [r7, #12]
				break;
 8000942:	e00e      	b.n	8000962 <micro_step+0x1ce>
			}
			case Microondas_RS_SWITCHES_SW1_verifico :
			{
				transitioned = RS_SWITCHES_SW1_verifico_react(handle, transitioned);
 8000944:	68f9      	ldr	r1, [r7, #12]
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f001 fefa 	bl	8002740 <RS_SWITCHES_SW1_verifico_react>
 800094c:	60f8      	str	r0, [r7, #12]
				break;
 800094e:	e008      	b.n	8000962 <micro_step+0x1ce>
			}
			case Microondas_RS_SWITCHES_SW1_trampa :
			{
				transitioned = RS_SWITCHES_SW1_trampa_react(handle, transitioned);
 8000950:	68f9      	ldr	r1, [r7, #12]
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f001 ff26 	bl	80027a4 <RS_SWITCHES_SW1_trampa_react>
 8000958:	60f8      	str	r0, [r7, #12]
				break;
 800095a:	e002      	b.n	8000962 <micro_step+0x1ce>
			}
			default: 
				/* do nothing */
				break;
		}
	} if ((handle->stateConfVectorPosition) < (4))
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <micro_step+0x1ce>
				break;
 8000960:	bf00      	nop
	} if ((handle->stateConfVectorPosition) < (4))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000966:	2b03      	cmp	r3, #3
 8000968:	dc28      	bgt.n	80009bc <micro_step+0x228>
	{ 
		switch(handle->stateConfVector[ 4 ])
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	3b1b      	subs	r3, #27
 8000970:	2b03      	cmp	r3, #3
 8000972:	d825      	bhi.n	80009c0 <micro_step+0x22c>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <micro_step+0x1e8>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	0800098d 	.word	0x0800098d
 8000980:	08000999 	.word	0x08000999
 8000984:	080009a5 	.word	0x080009a5
 8000988:	080009b1 	.word	0x080009b1
		{
			case Microondas_RS_SWITCHES_SW2_esperando :
			{
				transitioned = RS_SWITCHES_SW2_esperando_react(handle, transitioned);
 800098c:	68f9      	ldr	r1, [r7, #12]
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f001 ff2c 	bl	80027ec <RS_SWITCHES_SW2_esperando_react>
 8000994:	60f8      	str	r0, [r7, #12]
				break;
 8000996:	e014      	b.n	80009c2 <micro_step+0x22e>
			}
			case Microondas_RS_SWITCHES_SW2_antirrebote :
			{
				transitioned = RS_SWITCHES_SW2_antirrebote_react(handle, transitioned);
 8000998:	68f9      	ldr	r1, [r7, #12]
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f001 ff4a 	bl	8002834 <RS_SWITCHES_SW2_antirrebote_react>
 80009a0:	60f8      	str	r0, [r7, #12]
				break;
 80009a2:	e00e      	b.n	80009c2 <micro_step+0x22e>
			}
			case Microondas_RS_SWITCHES_SW2_verifico :
			{
				transitioned = RS_SWITCHES_SW2_verifico_react(handle, transitioned);
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f001 ff6c 	bl	8002884 <RS_SWITCHES_SW2_verifico_react>
 80009ac:	60f8      	str	r0, [r7, #12]
				break;
 80009ae:	e008      	b.n	80009c2 <micro_step+0x22e>
			}
			case Microondas_RS_SWITCHES_SW2_trampa :
			{
				transitioned = RS_SWITCHES_SW2_trampa_react(handle, transitioned);
 80009b0:	68f9      	ldr	r1, [r7, #12]
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f001 ff98 	bl	80028e8 <RS_SWITCHES_SW2_trampa_react>
 80009b8:	60f8      	str	r0, [r7, #12]
				break;
 80009ba:	e002      	b.n	80009c2 <micro_step+0x22e>
			}
			default: 
				/* do nothing */
				break;
		}
	} if ((handle->stateConfVectorPosition) < (5))
 80009bc:	bf00      	nop
 80009be:	e000      	b.n	80009c2 <micro_step+0x22e>
				break;
 80009c0:	bf00      	nop
	} if ((handle->stateConfVectorPosition) < (5))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	dc28      	bgt.n	8000a1c <micro_step+0x288>
	{ 
		switch(handle->stateConfVector[ 5 ])
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	795b      	ldrb	r3, [r3, #5]
 80009ce:	3b1f      	subs	r3, #31
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d825      	bhi.n	8000a20 <micro_step+0x28c>
 80009d4:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <micro_step+0x248>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	080009f9 	.word	0x080009f9
 80009e4:	08000a05 	.word	0x08000a05
 80009e8:	08000a11 	.word	0x08000a11
		{
			case Microondas_RS_SWITCHES_SW3_esperando :
			{
				transitioned = RS_SWITCHES_SW3_esperando_react(handle, transitioned);
 80009ec:	68f9      	ldr	r1, [r7, #12]
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f001 ff9e 	bl	8002930 <RS_SWITCHES_SW3_esperando_react>
 80009f4:	60f8      	str	r0, [r7, #12]
				break;
 80009f6:	e014      	b.n	8000a22 <micro_step+0x28e>
			}
			case Microondas_RS_SWITCHES_SW3_antirrebote :
			{
				transitioned = RS_SWITCHES_SW3_antirrebote_react(handle, transitioned);
 80009f8:	68f9      	ldr	r1, [r7, #12]
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f001 ffc9 	bl	8002992 <RS_SWITCHES_SW3_antirrebote_react>
 8000a00:	60f8      	str	r0, [r7, #12]
				break;
 8000a02:	e00e      	b.n	8000a22 <micro_step+0x28e>
			}
			case Microondas_RS_SWITCHES_SW3_verifico :
			{
				transitioned = RS_SWITCHES_SW3_verifico_react(handle, transitioned);
 8000a04:	68f9      	ldr	r1, [r7, #12]
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f001 fff8 	bl	80029fc <RS_SWITCHES_SW3_verifico_react>
 8000a0c:	60f8      	str	r0, [r7, #12]
				break;
 8000a0e:	e008      	b.n	8000a22 <micro_step+0x28e>
			}
			case Microondas_RS_SWITCHES_SW3_trampa :
			{
				transitioned = RS_SWITCHES_SW3_trampa_react(handle, transitioned);
 8000a10:	68f9      	ldr	r1, [r7, #12]
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f002 f835 	bl	8002a82 <RS_SWITCHES_SW3_trampa_react>
 8000a18:	60f8      	str	r0, [r7, #12]
				break;
 8000a1a:	e002      	b.n	8000a22 <micro_step+0x28e>
			}
			default: 
				/* do nothing */
				break;
		}
	} if ((handle->stateConfVectorPosition) < (6))
 8000a1c:	bf00      	nop
 8000a1e:	e000      	b.n	8000a22 <micro_step+0x28e>
				break;
 8000a20:	bf00      	nop
	} if ((handle->stateConfVectorPosition) < (6))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	dc10      	bgt.n	8000a4c <micro_step+0x2b8>
	{ 
		switch(handle->stateConfVector[ 6 ])
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	799b      	ldrb	r3, [r3, #6]
 8000a2e:	2b23      	cmp	r3, #35	; 0x23
 8000a30:	d002      	beq.n	8000a38 <micro_step+0x2a4>
 8000a32:	2b24      	cmp	r3, #36	; 0x24
 8000a34:	d005      	beq.n	8000a42 <micro_step+0x2ae>
				RR_Reloj_detenido_react(handle, transitioned);
				break;
			}
			default: 
				/* do nothing */
				break;
 8000a36:	e00a      	b.n	8000a4e <micro_step+0x2ba>
				RR_Reloj_react(handle, transitioned);
 8000a38:	68f9      	ldr	r1, [r7, #12]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f002 f852 	bl	8002ae4 <RR_Reloj_react>
				break;
 8000a40:	e005      	b.n	8000a4e <micro_step+0x2ba>
				RR_Reloj_detenido_react(handle, transitioned);
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f002 f89c 	bl	8002b82 <RR_Reloj_detenido_react>
				break;
 8000a4a:	e000      	b.n	8000a4e <micro_step+0x2ba>
		}
	} 
 8000a4c:	bf00      	nop
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop

08000a58 <microondas_eSW1_raise_press>:




void microondas_eSW1_raise_press(Microondas* handle)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	handle->ifaceESW1.press_raised = bool_true;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	76da      	strb	r2, [r3, #27]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <microondas_eSW1_raise_nopress>:

void microondas_eSW1_raise_nopress(Microondas* handle)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	handle->ifaceESW1.nopress_raised = bool_true;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	771a      	strb	r2, [r3, #28]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <microondas_eSW2_raise_press>:



void microondas_eSW2_raise_press(Microondas* handle)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	handle->ifaceESW2.press_raised = bool_true;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2201      	movs	r2, #1
 8000a98:	775a      	strb	r2, [r3, #29]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <microondas_eSW2_raise_nopress>:

void microondas_eSW2_raise_nopress(Microondas* handle)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	handle->ifaceESW2.nopress_raised = bool_true;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	779a      	strb	r2, [r3, #30]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <microondas_eSW3_raise_press>:



void microondas_eSW3_raise_press(Microondas* handle)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	handle->ifaceESW3.press_raised = bool_true;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	77da      	strb	r2, [r3, #31]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <microondas_eSW3_raise_nopress>:

void microondas_eSW3_raise_nopress(Microondas* handle)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	handle->ifaceESW3.nopress_raised = bool_true;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <enact_RH_CONTROL_HORNO_Horono_reposo>:

/* implementations of all internal functions */

/* Entry action for state 'Horono_reposo'. */
static void enact_RH_CONTROL_HORNO_Horono_reposo(Microondas* handle)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Horono_reposo'. */
	handle->internal.smuestroreloj_raised = bool_true;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	72da      	strb	r2, [r3, #11]
	handle->internal.vdp = 1;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	769a      	strb	r2, [r3, #26]
	microondas_decimalPoint(handle, handle->internal.vdp);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7e9b      	ldrb	r3, [r3, #26]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f002 f9af 	bl	8002e74 <microondas_decimalPoint>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <enact_RH_CONTROL_HORNO_Ajuste_reloj>:

/* Entry action for state 'Ajuste_reloj'. */
static void enact_RH_CONTROL_HORNO_Ajuste_reloj(Microondas* handle)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Ajuste_reloj'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Ajuste_reloj_tev0_raised) , (1 * 1000), bool_true);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f002 f9cc 	bl	8002ed0 <microondas_set_timer>
	handle->internal.conta = 10;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	735a      	strb	r2, [r3, #13]
	handle->internal.flag_ajuste_reloj = 1;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2201      	movs	r2, #1
 8000b42:	745a      	strb	r2, [r3, #17]
	microondas_play(handle, MICROONDAS_MICROONDASINTERNAL_NOTA264, 500);
 8000b44:	f640 63cb 	movw	r3, #3787	; 0xecb
 8000b48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f002 f9ac 	bl	8002eac <microondas_play>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <enact_RH_CONTROL_HORNO_Ventana2s>:

/* Entry action for state 'Ventana2s'. */
static void enact_RH_CONTROL_HORNO_Ventana2s(Microondas* handle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Ventana2s'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Ventana2s_tev0_raised) , 2000, bool_false);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f002 f9ad 	bl	8002ed0 <microondas_set_timer>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <enact_RH_CONTROL_HORNO_Programacion_horno>:

/* Entry action for state 'Programacion_horno'. */
static void enact_RH_CONTROL_HORNO_Programacion_horno(Microondas* handle)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Programacion_horno'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev0_raised) , (1 * 1000), bool_true);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f002 f99c 	bl	8002ed0 <microondas_set_timer>
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev1_raised) , 500, bool_true);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f002 f993 	bl	8002ed0 <microondas_set_timer>
	handle->internal.conta = 5;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2205      	movs	r2, #5
 8000bae:	735a      	strb	r2, [r3, #13]
	handle->internal.smuestroTcoccion_raised = bool_true;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	731a      	strb	r2, [r3, #12]
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <enact_RH_CONTROL_HORNO_Horno_encendido>:

/* Entry action for state 'Horno_encendido'. */
static void enact_RH_CONTROL_HORNO_Horno_encendido(Microondas* handle)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Horno_encendido'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev0_raised) , 300, bool_true);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f002 f97c 	bl	8002ed0 <microondas_set_timer>
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev1_raised) , 500, bool_true);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8000bde:	2301      	movs	r3, #1
 8000be0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f002 f973 	bl	8002ed0 <microondas_set_timer>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>:

/* Entry action for state 'menosseg'. */
static void enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(Microondas* handle)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'menosseg'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_tev0_raised) , (1 * 1000), bool_true);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f103 0127 	add.w	r1, r3, #39	; 0x27
 8000c00:	2301      	movs	r3, #1
 8000c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f002 f962 	bl	8002ed0 <microondas_set_timer>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin>:

static void enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin(Microondas* handle)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'menosmin'. */
	handle->internal.mincoc--;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7c9b      	ldrb	r3, [r3, #18]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	749a      	strb	r2, [r3, #18]
	handle->internal.segcoc = 59;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	223b      	movs	r2, #59	; 0x3b
 8000c2c:	74da      	strb	r2, [r3, #19]
	handle->completed = bool_true;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida>:

/* Entry action for state 'demoradesalida'. */
static void enact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida(Microondas* handle)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'demoradesalida'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_tev0_raised) , 1500, bool_false);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000c50:	2300      	movs	r3, #0
 8000c52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f002 f93a 	bl	8002ed0 <microondas_set_timer>
	microondas_play(handle, MICROONDAS_MICROONDASINTERNAL_NOTA528, 500);
 8000c5c:	f240 7365 	movw	r3, #1893	; 0x765
 8000c60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f002 f920 	bl	8002eac <microondas_play>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_fin>:

static void enact_RH_CONTROL_HORNO_Horno_encendido_r1_fin(Microondas* handle)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	handle->completed = bool_true;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <enact_RH_CONTROL_HORNO_En_pausa>:

/* Entry action for state 'En_pausa'. */
static void enact_RH_CONTROL_HORNO_En_pausa(Microondas* handle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'En_pausa'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_En_pausa_tev0_raised) , (5 * 1000), bool_false);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f002 f913 	bl	8002ed0 <microondas_set_timer>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <enact_RH_CONTROL_HORNO_Reset>:

static void enact_RH_CONTROL_HORNO_Reset(Microondas* handle)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Reset'. */
	handle->internal.mincoc = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	749a      	strb	r2, [r3, #18]
	handle->internal.segcoc = 0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	74da      	strb	r2, [r3, #19]
	handle->completed = bool_true;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <enact_RH_CONTROL_RDSP_multiplexado>:

/* Entry action for state 'multiplexado'. */
static void enact_RH_CONTROL_RDSP_multiplexado(Microondas* handle)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'multiplexado'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_tev0_raised) , 5, bool_true);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2205      	movs	r2, #5
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f002 f8ef 	bl	8002ed0 <microondas_set_timer>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <enact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado>:

/* Entry action for state 'display_apagado'. */
static void enact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado(Microondas* handle)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'display_apagado'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_tev0_raised) , 250, bool_false);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8000d08:	2300      	movs	r3, #0
 8000d0a:	22fa      	movs	r2, #250	; 0xfa
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f002 f8df 	bl	8002ed0 <microondas_set_timer>
	microondas_displayapagado(handle, 1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f002 f897 	bl	8002e48 <microondas_displayapagado>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido>:

/* Entry action for state 'display_encendido'. */
static void enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido(Microondas* handle)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'display_encendido'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_tev0_raised) , 10, bool_true);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000d30:	2301      	movs	r3, #1
 8000d32:	220a      	movs	r2, #10
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f002 f8cb 	bl	8002ed0 <microondas_set_timer>
	handle->internal.conta2 = 250;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	22fa      	movs	r2, #250	; 0xfa
 8000d3e:	739a      	strb	r2, [r3, #14]
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2>:

/* Entry action for state 'd2'. */
static void enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2(Microondas* handle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'd2'. */
	handle->internal.vdigito = 2;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2202      	movs	r2, #2
 8000d54:	765a      	strb	r2, [r3, #25]
	microondas_selector(handle, handle->internal.vdigito);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7e5b      	ldrb	r3, [r3, #25]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f001 ffff 	bl	8002d60 <microondas_selector>
	handle->internal.numero = handle->internal.vd2;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7d5a      	ldrb	r2, [r3, #21]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	761a      	strb	r2, [r3, #24]
	microondas_display(handle, handle->internal.numero);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7e1b      	ldrb	r3, [r3, #24]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f002 f83b 	bl	8002dec <microondas_display>
	microondas_decimalPoint(handle, handle->internal.vdp);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7e9b      	ldrb	r3, [r3, #26]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f002 f879 	bl	8002e74 <microondas_decimalPoint>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3>:

/* Entry action for state 'd3'. */
static void enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3(Microondas* handle)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'd3'. */
	handle->internal.vdigito = 3;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2203      	movs	r2, #3
 8000d96:	765a      	strb	r2, [r3, #25]
	microondas_selector(handle, handle->internal.vdigito);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7e5b      	ldrb	r3, [r3, #25]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f001 ffde 	bl	8002d60 <microondas_selector>
	handle->internal.numero = handle->internal.vd3;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7d1a      	ldrb	r2, [r3, #20]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	761a      	strb	r2, [r3, #24]
	microondas_display(handle, handle->internal.numero);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7e1b      	ldrb	r3, [r3, #24]
 8000db0:	4619      	mov	r1, r3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f002 f81a 	bl	8002dec <microondas_display>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0>:

/* Entry action for state 'd0'. */
static void enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0(Microondas* handle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'd0'. */
	handle->internal.vdigito = 0;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	765a      	strb	r2, [r3, #25]
	microondas_selector(handle, handle->internal.vdigito);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7e5b      	ldrb	r3, [r3, #25]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 ffc3 	bl	8002d60 <microondas_selector>
	handle->internal.numero = handle->internal.vd0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7dda      	ldrb	r2, [r3, #23]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	761a      	strb	r2, [r3, #24]
	microondas_display(handle, handle->internal.numero);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7e1b      	ldrb	r3, [r3, #24]
 8000de6:	4619      	mov	r1, r3
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f001 ffff 	bl	8002dec <microondas_display>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1>:

/* Entry action for state 'd1'. */
static void enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1(Microondas* handle)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'd1'. */
	handle->internal.vdigito = 1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	765a      	strb	r2, [r3, #25]
	microondas_selector(handle, handle->internal.vdigito);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e5b      	ldrb	r3, [r3, #25]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f001 ffa8 	bl	8002d60 <microondas_selector>
	handle->internal.numero = handle->internal.vd1;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7d9a      	ldrb	r2, [r3, #22]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	761a      	strb	r2, [r3, #24]
	microondas_display(handle, handle->internal.numero);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7e1b      	ldrb	r3, [r3, #24]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f001 ffe4 	bl	8002dec <microondas_display>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <enact_RS_SWITCHES_SW1_antirrebote>:

/* Entry action for state 'antirrebote'. */
static void enact_RS_SWITCHES_SW1_antirrebote(Microondas* handle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'antirrebote'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RS_SWITCHES_SW1_antirrebote_tev0_raised) , MICROONDAS_MICROONDASINTERNAL_CREBOTE, bool_false);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8000e3a:	231e      	movs	r3, #30
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2300      	movs	r3, #0
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f002 f845 	bl	8002ed0 <microondas_set_timer>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <enact_RS_SWITCHES_SW1_trampa>:

/* Entry action for state 'trampa'. */
static void enact_RS_SWITCHES_SW1_trampa(Microondas* handle)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'trampa'. */
	handle->internal.sSW1_raised = bool_true;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	71da      	strb	r2, [r3, #7]
	microondas_play(handle, MICROONDAS_MICROONDASINTERNAL_NOTA132, 500);
 8000e5c:	f641 538e 	movw	r3, #7566	; 0x1d8e
 8000e60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f002 f820 	bl	8002eac <microondas_play>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <enact_RS_SWITCHES_SW2_antirrebote>:

/* Entry action for state 'antirrebote'. */
static void enact_RS_SWITCHES_SW2_antirrebote(Microondas* handle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'antirrebote'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RS_SWITCHES_SW2_antirrebote_tev0_raised) , MICROONDAS_MICROONDASINTERNAL_CREBOTE, bool_false);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 8000e82:	231e      	movs	r3, #30
 8000e84:	461a      	mov	r2, r3
 8000e86:	2300      	movs	r3, #0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f002 f821 	bl	8002ed0 <microondas_set_timer>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <enact_RS_SWITCHES_SW2_trampa>:

/* Entry action for state 'trampa'. */
static void enact_RS_SWITCHES_SW2_trampa(Microondas* handle)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'trampa'. */
	handle->internal.sSW2_raised = bool_true;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	721a      	strb	r2, [r3, #8]
	microondas_play(handle, MICROONDAS_MICROONDASINTERNAL_NOTA132, 500);
 8000ea4:	f641 538e 	movw	r3, #7566	; 0x1d8e
 8000ea8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f001 fffc 	bl	8002eac <microondas_play>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <enact_RS_SWITCHES_SW3_antirrebote>:

/* Entry action for state 'antirrebote'. */
static void enact_RS_SWITCHES_SW3_antirrebote(Microondas* handle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'antirrebote'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RS_SWITCHES_SW3_antirrebote_tev0_raised) , MICROONDAS_MICROONDASINTERNAL_CREBOTE, bool_false);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8000eca:	231e      	movs	r3, #30
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f001 fffd 	bl	8002ed0 <microondas_set_timer>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <enact_RS_SWITCHES_SW3_trampa>:

/* Entry action for state 'trampa'. */
static void enact_RS_SWITCHES_SW3_trampa(Microondas* handle)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'trampa'. */
	handle->internal.sSW3_raised = bool_true;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	725a      	strb	r2, [r3, #9]
	microondas_play(handle, MICROONDAS_MICROONDASINTERNAL_NOTA132, 500);
 8000eec:	f641 538e 	movw	r3, #7566	; 0x1d8e
 8000ef0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f001 ffd8 	bl	8002eac <microondas_play>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <enact_RR_Reloj>:

/* Entry action for state 'Reloj'. */
static void enact_RR_Reloj(Microondas* handle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Reloj'. */
	microondas_set_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RR_Reloj_tev0_raised) , (60 * 1000), bool_true);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000f12:	2301      	movs	r3, #1
 8000f14:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f001 ffd9 	bl	8002ed0 <microondas_set_timer>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <exact_RH_CONTROL_HORNO_Ajuste_reloj>:

/* Exit action for state 'Ajuste_reloj'. */
static void exact_RH_CONTROL_HORNO_Ajuste_reloj(Microondas* handle)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'Ajuste_reloj'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Ajuste_reloj_tev0_raised) );		
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3321      	adds	r3, #33	; 0x21
 8000f32:	4619      	mov	r1, r3
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 ffe1 	bl	8002efc <microondas_unset_timer>
	handle->internal.flag_ajuste_reloj = 0;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	745a      	strb	r2, [r3, #17]
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <exact_RH_CONTROL_HORNO_Ventana2s>:

/* Exit action for state 'Ventana2s'. */
static void exact_RH_CONTROL_HORNO_Ventana2s(Microondas* handle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'Ventana2s'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Ventana2s_tev0_raised) );		
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3322      	adds	r3, #34	; 0x22
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 ffd0 	bl	8002efc <microondas_unset_timer>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <exact_RH_CONTROL_HORNO_Programacion_horno>:

/* Exit action for state 'Programacion_horno'. */
static void exact_RH_CONTROL_HORNO_Programacion_horno(Microondas* handle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'Programacion_horno'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev0_raised) );		
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3323      	adds	r3, #35	; 0x23
 8000f70:	4619      	mov	r1, r3
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f001 ffc2 	bl	8002efc <microondas_unset_timer>
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Programacion_horno_tev1_raised) );		
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3324      	adds	r3, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 ffbc 	bl	8002efc <microondas_unset_timer>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <exact_RH_CONTROL_HORNO_Horno_encendido>:

/* Exit action for state 'Horno_encendido'. */
static void exact_RH_CONTROL_HORNO_Horno_encendido(Microondas* handle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'Horno_encendido'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev0_raised) );		
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3325      	adds	r3, #37	; 0x25
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 ffae 	bl	8002efc <microondas_unset_timer>
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_tev1_raised) );		
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3326      	adds	r3, #38	; 0x26
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f001 ffa8 	bl	8002efc <microondas_unset_timer>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <exact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>:

/* Exit action for state 'menosseg'. */
static void exact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(Microondas* handle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'menosseg'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_tev0_raised) );		
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3327      	adds	r3, #39	; 0x27
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f001 ff9a 	bl	8002efc <microondas_unset_timer>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <exact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida>:

/* Exit action for state 'demoradesalida'. */
static void exact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida(Microondas* handle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'demoradesalida'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_tev0_raised) );		
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3328      	adds	r3, #40	; 0x28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f001 ff8c 	bl	8002efc <microondas_unset_timer>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <exact_RH_CONTROL_HORNO_En_pausa>:

/* Exit action for state 'En_pausa'. */
static void exact_RH_CONTROL_HORNO_En_pausa(Microondas* handle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'En_pausa'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_HORNO_En_pausa_tev0_raised) );		
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3329      	adds	r3, #41	; 0x29
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 ff7e 	bl	8002efc <microondas_unset_timer>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <exact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado>:
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_tev0_raised) );		
}

/* Exit action for state 'display_apagado'. */
static void exact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado(Microondas* handle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'display_apagado'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_tev0_raised) );		
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	332b      	adds	r3, #43	; 0x2b
 8001014:	4619      	mov	r1, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f001 ff70 	bl	8002efc <microondas_unset_timer>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <exact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido>:

/* Exit action for state 'display_encendido'. */
static void exact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido(Microondas* handle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'display_encendido'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_tev0_raised) );		
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	332c      	adds	r3, #44	; 0x2c
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f001 ff62 	bl	8002efc <microondas_unset_timer>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <exact_RS_SWITCHES_SW1_antirrebote>:

/* Exit action for state 'antirrebote'. */
static void exact_RS_SWITCHES_SW1_antirrebote(Microondas* handle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'antirrebote'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RS_SWITCHES_SW1_antirrebote_tev0_raised) );		
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	332d      	adds	r3, #45	; 0x2d
 800104c:	4619      	mov	r1, r3
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f001 ff54 	bl	8002efc <microondas_unset_timer>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <exact_RS_SWITCHES_SW2_antirrebote>:

/* Exit action for state 'antirrebote'. */
static void exact_RS_SWITCHES_SW2_antirrebote(Microondas* handle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'antirrebote'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RS_SWITCHES_SW2_antirrebote_tev0_raised) );		
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	332e      	adds	r3, #46	; 0x2e
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 ff46 	bl	8002efc <microondas_unset_timer>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <exact_RS_SWITCHES_SW3_antirrebote>:

/* Exit action for state 'antirrebote'. */
static void exact_RS_SWITCHES_SW3_antirrebote(Microondas* handle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'antirrebote'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RS_SWITCHES_SW3_antirrebote_tev0_raised) );		
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	332f      	adds	r3, #47	; 0x2f
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f001 ff38 	bl	8002efc <microondas_unset_timer>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <exact_RR_Reloj>:

/* Exit action for state 'Reloj'. */
static void exact_RR_Reloj(Microondas* handle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	/* Exit action for state 'Reloj'. */
	microondas_unset_timer(handle, (sc_eventid) &(handle->timeEvents.microondas_RR_Reloj_tev0_raised) );		
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3330      	adds	r3, #48	; 0x30
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f001 ff2a 	bl	8002efc <microondas_unset_timer>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <enseq_RH_CONTROL_default>:

/* 'default' enter sequence for state CONTROL */
static void enseq_RH_CONTROL_default(Microondas* handle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state CONTROL */
	enseq_RH_CONTROL_HORNO_default(handle);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fa56 	bl	800156a <enseq_RH_CONTROL_HORNO_default>
	enseq_RH_CONTROL_RDSP_default(handle);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fa69 	bl	8001596 <enseq_RH_CONTROL_RDSP_default>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <enseq_RH_CONTROL_HORNO_Horono_reposo_default>:

/* 'default' enter sequence for state Horono_reposo */
static void enseq_RH_CONTROL_HORNO_Horono_reposo_default(Microondas* handle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Horono_reposo */
	enact_RH_CONTROL_HORNO_Horono_reposo(handle);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fd0e 	bl	8000af6 <enact_RH_CONTROL_HORNO_Horono_reposo>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horono_reposo;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <enseq_RH_CONTROL_HORNO_Ajuste_reloj_default>:

/* 'default' enter sequence for state Ajuste_reloj */
static void enseq_RH_CONTROL_HORNO_Ajuste_reloj_default(Microondas* handle)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Ajuste_reloj */
	enact_RH_CONTROL_HORNO_Ajuste_reloj(handle);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fd11 	bl	8000b1e <enact_RH_CONTROL_HORNO_Ajuste_reloj>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Ajuste_reloj;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2203      	movs	r2, #3
 8001100:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <enseq_RH_CONTROL_HORNO_Ventana2s_default>:

/* 'default' enter sequence for state Ventana2s */
static void enseq_RH_CONTROL_HORNO_Ventana2s_default(Microondas* handle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Ventana2s */
	enact_RH_CONTROL_HORNO_Ventana2s(handle);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fd1f 	bl	8000b5c <enact_RH_CONTROL_HORNO_Ventana2s>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Ventana2s;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	651a      	str	r2, [r3, #80]	; 0x50
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <enseq_RH_CONTROL_HORNO_Programacion_horno_default>:

/* 'default' enter sequence for state Programacion_horno */
static void enseq_RH_CONTROL_HORNO_Programacion_horno_default(Microondas* handle)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Programacion_horno */
	enact_RH_CONTROL_HORNO_Programacion_horno(handle);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fd1f 	bl	8000b7e <enact_RH_CONTROL_HORNO_Programacion_horno>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Programacion_horno;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2205      	movs	r2, #5
 8001144:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <enseq_RH_CONTROL_HORNO_Horno_encendido_default>:

/* 'default' enter sequence for state Horno_encendido */
static void enseq_RH_CONTROL_HORNO_Horno_encendido_default(Microondas* handle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Horno_encendido */
	enact_RH_CONTROL_HORNO_Horno_encendido(handle);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fd2e 	bl	8000bbe <enact_RH_CONTROL_HORNO_Horno_encendido>
	enseq_RH_CONTROL_HORNO_Horno_encendido_r1_default(handle);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fa0c 	bl	8001580 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_default>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_default>:

/* 'default' enter sequence for state menosseg */
static void enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_default(Microondas* handle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state menosseg */
	enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(handle);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fd3a 	bl	8000bf2 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2207      	movs	r2, #7
 8001182:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	651a      	str	r2, [r3, #80]	; 0x50
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_default>:

/* 'default' enter sequence for state menosmin */
static void enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_default(Microondas* handle)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state menosmin */
	enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin(handle);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fd3a 	bl	8000c14 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2208      	movs	r2, #8
 80011a4:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_default>:

/* 'default' enter sequence for state demoradesalida */
static void enseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_default(Microondas* handle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state demoradesalida */
	enact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida(handle);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff fd40 	bl	8000c42 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2209      	movs	r2, #9
 80011c6:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin_default>:

/* 'default' enter sequence for state fin */
static void enseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin_default(Microondas* handle)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state fin */
	enact_RH_CONTROL_HORNO_Horno_encendido_r1_fin(handle);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fd48 	bl	8000c74 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_fin>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_fin;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	220a      	movs	r2, #10
 80011e8:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <enseq_RH_CONTROL_HORNO_En_pausa_default>:

/* 'default' enter sequence for state En_pausa */
static void enseq_RH_CONTROL_HORNO_En_pausa_default(Microondas* handle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state En_pausa */
	enact_RH_CONTROL_HORNO_En_pausa(handle);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff fd45 	bl	8000c90 <enact_RH_CONTROL_HORNO_En_pausa>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_En_pausa;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	220b      	movs	r2, #11
 800120a:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <enseq_RH_CONTROL_HORNO_Reset_default>:

/* 'default' enter sequence for state Reset */
static void enseq_RH_CONTROL_HORNO_Reset_default(Microondas* handle)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Reset */
	enact_RH_CONTROL_HORNO_Reset(handle);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fd45 	bl	8000cb2 <enact_RH_CONTROL_HORNO_Reset>
	handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Reset;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	220c      	movs	r2, #12
 800122c:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <enseq_RH_CONTROL_RDSP_multiplexado_default>:

/* 'default' enter sequence for state multiplexado */
static void enseq_RH_CONTROL_RDSP_multiplexado_default(Microondas* handle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state multiplexado */
	enact_RH_CONTROL_RDSP_multiplexado(handle);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fd48 	bl	8000cda <enact_RH_CONTROL_RDSP_multiplexado>
	enseq_RH_CONTROL_RDSP_multiplexado_r1_default(handle);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f9ae 	bl	80015ac <enseq_RH_CONTROL_RDSP_multiplexado_r1_default>
	enseq_RH_CONTROL_RDSP_multiplexado_i_default(handle);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f9c1 	bl	80015d8 <enseq_RH_CONTROL_RDSP_multiplexado_i_default>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_default>:

/* 'default' enter sequence for state display_apagado */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_default(Microondas* handle)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state display_apagado */
	enact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado(handle);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fd47 	bl	8000cfa <enact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado>
	handle->stateConfVector[1] = Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	220e      	movs	r2, #14
 8001270:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_default>:

/* 'default' enter sequence for state display_encendido */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_default(Microondas* handle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state display_encendido */
	enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido(handle);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fd4a 	bl	8000d22 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido>
	enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_default(handle);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f997 	bl	80015c2 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_default>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_default>:

/* 'default' enter sequence for state d2 */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_default(Microondas* handle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state d2 */
	enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2(handle);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff fd4f 	bl	8000d48 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2>
	handle->stateConfVector[1] = Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2210      	movs	r2, #16
 80012ae:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_default>:

/* 'default' enter sequence for state d3 */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_default(Microondas* handle)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state d3 */
	enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3(handle);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fd5f 	bl	8000d8a <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3>
	handle->stateConfVector[1] = Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2211      	movs	r2, #17
 80012d0:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_default>:

/* 'default' enter sequence for state d0 */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_default(Microondas* handle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state d0 */
	enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0(handle);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fd69 	bl	8000dc0 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0>
	handle->stateConfVector[1] = Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2212      	movs	r2, #18
 80012f2:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_default>:

/* 'default' enter sequence for state d1 */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_default(Microondas* handle)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state d1 */
	enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1(handle);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fd73 	bl	8000df6 <enact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1>
	handle->stateConfVector[1] = Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2213      	movs	r2, #19
 8001314:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <enseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj_default>:

/* 'default' enter sequence for state presento_reloj */
static void enseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj_default(Microondas* handle)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state presento_reloj */
	handle->stateConfVector[2] = Microondas_RH_CONTROL_RDSP_multiplexado_i_presento_reloj;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2214      	movs	r2, #20
 8001330:	709a      	strb	r2, [r3, #2]
	handle->stateConfVectorPosition = 2;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2202      	movs	r2, #2
 8001336:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <enseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_default>:

/* 'default' enter sequence for state presento_T_coccion */
static void enseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_default(Microondas* handle)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state presento_T_coccion */
	handle->stateConfVector[2] = Microondas_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2215      	movs	r2, #21
 8001350:	709a      	strb	r2, [r3, #2]
	handle->stateConfVectorPosition = 2;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2202      	movs	r2, #2
 8001356:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <enseq_RS_SWITCHES_default>:

/* 'default' enter sequence for state SWITCHES */
static void enseq_RS_SWITCHES_default(Microondas* handle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state SWITCHES */
	enseq_RS_SWITCHES_SW1_default(handle);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f949 	bl	8001604 <enseq_RS_SWITCHES_SW1_default>
	enseq_RS_SWITCHES_SW2_default(handle);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f951 	bl	800161a <enseq_RS_SWITCHES_SW2_default>
	enseq_RS_SWITCHES_SW3_default(handle);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f959 	bl	8001630 <enseq_RS_SWITCHES_SW3_default>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <enseq_RS_SWITCHES_SW1_esperando_default>:

/* 'default' enter sequence for state esperando */
static void enseq_RS_SWITCHES_SW1_esperando_default(Microondas* handle)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state esperando */
	handle->stateConfVector[3] = Microondas_RS_SWITCHES_SW1_esperando;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2217      	movs	r2, #23
 8001392:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	651a      	str	r2, [r3, #80]	; 0x50
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <enseq_RS_SWITCHES_SW1_antirrebote_default>:

/* 'default' enter sequence for state antirrebote */
static void enseq_RS_SWITCHES_SW1_antirrebote_default(Microondas* handle)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state antirrebote */
	enact_RS_SWITCHES_SW1_antirrebote(handle);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd3c 	bl	8000e2c <enact_RS_SWITCHES_SW1_antirrebote>
	handle->stateConfVector[3] = Microondas_RS_SWITCHES_SW1_antirrebote;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2218      	movs	r2, #24
 80013b8:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <enseq_RS_SWITCHES_SW1_verifico_default>:

/* 'default' enter sequence for state verifico */
static void enseq_RS_SWITCHES_SW1_verifico_default(Microondas* handle)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state verifico */
	handle->stateConfVector[3] = Microondas_RS_SWITCHES_SW1_verifico;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2219      	movs	r2, #25
 80013d4:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <enseq_RS_SWITCHES_SW1_trampa_default>:

/* 'default' enter sequence for state trampa */
static void enseq_RS_SWITCHES_SW1_trampa_default(Microondas* handle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state trampa */
	enact_RS_SWITCHES_SW1_trampa(handle);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fd2c 	bl	8000e4e <enact_RS_SWITCHES_SW1_trampa>
	handle->stateConfVector[3] = Microondas_RS_SWITCHES_SW1_trampa;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	221a      	movs	r2, #26
 80013fa:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2203      	movs	r2, #3
 8001400:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <enseq_RS_SWITCHES_SW2_esperando_default>:

/* 'default' enter sequence for state esperando */
static void enseq_RS_SWITCHES_SW2_esperando_default(Microondas* handle)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state esperando */
	handle->stateConfVector[4] = Microondas_RS_SWITCHES_SW2_esperando;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	221b      	movs	r2, #27
 8001416:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2204      	movs	r2, #4
 800141c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <enseq_RS_SWITCHES_SW2_antirrebote_default>:

/* 'default' enter sequence for state antirrebote */
static void enseq_RS_SWITCHES_SW2_antirrebote_default(Microondas* handle)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state antirrebote */
	enact_RS_SWITCHES_SW2_antirrebote(handle);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fd1e 	bl	8000e74 <enact_RS_SWITCHES_SW2_antirrebote>
	handle->stateConfVector[4] = Microondas_RS_SWITCHES_SW2_antirrebote;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	221c      	movs	r2, #28
 800143c:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2204      	movs	r2, #4
 8001442:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <enseq_RS_SWITCHES_SW2_verifico_default>:

/* 'default' enter sequence for state verifico */
static void enseq_RS_SWITCHES_SW2_verifico_default(Microondas* handle)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state verifico */
	handle->stateConfVector[4] = Microondas_RS_SWITCHES_SW2_verifico;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	221d      	movs	r2, #29
 8001458:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2204      	movs	r2, #4
 800145e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <enseq_RS_SWITCHES_SW2_trampa_default>:

/* 'default' enter sequence for state trampa */
static void enseq_RS_SWITCHES_SW2_trampa_default(Microondas* handle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state trampa */
	enact_RS_SWITCHES_SW2_trampa(handle);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fd0e 	bl	8000e96 <enact_RS_SWITCHES_SW2_trampa>
	handle->stateConfVector[4] = Microondas_RS_SWITCHES_SW2_trampa;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	221e      	movs	r2, #30
 800147e:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <enseq_RS_SWITCHES_SW3_esperando_default>:

/* 'default' enter sequence for state esperando */
static void enseq_RS_SWITCHES_SW3_esperando_default(Microondas* handle)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state esperando */
	handle->stateConfVector[5] = Microondas_RS_SWITCHES_SW3_esperando;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	221f      	movs	r2, #31
 800149a:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2205      	movs	r2, #5
 80014a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <enseq_RS_SWITCHES_SW3_antirrebote_default>:

/* 'default' enter sequence for state antirrebote */
static void enseq_RS_SWITCHES_SW3_antirrebote_default(Microondas* handle)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state antirrebote */
	enact_RS_SWITCHES_SW3_antirrebote(handle);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fd00 	bl	8000ebc <enact_RS_SWITCHES_SW3_antirrebote>
	handle->stateConfVector[5] = Microondas_RS_SWITCHES_SW3_antirrebote;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2205      	movs	r2, #5
 80014c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <enseq_RS_SWITCHES_SW3_verifico_default>:

/* 'default' enter sequence for state verifico */
static void enseq_RS_SWITCHES_SW3_verifico_default(Microondas* handle)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state verifico */
	handle->stateConfVector[5] = Microondas_RS_SWITCHES_SW3_verifico;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2221      	movs	r2, #33	; 0x21
 80014dc:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2205      	movs	r2, #5
 80014e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <enseq_RS_SWITCHES_SW3_trampa_default>:

/* 'default' enter sequence for state trampa */
static void enseq_RS_SWITCHES_SW3_trampa_default(Microondas* handle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state trampa */
	enact_RS_SWITCHES_SW3_trampa(handle);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fcf0 	bl	8000ede <enact_RS_SWITCHES_SW3_trampa>
	handle->stateConfVector[5] = Microondas_RS_SWITCHES_SW3_trampa;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2222      	movs	r2, #34	; 0x22
 8001502:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	651a      	str	r2, [r3, #80]	; 0x50
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <enseq_RR_Reloj_default>:

/* 'default' enter sequence for state Reloj */
static void enseq_RR_Reloj_default(Microondas* handle)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Reloj */
	enact_RR_Reloj(handle);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fcf2 	bl	8000f04 <enact_RR_Reloj>
	handle->stateConfVector[6] = Microondas_RR_Reloj;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2223      	movs	r2, #35	; 0x23
 8001524:	719a      	strb	r2, [r3, #6]
	handle->stateConfVectorPosition = 6;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2206      	movs	r2, #6
 800152a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <enseq_RR_Reloj_detenido_default>:

/* 'default' enter sequence for state Reloj_detenido */
static void enseq_RR_Reloj_detenido_default(Microondas* handle)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Reloj_detenido */
	handle->stateConfVector[6] = Microondas_RR_Reloj_detenido;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	719a      	strb	r2, [r3, #6]
	handle->stateConfVectorPosition = 6;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2206      	movs	r2, #6
 8001546:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <enseq_RH_default>:

/* 'default' enter sequence for region RH */
static void enseq_RH_default(Microondas* handle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region RH */
	react_RH__entry_Default(handle);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 faf1 	bl	8001b44 <react_RH__entry_Default>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <enseq_RH_CONTROL_HORNO_default>:

/* 'default' enter sequence for region HORNO */
static void enseq_RH_CONTROL_HORNO_default(Microondas* handle)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region HORNO */
	react_RH_CONTROL_HORNO__entry_Default(handle);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 faf1 	bl	8001b5a <react_RH_CONTROL_HORNO__entry_Default>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_default>:

/* 'default' enter sequence for region r1 */
static void enseq_RH_CONTROL_HORNO_Horno_encendido_r1_default(Microondas* handle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region r1 */
	react_RH_CONTROL_HORNO_Horno_encendido_r1__entry_Default(handle);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 faf1 	bl	8001b70 <react_RH_CONTROL_HORNO_Horno_encendido_r1__entry_Default>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <enseq_RH_CONTROL_RDSP_default>:

/* 'default' enter sequence for region RDSP */
static void enseq_RH_CONTROL_RDSP_default(Microondas* handle)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region RDSP */
	react_RH_CONTROL_RDSP__entry_Default(handle);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fb12 	bl	8001bc8 <react_RH_CONTROL_RDSP__entry_Default>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <enseq_RH_CONTROL_RDSP_multiplexado_r1_default>:

/* 'default' enter sequence for region r1 */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_default(Microondas* handle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region r1 */
	react_RH_CONTROL_RDSP_multiplexado_r1__entry_Default(handle);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 faf1 	bl	8001b9c <react_RH_CONTROL_RDSP_multiplexado_r1__entry_Default>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_default>:

/* 'default' enter sequence for region r1 */
static void enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_default(Microondas* handle)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region r1 */
	react_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1__entry_Default(handle);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fadb 	bl	8001b86 <react_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1__entry_Default>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <enseq_RH_CONTROL_RDSP_multiplexado_i_default>:

/* 'default' enter sequence for region i */
static void enseq_RH_CONTROL_RDSP_multiplexado_i_default(Microondas* handle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region i */
	react_RH_CONTROL_RDSP_multiplexado_i__entry_Default(handle);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 fae6 	bl	8001bb2 <react_RH_CONTROL_RDSP_multiplexado_i__entry_Default>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <enseq_RS_default>:

/* 'default' enter sequence for region RS */
static void enseq_RS_default(Microondas* handle)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region RS */
	react_RS__entry_Default(handle);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fb12 	bl	8001c20 <react_RS__entry_Default>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <enseq_RS_SWITCHES_SW1_default>:

/* 'default' enter sequence for region SW1 */
static void enseq_RS_SWITCHES_SW1_default(Microondas* handle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region SW1 */
	react_RS_SWITCHES_SW1__entry_Default(handle);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fae6 	bl	8001bde <react_RS_SWITCHES_SW1__entry_Default>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <enseq_RS_SWITCHES_SW2_default>:

/* 'default' enter sequence for region SW2 */
static void enseq_RS_SWITCHES_SW2_default(Microondas* handle)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region SW2 */
	react_RS_SWITCHES_SW2__entry_Default(handle);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fae6 	bl	8001bf4 <react_RS_SWITCHES_SW2__entry_Default>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <enseq_RS_SWITCHES_SW3_default>:

/* 'default' enter sequence for region SW3 */
static void enseq_RS_SWITCHES_SW3_default(Microondas* handle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region SW3 */
	react_RS_SWITCHES_SW3__entry_Default(handle);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fae6 	bl	8001c0a <react_RS_SWITCHES_SW3__entry_Default>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <enseq_RR_default>:

/* 'default' enter sequence for region RR */
static void enseq_RR_default(Microondas* handle)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region RR */
	react_RR__entry_Default(handle);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 faf1 	bl	8001c36 <react_RR__entry_Default>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <exseq_RH_CONTROL_HORNO_Horono_reposo>:

/* Default exit sequence for state Horono_reposo */
static void exseq_RH_CONTROL_HORNO_Horono_reposo(Microondas* handle)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Horono_reposo */
	handle->stateConfVector[0] = Microondas_last_state;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <exseq_RH_CONTROL_HORNO_Ajuste_reloj>:

/* Default exit sequence for state Ajuste_reloj */
static void exseq_RH_CONTROL_HORNO_Ajuste_reloj(Microondas* handle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Ajuste_reloj */
	handle->stateConfVector[0] = Microondas_last_state;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RH_CONTROL_HORNO_Ajuste_reloj(handle);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fc48 	bl	8000f26 <exact_RH_CONTROL_HORNO_Ajuste_reloj>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <exseq_RH_CONTROL_HORNO_Ventana2s>:

/* Default exit sequence for state Ventana2s */
static void exseq_RH_CONTROL_HORNO_Ventana2s(Microondas* handle)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Ventana2s */
	handle->stateConfVector[0] = Microondas_last_state;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RH_CONTROL_HORNO_Ventana2s(handle);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fc48 	bl	8000f48 <exact_RH_CONTROL_HORNO_Ventana2s>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <exseq_RH_CONTROL_HORNO_Programacion_horno>:

/* Default exit sequence for state Programacion_horno */
static void exseq_RH_CONTROL_HORNO_Programacion_horno(Microondas* handle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Programacion_horno */
	handle->stateConfVector[0] = Microondas_last_state;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RH_CONTROL_HORNO_Programacion_horno(handle);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fc45 	bl	8000f64 <exact_RH_CONTROL_HORNO_Programacion_horno>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <exseq_RH_CONTROL_HORNO_Horno_encendido>:

/* Default exit sequence for state Horno_encendido */
static void exseq_RH_CONTROL_HORNO_Horno_encendido(Microondas* handle)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Horno_encendido */
	exseq_RH_CONTROL_HORNO_Horno_encendido_r1(handle);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f9be 	bl	8001a6c <exseq_RH_CONTROL_HORNO_Horno_encendido_r1>
	exact_RH_CONTROL_HORNO_Horno_encendido(handle);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fc4b 	bl	8000f8c <exact_RH_CONTROL_HORNO_Horno_encendido>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>:

/* Default exit sequence for state menosseg */
static void exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(Microondas* handle)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state menosseg */
	handle->stateConfVector[0] = Microondas_last_state;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(handle);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fc4e 	bl	8000fb4 <exact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin>:

/* Default exit sequence for state menosmin */
static void exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin(Microondas* handle)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state menosmin */
	handle->stateConfVector[0] = Microondas_last_state;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida>:

/* Default exit sequence for state demoradesalida */
static void exseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida(Microondas* handle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state demoradesalida */
	handle->stateConfVector[0] = Microondas_last_state;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida(handle);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fc3b 	bl	8000fd0 <exact_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin>:

/* Default exit sequence for state fin */
static void exseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin(Microondas* handle)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state fin */
	handle->stateConfVector[0] = Microondas_last_state;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <exseq_RH_CONTROL_HORNO_En_pausa>:

/* Default exit sequence for state En_pausa */
static void exseq_RH_CONTROL_HORNO_En_pausa(Microondas* handle)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state En_pausa */
	handle->stateConfVector[0] = Microondas_last_state;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
	handle->stateConfVectorPosition = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RH_CONTROL_HORNO_En_pausa(handle);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fc28 	bl	8000fec <exact_RH_CONTROL_HORNO_En_pausa>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado>:
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state display_apagado */
static void exseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado(Microondas* handle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state display_apagado */
	handle->stateConfVector[1] = Microondas_last_state;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado(handle);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fc25 	bl	8001008 <exact_RH_CONTROL_RDSP_multiplexado_r1_display_apagado>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido>:

/* Default exit sequence for state display_encendido */
static void exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido(Microondas* handle)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state display_encendido */
	exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1(handle);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f976 	bl	8001ac0 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1>
	exact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido(handle);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fc25 	bl	8001024 <exact_RH_CONTROL_RDSP_multiplexado_r1_display_encendido>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2>:

/* Default exit sequence for state d2 */
static void exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2(Microondas* handle)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state d2 */
	handle->stateConfVector[1] = Microondas_last_state;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3>:

/* Default exit sequence for state d3 */
static void exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3(Microondas* handle)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state d3 */
	handle->stateConfVector[1] = Microondas_last_state;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0>:

/* Default exit sequence for state d0 */
static void exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0(Microondas* handle)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state d0 */
	handle->stateConfVector[1] = Microondas_last_state;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1>:

/* Default exit sequence for state d1 */
static void exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1(Microondas* handle)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state d1 */
	handle->stateConfVector[1] = Microondas_last_state;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	705a      	strb	r2, [r3, #1]
	handle->stateConfVectorPosition = 1;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <exseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj>:

/* Default exit sequence for state presento_reloj */
static void exseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj(Microondas* handle)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state presento_reloj */
	handle->stateConfVector[2] = Microondas_last_state;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	709a      	strb	r2, [r3, #2]
	handle->stateConfVectorPosition = 2;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <exseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion>:

/* Default exit sequence for state presento_T_coccion */
static void exseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion(Microondas* handle)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state presento_T_coccion */
	handle->stateConfVector[2] = Microondas_last_state;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	709a      	strb	r2, [r3, #2]
	handle->stateConfVectorPosition = 2;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <exseq_RS_SWITCHES_SW1_esperando>:

/* Default exit sequence for state esperando */
static void exseq_RS_SWITCHES_SW1_esperando(Microondas* handle)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state esperando */
	handle->stateConfVector[3] = Microondas_last_state;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <exseq_RS_SWITCHES_SW1_antirrebote>:

/* Default exit sequence for state antirrebote */
static void exseq_RS_SWITCHES_SW1_antirrebote(Microondas* handle)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state antirrebote */
	handle->stateConfVector[3] = Microondas_last_state;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2203      	movs	r2, #3
 80018d4:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RS_SWITCHES_SW1_antirrebote(handle);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fbb2 	bl	8001040 <exact_RS_SWITCHES_SW1_antirrebote>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <exseq_RS_SWITCHES_SW1_verifico>:

/* Default exit sequence for state verifico */
static void exseq_RS_SWITCHES_SW1_verifico(Microondas* handle)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state verifico */
	handle->stateConfVector[3] = Microondas_last_state;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2203      	movs	r2, #3
 80018f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <exseq_RS_SWITCHES_SW1_trampa>:

/* Default exit sequence for state trampa */
static void exseq_RS_SWITCHES_SW1_trampa(Microondas* handle)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state trampa */
	handle->stateConfVector[3] = Microondas_last_state;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	70da      	strb	r2, [r3, #3]
	handle->stateConfVectorPosition = 3;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <exseq_RS_SWITCHES_SW2_esperando>:

/* Default exit sequence for state esperando */
static void exseq_RS_SWITCHES_SW2_esperando(Microondas* handle)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state esperando */
	handle->stateConfVector[4] = Microondas_last_state;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2204      	movs	r2, #4
 8001936:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <exseq_RS_SWITCHES_SW2_antirrebote>:

/* Default exit sequence for state antirrebote */
static void exseq_RS_SWITCHES_SW2_antirrebote(Microondas* handle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state antirrebote */
	handle->stateConfVector[4] = Microondas_last_state;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2204      	movs	r2, #4
 8001956:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RS_SWITCHES_SW2_antirrebote(handle);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fb7f 	bl	800105c <exact_RS_SWITCHES_SW2_antirrebote>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <exseq_RS_SWITCHES_SW2_verifico>:

/* Default exit sequence for state verifico */
static void exseq_RS_SWITCHES_SW2_verifico(Microondas* handle)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state verifico */
	handle->stateConfVector[4] = Microondas_last_state;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2204      	movs	r2, #4
 8001978:	651a      	str	r2, [r3, #80]	; 0x50
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <exseq_RS_SWITCHES_SW2_trampa>:

/* Default exit sequence for state trampa */
static void exseq_RS_SWITCHES_SW2_trampa(Microondas* handle)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state trampa */
	handle->stateConfVector[4] = Microondas_last_state;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	711a      	strb	r2, [r3, #4]
	handle->stateConfVectorPosition = 4;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	651a      	str	r2, [r3, #80]	; 0x50
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <exseq_RS_SWITCHES_SW3_esperando>:

/* Default exit sequence for state esperando */
static void exseq_RS_SWITCHES_SW3_esperando(Microondas* handle)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state esperando */
	handle->stateConfVector[5] = Microondas_last_state;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2205      	movs	r2, #5
 80019b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <exseq_RS_SWITCHES_SW3_antirrebote>:

/* Default exit sequence for state antirrebote */
static void exseq_RS_SWITCHES_SW3_antirrebote(Microondas* handle)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state antirrebote */
	handle->stateConfVector[5] = Microondas_last_state;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RS_SWITCHES_SW3_antirrebote(handle);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fb4c 	bl	8001078 <exact_RS_SWITCHES_SW3_antirrebote>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <exseq_RS_SWITCHES_SW3_verifico>:

/* Default exit sequence for state verifico */
static void exseq_RS_SWITCHES_SW3_verifico(Microondas* handle)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state verifico */
	handle->stateConfVector[5] = Microondas_last_state;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2205      	movs	r2, #5
 80019fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <exseq_RS_SWITCHES_SW3_trampa>:

/* Default exit sequence for state trampa */
static void exseq_RS_SWITCHES_SW3_trampa(Microondas* handle)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state trampa */
	handle->stateConfVector[5] = Microondas_last_state;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	715a      	strb	r2, [r3, #5]
	handle->stateConfVectorPosition = 5;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <exseq_RR_Reloj>:

/* Default exit sequence for state Reloj */
static void exseq_RR_Reloj(Microondas* handle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Reloj */
	handle->stateConfVector[6] = Microondas_last_state;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	719a      	strb	r2, [r3, #6]
	handle->stateConfVectorPosition = 6;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2206      	movs	r2, #6
 8001a3a:	651a      	str	r2, [r3, #80]	; 0x50
	exact_RR_Reloj(handle);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fb29 	bl	8001094 <exact_RR_Reloj>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <exseq_RR_Reloj_detenido>:

/* Default exit sequence for state Reloj_detenido */
static void exseq_RR_Reloj_detenido(Microondas* handle)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Reloj_detenido */
	handle->stateConfVector[6] = Microondas_last_state;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	719a      	strb	r2, [r3, #6]
	handle->stateConfVectorPosition = 6;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2206      	movs	r2, #6
 8001a5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <exseq_RH_CONTROL_HORNO_Horno_encendido_r1>:
	}
}

/* Default exit sequence for region r1 */
static void exseq_RH_CONTROL_HORNO_Horno_encendido_r1(Microondas* handle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of Microondas.RH.CONTROL.HORNO.Horno_encendido.r1) at position 0... */
	switch(handle->stateConfVector[ 0 ])
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3b07      	subs	r3, #7
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d81a      	bhi.n	8001ab4 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1+0x48>
 8001a7e:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1+0x18>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001a9d 	.word	0x08001a9d
 8001a8c:	08001aa5 	.word	0x08001aa5
 8001a90:	08001aad 	.word	0x08001aad
	{
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg :
		{
			exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(handle);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fe32 	bl	80016fe <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>
			break;
 8001a9a:	e00c      	b.n	8001ab6 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1+0x4a>
		}
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin :
		{
			exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin(handle);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fe3f 	bl	8001720 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin>
			break;
 8001aa2:	e008      	b.n	8001ab6 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1+0x4a>
		}
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida :
		{
			exseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida(handle);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fe4b 	bl	8001740 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida>
			break;
 8001aaa:	e004      	b.n	8001ab6 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1+0x4a>
		}
		case Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_fin :
		{
			exseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin(handle);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fe58 	bl	8001762 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin>
			break;
 8001ab2:	e000      	b.n	8001ab6 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1+0x4a>
		}
		default: 
			/* do nothing */
			break;
 8001ab4:	bf00      	nop
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop

08001ac0 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1>:

/* Default exit sequence for region r1 */
static void exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1(Microondas* handle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of Microondas.RH.CONTROL.RDSP.multiplexado.r1.display_encendido.r1) at position 1... */
	switch(handle->stateConfVector[ 1 ])
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	785b      	ldrb	r3, [r3, #1]
 8001acc:	3b10      	subs	r3, #16
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d81a      	bhi.n	8001b08 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1+0x48>
 8001ad2:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1+0x18>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001af1 	.word	0x08001af1
 8001ae0:	08001af9 	.word	0x08001af9
 8001ae4:	08001b01 	.word	0x08001b01
	{
		case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2 :
		{
			exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2(handle);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fe7a 	bl	80017e2 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2>
			break;
 8001aee:	e00c      	b.n	8001b0a <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1+0x4a>
		}
		case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3 :
		{
			exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3(handle);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff fe86 	bl	8001802 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3>
			break;
 8001af6:	e008      	b.n	8001b0a <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1+0x4a>
		}
		case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0 :
		{
			exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0(handle);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fe92 	bl	8001822 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0>
			break;
 8001afe:	e004      	b.n	8001b0a <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1+0x4a>
		}
		case Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1 :
		{
			exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1(handle);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fe9e 	bl	8001842 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1>
			break;
 8001b06:	e000      	b.n	8001b0a <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1+0x4a>
		}
		default: 
			/* do nothing */
			break;
 8001b08:	bf00      	nop
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <react_RH_CONTROL_HORNO__choice_0>:
	}
}

/* The reactions of state null. */
static void react_RH_CONTROL_HORNO__choice_0(Microondas* handle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	/* The reactions of state null. */
	if (((handle->internal.mincoc) > (0)) || ((handle->internal.segcoc) > (0)))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7c9b      	ldrb	r3, [r3, #18]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <react_RH_CONTROL_HORNO__choice_0+0x18>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7cdb      	ldrb	r3, [r3, #19]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <react_RH_CONTROL_HORNO__choice_0+0x20>
	{ 
		enseq_RH_CONTROL_HORNO_Horno_encendido_default(handle);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fb11 	bl	8001154 <enseq_RH_CONTROL_HORNO_Horno_encendido_default>
 8001b32:	e003      	b.n	8001b3c <react_RH_CONTROL_HORNO__choice_0+0x28>
	}  else
	{
		enseq_RH_CONTROL_HORNO_Programacion_horno_default(handle);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fafc 	bl	8001132 <enseq_RH_CONTROL_HORNO_Programacion_horno_default>
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <react_RH__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RH__entry_Default(Microondas* handle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RH_CONTROL_default(handle);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff faaf 	bl	80010b0 <enseq_RH_CONTROL_default>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <react_RH_CONTROL_HORNO__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RH_CONTROL_HORNO__entry_Default(Microondas* handle)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RH_CONTROL_HORNO_Horono_reposo_default(handle);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fab2 	bl	80010cc <enseq_RH_CONTROL_HORNO_Horono_reposo_default>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <react_RH_CONTROL_HORNO_Horno_encendido_r1__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RH_CONTROL_HORNO_Horno_encendido_r1__entry_Default(Microondas* handle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_default(handle);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff faf9 	bl	8001170 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_default>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <react_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1__entry_Default(Microondas* handle)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_default(handle);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fb95 	bl	80012be <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_default>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <react_RH_CONTROL_RDSP_multiplexado_r1__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RH_CONTROL_RDSP_multiplexado_r1__entry_Default(Microondas* handle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_default(handle);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fb5a 	bl	800125e <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_default>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <react_RH_CONTROL_RDSP_multiplexado_i__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RH_CONTROL_RDSP_multiplexado_i__entry_Default(Microondas* handle)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj_default(handle);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fbb2 	bl	8001324 <enseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj_default>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <react_RH_CONTROL_RDSP__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RH_CONTROL_RDSP__entry_Default(Microondas* handle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RH_CONTROL_RDSP_multiplexado_default(handle);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fb33 	bl	800123c <enseq_RH_CONTROL_RDSP_multiplexado_default>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <react_RS_SWITCHES_SW1__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RS_SWITCHES_SW1__entry_Default(Microondas* handle)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RS_SWITCHES_SW1_esperando_default(handle);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fbcd 	bl	8001386 <enseq_RS_SWITCHES_SW1_esperando_default>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <react_RS_SWITCHES_SW2__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RS_SWITCHES_SW2__entry_Default(Microondas* handle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RS_SWITCHES_SW2_esperando_default(handle);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff fc04 	bl	800140a <enseq_RS_SWITCHES_SW2_esperando_default>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <react_RS_SWITCHES_SW3__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RS_SWITCHES_SW3__entry_Default(Microondas* handle)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RS_SWITCHES_SW3_esperando_default(handle);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fc3b 	bl	800148e <enseq_RS_SWITCHES_SW3_esperando_default>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <react_RS__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RS__entry_Default(Microondas* handle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RS_SWITCHES_default(handle);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fb9b 	bl	8001364 <enseq_RS_SWITCHES_default>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <react_RR__entry_Default>:

/* Default react sequence for initial entry  */
static void react_RR__entry_Default(Microondas* handle)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_RR_Reloj_default(handle);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fc67 	bl	8001512 <enseq_RR_Reloj_default>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <react>:


static sc_integer react(Microondas* handle, const sc_integer transitioned_before)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	/* State machine reactions. */
	SC_UNUSED(handle);
	return transitioned_before;
 8001c56:	683b      	ldr	r3, [r7, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <RH_CONTROL_react>:

static sc_integer RH_CONTROL_react(Microondas* handle, const sc_integer transitioned_before)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	/* The reactions of state CONTROL. */
 			sc_integer transitioned_after = transitioned_before;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
	SC_UNUSED(handle);
	return transitioned_after;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <RH_CONTROL_HORNO_Horono_reposo_react>:

static sc_integer RH_CONTROL_HORNO_Horono_reposo_react(Microondas* handle, const sc_integer transitioned_before)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	/* The reactions of state Horono_reposo. */
 			sc_integer transitioned_after = transitioned_before;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d022      	beq.n	8001ce4 <RH_CONTROL_HORNO_Horono_reposo_react+0x64>
	{ 
		if ((transitioned_after) < (0))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da1f      	bge.n	8001ce4 <RH_CONTROL_HORNO_Horono_reposo_react+0x64>
		{ 
			if ((handle->current.ifaceESW1.press_raised == bool_true) && (handle->current.ifaceESW2.press_raised == bool_true))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <RH_CONTROL_HORNO_Horono_reposo_react+0x4a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <RH_CONTROL_HORNO_Horono_reposo_react+0x4a>
			{ 
				exseq_RH_CONTROL_HORNO_Horono_reposo(handle);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fccf 	bl	800165c <exseq_RH_CONTROL_HORNO_Horono_reposo>
				enseq_RH_CONTROL_HORNO_Ventana2s_default(handle);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fa26 	bl	8001110 <enseq_RH_CONTROL_HORNO_Ventana2s_default>
				transitioned_after = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e00c      	b.n	8001ce4 <RH_CONTROL_HORNO_Horono_reposo_react+0x64>
			}  else
			{
				if (handle->current.internal.sSW3_raised == bool_true)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <RH_CONTROL_HORNO_Horono_reposo_react+0x64>
				{ 
					exseq_RH_CONTROL_HORNO_Horono_reposo(handle);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fcc1 	bl	800165c <exseq_RH_CONTROL_HORNO_Horono_reposo>
					enseq_RH_CONTROL_HORNO_Programacion_horno_default(handle);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fa29 	bl	8001132 <enseq_RH_CONTROL_HORNO_Programacion_horno_default>
					transitioned_after = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
	} return transitioned_after;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <RH_CONTROL_HORNO_Ajuste_reloj_react>:

static sc_integer RH_CONTROL_HORNO_Ajuste_reloj_react(Microondas* handle, const sc_integer transitioned_before)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
	/* The reactions of state Ajuste_reloj. */
 			sc_integer transitioned_after = transitioned_before;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d052      	beq.n	8001db2 <RH_CONTROL_HORNO_Ajuste_reloj_react+0xc4>
	{ 
		if ((transitioned_after) < (0))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da10      	bge.n	8001d34 <RH_CONTROL_HORNO_Ajuste_reloj_react+0x46>
		{ 
			if (((handle->internal.conta) == (0)) || (handle->current.internal.sSW3_raised == bool_true))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b5b      	ldrb	r3, [r3, #13]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <RH_CONTROL_HORNO_Ajuste_reloj_react+0x36>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <RH_CONTROL_HORNO_Ajuste_reloj_react+0x46>
			{ 
				exseq_RH_CONTROL_HORNO_Ajuste_reloj(handle);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fca9 	bl	800167c <exseq_RH_CONTROL_HORNO_Ajuste_reloj>
				enseq_RH_CONTROL_HORNO_Horono_reposo_default(handle);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff f9ce 	bl	80010cc <enseq_RH_CONTROL_HORNO_Horono_reposo_default>
				transitioned_after = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d13a      	bne.n	8001db2 <RH_CONTROL_HORNO_Ajuste_reloj_react+0xc4>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Ajuste_reloj_time_event_0_raised == bool_true)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <RH_CONTROL_HORNO_Ajuste_reloj_react+0x64>
			{ 
				handle->internal.conta--;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7b5b      	ldrb	r3, [r3, #13]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	735a      	strb	r2, [r3, #13]
			} 
			if (handle->current.internal.sSW1_raised == bool_true)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <RH_CONTROL_HORNO_Ajuste_reloj_react+0x80>
			{ 
				handle->internal.contahr++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7bdb      	ldrb	r3, [r3, #15]
 8001d60:	3301      	adds	r3, #1
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	73da      	strb	r2, [r3, #15]
				handle->internal.conta = 5;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	735a      	strb	r2, [r3, #13]
			} 
			if ((handle->internal.contahr) == (24))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7bdb      	ldrb	r3, [r3, #15]
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	d102      	bne.n	8001d7c <RH_CONTROL_HORNO_Ajuste_reloj_react+0x8e>
			{ 
				handle->internal.contahr = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	73da      	strb	r2, [r3, #15]
			} 
			if (handle->current.internal.sSW2_raised == bool_true)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <RH_CONTROL_HORNO_Ajuste_reloj_react+0xaa>
			{ 
				handle->internal.contamin++;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7c1b      	ldrb	r3, [r3, #16]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	741a      	strb	r2, [r3, #16]
				handle->internal.conta = 5;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2205      	movs	r2, #5
 8001d96:	735a      	strb	r2, [r3, #13]
			} 
			if ((handle->internal.contamin) == (60))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7c1b      	ldrb	r3, [r3, #16]
 8001d9c:	2b3c      	cmp	r3, #60	; 0x3c
 8001d9e:	d108      	bne.n	8001db2 <RH_CONTROL_HORNO_Ajuste_reloj_react+0xc4>
			{ 
				handle->internal.contahr++;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7bdb      	ldrb	r3, [r3, #15]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	73da      	strb	r2, [r3, #15]
				handle->internal.contamin = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	741a      	strb	r2, [r3, #16]
			} 
		} 
	} return transitioned_after;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <RH_CONTROL_HORNO_Ventana2s_react>:

static sc_integer RH_CONTROL_HORNO_Ventana2s_react(Microondas* handle, const sc_integer transitioned_before)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	/* The reactions of state Ventana2s. */
 			sc_integer transitioned_after = transitioned_before;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001dd0:	f083 0301 	eor.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d026      	beq.n	8001e28 <RH_CONTROL_HORNO_Ventana2s_react+0x6c>
	{ 
		if ((transitioned_after) < (0))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da23      	bge.n	8001e28 <RH_CONTROL_HORNO_Ventana2s_react+0x6c>
		{ 
			if ((handle->current.ifaceESW1.nopress_raised == bool_true) || (handle->current.ifaceESW2.nopress_raised == bool_true))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d104      	bne.n	8001df4 <RH_CONTROL_HORNO_Ventana2s_react+0x38>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <RH_CONTROL_HORNO_Ventana2s_react+0x4a>
			{ 
				exseq_RH_CONTROL_HORNO_Ventana2s(handle);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fc52 	bl	800169e <exseq_RH_CONTROL_HORNO_Ventana2s>
				enseq_RH_CONTROL_HORNO_Horono_reposo_default(handle);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff f966 	bl	80010cc <enseq_RH_CONTROL_HORNO_Horono_reposo_default>
				transitioned_after = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	e010      	b.n	8001e28 <RH_CONTROL_HORNO_Ventana2s_react+0x6c>
			}  else
			{
				if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Ventana2s_time_event_0_raised == bool_true)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <RH_CONTROL_HORNO_Ventana2s_react+0x6c>
				{ 
					exseq_RH_CONTROL_HORNO_Ventana2s(handle);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fc44 	bl	800169e <exseq_RH_CONTROL_HORNO_Ventana2s>
					handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Ventana2s_time_event_0_raised = bool_false;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					enseq_RH_CONTROL_HORNO_Ajuste_reloj_default(handle);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff f965 	bl	80010ee <enseq_RH_CONTROL_HORNO_Ajuste_reloj_default>
					transitioned_after = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
	} return transitioned_after;
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <RH_CONTROL_HORNO_Programacion_horno_react>:

static sc_integer RH_CONTROL_HORNO_Programacion_horno_react(Microondas* handle, const sc_integer transitioned_before)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
	/* The reactions of state Programacion_horno. */
 			sc_integer transitioned_after = transitioned_before;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d067      	beq.n	8001f20 <RH_CONTROL_HORNO_Programacion_horno_react+0xee>
	{ 
		if ((transitioned_after) < (0))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da19      	bge.n	8001e8a <RH_CONTROL_HORNO_Programacion_horno_react+0x58>
		{ 
			if (handle->current.internal.sSW3_raised == bool_true)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <RH_CONTROL_HORNO_Programacion_horno_react+0x40>
			{ 
				exseq_RH_CONTROL_HORNO_Programacion_horno(handle);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fc2d 	bl	80016c0 <exseq_RH_CONTROL_HORNO_Programacion_horno>
				react_RH_CONTROL_HORNO__choice_0(handle);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fe54 	bl	8001b14 <react_RH_CONTROL_HORNO__choice_0>
				transitioned_after = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e00b      	b.n	8001e8a <RH_CONTROL_HORNO_Programacion_horno_react+0x58>
			}  else
			{
				if ((handle->internal.conta) == (0))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7b5b      	ldrb	r3, [r3, #13]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <RH_CONTROL_HORNO_Programacion_horno_react+0x58>
				{ 
					exseq_RH_CONTROL_HORNO_Programacion_horno(handle);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fc20 	bl	80016c0 <exseq_RH_CONTROL_HORNO_Programacion_horno>
					enseq_RH_CONTROL_HORNO_Reset_default(handle);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff f9ca 	bl	800121a <enseq_RH_CONTROL_HORNO_Reset_default>
					transitioned_after = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d146      	bne.n	8001f20 <RH_CONTROL_HORNO_Programacion_horno_react+0xee>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_0_raised == bool_true)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <RH_CONTROL_HORNO_Programacion_horno_react+0x76>
			{ 
				handle->internal.conta--;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7b5b      	ldrb	r3, [r3, #13]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	735a      	strb	r2, [r3, #13]
			} 
			if (handle->current.internal.sSW1_raised == bool_true)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <RH_CONTROL_HORNO_Programacion_horno_react+0x92>
			{ 
				handle->internal.mincoc++;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7c9b      	ldrb	r3, [r3, #18]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	749a      	strb	r2, [r3, #18]
				handle->internal.conta = 5;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	735a      	strb	r2, [r3, #13]
			} 
			if ((handle->internal.mincoc) == (60))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7c9b      	ldrb	r3, [r3, #18]
 8001ec8:	2b3c      	cmp	r3, #60	; 0x3c
 8001eca:	d102      	bne.n	8001ed2 <RH_CONTROL_HORNO_Programacion_horno_react+0xa0>
			{ 
				handle->internal.mincoc = 0;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	749a      	strb	r2, [r3, #18]
			} 
			if (handle->current.internal.sSW2_raised == bool_true)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <RH_CONTROL_HORNO_Programacion_horno_react+0xbc>
			{ 
				handle->internal.segcoc++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7cdb      	ldrb	r3, [r3, #19]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	74da      	strb	r2, [r3, #19]
				handle->internal.conta = 5;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2205      	movs	r2, #5
 8001eec:	735a      	strb	r2, [r3, #13]
			} 
			if ((handle->internal.segcoc) == (60))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7cdb      	ldrb	r3, [r3, #19]
 8001ef2:	2b3c      	cmp	r3, #60	; 0x3c
 8001ef4:	d102      	bne.n	8001efc <RH_CONTROL_HORNO_Programacion_horno_react+0xca>
			{ 
				handle->internal.segcoc = 0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	74da      	strb	r2, [r3, #19]
			} 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Programacion_horno_time_event_1_raised == bool_true)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <RH_CONTROL_HORNO_Programacion_horno_react+0xee>
			{ 
				handle->internal.vdp = ((handle->internal.vdp ^ 1));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7e9b      	ldrb	r3, [r3, #26]
 8001f0a:	f083 0301 	eor.w	r3, r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	769a      	strb	r2, [r3, #26]
				microondas_decimalPoint(handle, handle->internal.vdp);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7e9b      	ldrb	r3, [r3, #26]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 ffaa 	bl	8002e74 <microondas_decimalPoint>
			} 
		} 
	} return transitioned_after;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <RH_CONTROL_HORNO_Horno_encendido_react>:

static sc_integer RH_CONTROL_HORNO_Horno_encendido_react(Microondas* handle, const sc_integer transitioned_before)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	/* The reactions of state Horno_encendido. */
 			sc_integer transitioned_after = transitioned_before;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d031      	beq.n	8001fac <RH_CONTROL_HORNO_Horno_encendido_react+0x82>
	{ 
		if ((transitioned_after) < (0))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da0c      	bge.n	8001f68 <RH_CONTROL_HORNO_Horno_encendido_react+0x3e>
		{ 
			if (handle->current.internal.sSW3_raised == bool_true)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <RH_CONTROL_HORNO_Horno_encendido_react+0x3e>
			{ 
				exseq_RH_CONTROL_HORNO_Horno_encendido(handle);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fbc2 	bl	80016e2 <exseq_RH_CONTROL_HORNO_Horno_encendido>
				enseq_RH_CONTROL_HORNO_En_pausa_default(handle);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff f94a 	bl	80011f8 <enseq_RH_CONTROL_HORNO_En_pausa_default>
				transitioned_after = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d11d      	bne.n	8001fac <RH_CONTROL_HORNO_Horno_encendido_react+0x82>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_0_raised == bool_true)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <RH_CONTROL_HORNO_Horno_encendido_react+0x5e>
			{ 
				microondas_play(handle, MICROONDAS_MICROONDASINTERNAL_NOTA132, 100);
 8001f7a:	f641 538e 	movw	r3, #7566	; 0x1d8e
 8001f7e:	2264      	movs	r2, #100	; 0x64
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 ff92 	bl	8002eac <microondas_play>
			} 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_time_event_1_raised == bool_true)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <RH_CONTROL_HORNO_Horno_encendido_react+0x82>
			{ 
				handle->internal.vdp = ((handle->internal.vdp ^ 1));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7e9b      	ldrb	r3, [r3, #26]
 8001f96:	f083 0301 	eor.w	r3, r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	769a      	strb	r2, [r3, #26]
				microondas_decimalPoint(handle, handle->internal.vdp);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e9b      	ldrb	r3, [r3, #26]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 ff64 	bl	8002e74 <microondas_decimalPoint>
			} 
		} 
	} return transitioned_after;
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react>:

static sc_integer RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react(Microondas* handle, const sc_integer transitioned_before)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
	/* The reactions of state menosseg. */
 			sc_integer transitioned_after = transitioned_before;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d03f      	beq.n	8002054 <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x9e>
	{ 
		if ((transitioned_after) < (0))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da28      	bge.n	800202c <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x76>
		{ 
			if (((handle->internal.mincoc) > (0)) && ((handle->internal.segcoc) == (0)))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7c9b      	ldrb	r3, [r3, #18]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x4e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7cdb      	ldrb	r3, [r3, #19]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x4e>
			{ 
				exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(handle);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fb87 	bl	80016fe <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>
				enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_default(handle);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff f8ce 	bl	8001192 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_default>
				RH_CONTROL_HORNO_Horno_encendido_react(handle, 0);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff96 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
				transitioned_after = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e013      	b.n	800202c <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x76>
			}  else
			{
				if (((handle->internal.mincoc) == (0)) && ((handle->internal.segcoc) == (0)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7c9b      	ldrb	r3, [r3, #18]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10f      	bne.n	800202c <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x76>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7cdb      	ldrb	r3, [r3, #19]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x76>
				{ 
					exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(handle);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fb72 	bl	80016fe <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>
					enseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_default(handle);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff f8ca 	bl	80011b4 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_default>
					RH_CONTROL_HORNO_Horno_encendido_react(handle, 0);
 8002020:	2100      	movs	r1, #0
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff81 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
					transitioned_after = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d10f      	bne.n	8002054 <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x9e>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_time_event_0_raised == bool_true)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <RH_CONTROL_HORNO_Horno_encendido_r1_menosseg_react+0x94>
			{ 
				handle->internal.segcoc--;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7cdb      	ldrb	r3, [r3, #19]
 8002042:	3b01      	subs	r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	74da      	strb	r2, [r3, #19]
			} 
			transitioned_after = RH_CONTROL_HORNO_Horno_encendido_react(handle, transitioned_before);
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff6c 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
 8002052:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_react>:

static sc_integer RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_react(Microondas* handle, const sc_integer transitioned_before)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
	/* The reactions of state menosmin. */
 			sc_integer transitioned_after = transitioned_before;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_true)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d013      	beq.n	800209e <RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_react+0x40>
	{ 
		/* Default exit sequence for state menosmin */
		handle->stateConfVector[0] = Microondas_last_state;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
		handle->stateConfVectorPosition = 0;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	651a      	str	r2, [r3, #80]	; 0x50
		/* 'default' enter sequence for state menosseg */
		enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg(handle);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fdb5 	bl	8000bf2 <enact_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg>
		handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_menosseg;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2207      	movs	r2, #7
 800208c:	701a      	strb	r2, [r3, #0]
		handle->stateConfVectorPosition = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	651a      	str	r2, [r3, #80]	; 0x50
		RH_CONTROL_HORNO_Horno_encendido_react(handle, 0);
 8002094:	2100      	movs	r1, #0
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff47 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
 800209c:	e008      	b.n	80020b0 <RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_react+0x52>
	{
		if ((transitioned_after) < (0))
		{ 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d104      	bne.n	80020b0 <RH_CONTROL_HORNO_Horno_encendido_r1_menosmin_react+0x52>
		{ 
			transitioned_after = RH_CONTROL_HORNO_Horno_encendido_react(handle, transitioned_before);
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff3e 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
 80020ae:	60f8      	str	r0, [r7, #12]
		} 
	}
	return transitioned_after;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react>:

static sc_integer RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react(Microondas* handle, const sc_integer transitioned_before)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
	/* The reactions of state demoradesalida. */
 			sc_integer transitioned_after = transitioned_before;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020ce:	f083 0301 	eor.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react+0x60>
	{ 
		if ((transitioned_after) < (0))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da14      	bge.n	8002108 <RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react+0x4e>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_time_event_0_raised == bool_true)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00f      	beq.n	8002108 <RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react+0x4e>
			{ 
				exseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida(handle);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fb29 	bl	8001740 <exseq_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida>
				handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_time_event_0_raised = bool_false;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				enseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin_default(handle);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff f86d 	bl	80011d6 <enseq_RH_CONTROL_HORNO_Horno_encendido_r1_fin_default>
				RH_CONTROL_HORNO_Horno_encendido_react(handle, 0);
 80020fc:	2100      	movs	r1, #0
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff13 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
				transitioned_after = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d104      	bne.n	800211a <RH_CONTROL_HORNO_Horno_encendido_r1_demoradesalida_react+0x60>
		{ 
			transitioned_after = RH_CONTROL_HORNO_Horno_encendido_react(handle, transitioned_before);
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff09 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
 8002118:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <RH_CONTROL_HORNO_Horno_encendido_r1_fin_react>:

static sc_integer RH_CONTROL_HORNO_Horno_encendido_r1_fin_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	/* The reactions of state fin. */
 			sc_integer transitioned_after = transitioned_before;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_true)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00f      	beq.n	800215c <RH_CONTROL_HORNO_Horno_encendido_r1_fin_react+0x38>
	{ 
		/* Default exit sequence for state Horno_encendido */
		exseq_RH_CONTROL_HORNO_Horno_encendido_r1(handle);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fc95 	bl	8001a6c <exseq_RH_CONTROL_HORNO_Horno_encendido_r1>
		exact_RH_CONTROL_HORNO_Horno_encendido(handle);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe ff22 	bl	8000f8c <exact_RH_CONTROL_HORNO_Horno_encendido>
		/* 'default' enter sequence for state Horono_reposo */
		enact_RH_CONTROL_HORNO_Horono_reposo(handle);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe fcd4 	bl	8000af6 <enact_RH_CONTROL_HORNO_Horono_reposo>
		handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horono_reposo;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
		handle->stateConfVectorPosition = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	651a      	str	r2, [r3, #80]	; 0x50
 800215a:	e008      	b.n	800216e <RH_CONTROL_HORNO_Horno_encendido_r1_fin_react+0x4a>
	{
		if ((transitioned_after) < (0))
		{ 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d104      	bne.n	800216e <RH_CONTROL_HORNO_Horno_encendido_r1_fin_react+0x4a>
		{ 
			transitioned_after = RH_CONTROL_HORNO_Horno_encendido_react(handle, transitioned_before);
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fedf 	bl	8001f2a <RH_CONTROL_HORNO_Horno_encendido_react>
 800216c:	60f8      	str	r0, [r7, #12]
		} 
	}
	return transitioned_after;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <RH_CONTROL_HORNO_En_pausa_react>:

static sc_integer RH_CONTROL_HORNO_En_pausa_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
	/* The reactions of state En_pausa. */
 			sc_integer transitioned_after = transitioned_before;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800218c:	f083 0301 	eor.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d021      	beq.n	80021da <RH_CONTROL_HORNO_En_pausa_react+0x62>
	{ 
		if ((transitioned_after) < (0))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da1e      	bge.n	80021da <RH_CONTROL_HORNO_En_pausa_react+0x62>
		{ 
			if (handle->current.internal.sSW3_raised == bool_true)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <RH_CONTROL_HORNO_En_pausa_react+0x40>
			{ 
				exseq_RH_CONTROL_HORNO_En_pausa(handle);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff faeb 	bl	8001782 <exseq_RH_CONTROL_HORNO_En_pausa>
				enseq_RH_CONTROL_HORNO_Horno_encendido_default(handle);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe ffd1 	bl	8001154 <enseq_RH_CONTROL_HORNO_Horno_encendido_default>
				transitioned_after = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e010      	b.n	80021da <RH_CONTROL_HORNO_En_pausa_react+0x62>
			}  else
			{
				if (handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_En_pausa_time_event_0_raised == bool_true)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <RH_CONTROL_HORNO_En_pausa_react+0x62>
				{ 
					exseq_RH_CONTROL_HORNO_En_pausa(handle);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fadd 	bl	8001782 <exseq_RH_CONTROL_HORNO_En_pausa>
					handle->current.timeEvents.Microondas_RH_CONTROL_HORNO_En_pausa_time_event_0_raised = bool_false;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
					enseq_RH_CONTROL_HORNO_Reset_default(handle);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff f822 	bl	800121a <enseq_RH_CONTROL_HORNO_Reset_default>
					transitioned_after = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
	} return transitioned_after;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <RH_CONTROL_HORNO_Reset_react>:

static sc_integer RH_CONTROL_HORNO_Reset_react(Microondas* handle, const sc_integer transitioned_before)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
	/* The reactions of state Reset. */
 			sc_integer transitioned_after = transitioned_before;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_true)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00e      	beq.n	800221a <RH_CONTROL_HORNO_Reset_react+0x36>
	{ 
		/* Default exit sequence for state Reset */
		handle->stateConfVector[0] = Microondas_last_state;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
		handle->stateConfVectorPosition = 0;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	651a      	str	r2, [r3, #80]	; 0x50
		/* 'default' enter sequence for state Horono_reposo */
		enact_RH_CONTROL_HORNO_Horono_reposo(handle);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7fe fc74 	bl	8000af6 <enact_RH_CONTROL_HORNO_Horono_reposo>
		handle->stateConfVector[0] = Microondas_RH_CONTROL_HORNO_Horono_reposo;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	701a      	strb	r2, [r3, #0]
		handle->stateConfVectorPosition = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	651a      	str	r2, [r3, #80]	; 0x50
	{
		if ((transitioned_after) < (0))
		{ 
		} 
	}
	return transitioned_after;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <RH_CONTROL_RDSP_multiplexado_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
	/* The reactions of state multiplexado. */
 			sc_integer transitioned_after = transitioned_before;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <RH_CONTROL_RDSP_multiplexado_react+0x40>
	{ 
		if ((transitioned_after) < (1))
		{ 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d10c      	bne.n	8002264 <RH_CONTROL_RDSP_multiplexado_react+0x40>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_time_event_0_raised == bool_true)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <RH_CONTROL_RDSP_multiplexado_react+0x36>
			{ 
				handle->internal.sDISPARO_raised = bool_true;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	729a      	strb	r2, [r3, #10]
			} 
			transitioned_after = RH_CONTROL_react(handle, transitioned_before);
 800225a:	6839      	ldr	r1, [r7, #0]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fd01 	bl	8001c64 <RH_CONTROL_react>
 8002262:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <RH_CONTROL_RDSP_multiplexado_r1_display_apagado_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_r1_display_apagado_react(Microondas* handle, const sc_integer transitioned_before)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	/* The reactions of state display_apagado. */
 			sc_integer transitioned_after = transitioned_before;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d013      	beq.n	80022b4 <RH_CONTROL_RDSP_multiplexado_r1_display_apagado_react+0x46>
	{ 
		if ((transitioned_after) < (1))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	dc10      	bgt.n	80022b4 <RH_CONTROL_RDSP_multiplexado_r1_display_apagado_react+0x46>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_time_event_0_raised == bool_true)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00b      	beq.n	80022b4 <RH_CONTROL_RDSP_multiplexado_r1_display_apagado_react+0x46>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado(handle);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fa81 	bl	80017a4 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado>
				handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_time_event_0_raised = bool_false;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_default(handle);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe ffe8 	bl	8001280 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_default>
				transitioned_after = 1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
			} 
		} 
	} return transitioned_after;
 80022b4:	68fb      	ldr	r3, [r7, #12]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(Microondas* handle, const sc_integer transitioned_before)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
	/* The reactions of state display_encendido. */
 			sc_integer transitioned_after = transitioned_before;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d021      	beq.n	8002320 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react+0x62>
	{ 
		if ((transitioned_after) < (1))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	dc0f      	bgt.n	8002302 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react+0x44>
		{ 
			if ((((handle->internal.flag_ajuste_reloj) == (1)) == bool_true) && (((handle->internal.conta2) == (0)) == bool_true))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7c5b      	ldrb	r3, [r3, #17]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10b      	bne.n	8002302 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react+0x44>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7b9b      	ldrb	r3, [r3, #14]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react+0x44>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido(handle);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fa67 	bl	80017c6 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido>
				enseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_default(handle);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe ffb0 	bl	800125e <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_apagado_default>
				transitioned_after = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d10a      	bne.n	8002320 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react+0x62>
		{ 
			if (handle->current.timeEvents.Microondas_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_time_event_0_raised == bool_true)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react+0x62>
			{ 
				handle->internal.conta2 = (handle->internal.conta2 - 10);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7b9b      	ldrb	r3, [r3, #14]
 8002318:	3b0a      	subs	r3, #10
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	739a      	strb	r2, [r3, #14]
			} 
		} 
	} return transitioned_after;
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react(Microondas* handle, const sc_integer transitioned_before)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
	/* The reactions of state d2. */
 			sc_integer transitioned_after = transitioned_before;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01c      	beq.n	8002382 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react+0x58>
	{ 
		if ((transitioned_after) < (1))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	dc10      	bgt.n	8002370 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react+0x46>
		{ 
			if (handle->current.internal.sDISPARO_raised == bool_true)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react+0x46>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2(handle);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fa42 	bl	80017e2 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2>
				enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_default(handle);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe ffcf 	bl	8001302 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_default>
				RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, 1);
 8002364:	2101      	movs	r1, #1
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa9 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
				transitioned_after = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d104      	bne.n	8002382 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_react+0x58>
		{ 
			transitioned_after = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, transitioned_before);
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff9f 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
 8002380:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react(Microondas* handle, const sc_integer transitioned_before)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
	/* The reactions of state d3. */
 			sc_integer transitioned_after = transitioned_before;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01c      	beq.n	80023e4 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react+0x58>
	{ 
		if ((transitioned_after) < (1))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	dc10      	bgt.n	80023d2 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react+0x46>
		{ 
			if (handle->current.internal.sDISPARO_raised == bool_true)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react+0x46>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3(handle);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fa21 	bl	8001802 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3>
				enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_default(handle);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe ff6b 	bl	800129c <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d2_default>
				RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, 1);
 80023c6:	2101      	movs	r1, #1
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff78 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
				transitioned_after = 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d104      	bne.n	80023e4 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_react+0x58>
		{ 
			transitioned_after = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, transitioned_before);
 80023da:	6839      	ldr	r1, [r7, #0]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff6e 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
 80023e2:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react(Microondas* handle, const sc_integer transitioned_before)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
	/* The reactions of state d0. */
 			sc_integer transitioned_after = transitioned_before;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01c      	beq.n	8002446 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react+0x58>
	{ 
		if ((transitioned_after) < (1))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	dc10      	bgt.n	8002434 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react+0x46>
		{ 
			if (handle->current.internal.sDISPARO_raised == bool_true)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react+0x46>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0(handle);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fa00 	bl	8001822 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0>
				enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_default(handle);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe ff4b 	bl	80012be <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d3_default>
				RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, 1);
 8002428:	2101      	movs	r1, #1
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff47 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
				transitioned_after = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d104      	bne.n	8002446 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_react+0x58>
		{ 
			transitioned_after = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, transitioned_before);
 800243c:	6839      	ldr	r1, [r7, #0]
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff3d 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
 8002444:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
	/* The reactions of state d1. */
 			sc_integer transitioned_after = transitioned_before;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01c      	beq.n	80024a8 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react+0x58>
	{ 
		if ((transitioned_after) < (1))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	dc10      	bgt.n	8002496 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react+0x46>
		{ 
			if (handle->current.internal.sDISPARO_raised == bool_true)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react+0x46>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1(handle);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff f9df 	bl	8001842 <exseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1>
				enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_default(handle);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fe ff2b 	bl	80012e0 <enseq_RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d0_default>
				RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, 1);
 800248a:	2101      	movs	r1, #1
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff16 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
				transitioned_after = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d104      	bne.n	80024a8 <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_r1_d1_react+0x58>
		{ 
			transitioned_after = RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react(handle, transitioned_before);
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff0c 	bl	80022be <RH_CONTROL_RDSP_multiplexado_r1_display_encendido_react>
 80024a6:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 80024a8:	68fb      	ldr	r3, [r7, #12]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react(Microondas* handle, const sc_integer transitioned_before)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	/* The reactions of state presento_reloj. */
 			sc_integer transitioned_after = transitioned_before;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d05e      	beq.n	8002590 <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xdc>
	{ 
		if ((transitioned_after) < (2))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	dc10      	bgt.n	80024fa <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0x46>
		{ 
			if (handle->current.internal.smuestroTcoccion_raised == bool_true)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0x46>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj(handle);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff f9bd 	bl	8001862 <exseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj>
				enseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_default(handle);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe ff2b 	bl	8001344 <enseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_default>
				RH_CONTROL_RDSP_multiplexado_react(handle, 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fe97 	bl	8002224 <RH_CONTROL_RDSP_multiplexado_react>
				transitioned_after = 2;
 80024f6:	2302      	movs	r3, #2
 80024f8:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d146      	bne.n	8002590 <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xdc>
		{ 
			handle->internal.vd2 = (handle->internal.contahr % 10);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7bda      	ldrb	r2, [r3, #15]
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xe8>)
 8002508:	fba3 1302 	umull	r1, r3, r3, r2
 800250c:	08d9      	lsrs	r1, r3, #3
 800250e:	460b      	mov	r3, r1
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	755a      	strb	r2, [r3, #21]
			handle->internal.vd3 = (((handle->internal.contahr / 10)) % 10);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7bdb      	ldrb	r3, [r3, #15]
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xe8>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xe8>)
 800252e:	fba3 1302 	umull	r1, r3, r3, r2
 8002532:	08d9      	lsrs	r1, r3, #3
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b2da      	uxtb	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	751a      	strb	r2, [r3, #20]
			handle->internal.vd0 = (handle->internal.contamin % 10);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7c1a      	ldrb	r2, [r3, #16]
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xe8>)
 800254a:	fba3 1302 	umull	r1, r3, r3, r2
 800254e:	08d9      	lsrs	r1, r3, #3
 8002550:	460b      	mov	r3, r1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	75da      	strb	r2, [r3, #23]
			handle->internal.vd1 = (((handle->internal.contamin / 10)) % 10);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7c1b      	ldrb	r3, [r3, #16]
 8002564:	4a0d      	ldr	r2, [pc, #52]	; (800259c <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xe8>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	08db      	lsrs	r3, r3, #3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <RH_CONTROL_RDSP_multiplexado_i_presento_reloj_react+0xe8>)
 8002570:	fba3 1302 	umull	r1, r3, r3, r2
 8002574:	08d9      	lsrs	r1, r3, #3
 8002576:	460b      	mov	r3, r1
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	759a      	strb	r2, [r3, #22]
			transitioned_after = RH_CONTROL_RDSP_multiplexado_react(handle, transitioned_before);
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fe4b 	bl	8002224 <RH_CONTROL_RDSP_multiplexado_react>
 800258e:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	cccccccd 	.word	0xcccccccd

080025a0 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react>:

static sc_integer RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react(Microondas* handle, const sc_integer transitioned_before)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	/* The reactions of state presento_T_coccion. */
 			sc_integer transitioned_after = transitioned_before;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80025b4:	f083 0301 	eor.w	r3, r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d05e      	beq.n	800267c <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xdc>
	{ 
		if ((transitioned_after) < (2))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	dc10      	bgt.n	80025e6 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0x46>
		{ 
			if (handle->current.internal.smuestroreloj_raised == bool_true)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0x46>
			{ 
				exseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion(handle);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff f957 	bl	8001882 <exseq_RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion>
				enseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj_default(handle);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fe fea5 	bl	8001324 <enseq_RH_CONTROL_RDSP_multiplexado_i_presento_reloj_default>
				RH_CONTROL_RDSP_multiplexado_react(handle, 1);
 80025da:	2101      	movs	r1, #1
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fe21 	bl	8002224 <RH_CONTROL_RDSP_multiplexado_react>
				transitioned_after = 2;
 80025e2:	2302      	movs	r3, #2
 80025e4:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d146      	bne.n	800267c <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xdc>
		{ 
			handle->internal.vd2 = (handle->internal.mincoc % 10);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7c9a      	ldrb	r2, [r3, #18]
 80025f2:	4b25      	ldr	r3, [pc, #148]	; (8002688 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xe8>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	08d9      	lsrs	r1, r3, #3
 80025fa:	460b      	mov	r3, r1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	755a      	strb	r2, [r3, #21]
			handle->internal.vd3 = (((handle->internal.mincoc / 10)) % 10);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7c9b      	ldrb	r3, [r3, #18]
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xe8>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xe8>)
 800261a:	fba3 1302 	umull	r1, r3, r3, r2
 800261e:	08d9      	lsrs	r1, r3, #3
 8002620:	460b      	mov	r3, r1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	b2da      	uxtb	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	751a      	strb	r2, [r3, #20]
			handle->internal.vd0 = (handle->internal.segcoc % 10);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7cda      	ldrb	r2, [r3, #19]
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xe8>)
 8002636:	fba3 1302 	umull	r1, r3, r3, r2
 800263a:	08d9      	lsrs	r1, r3, #3
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	b2da      	uxtb	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	75da      	strb	r2, [r3, #23]
			handle->internal.vd1 = (((handle->internal.segcoc / 10)) % 10);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7cdb      	ldrb	r3, [r3, #19]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xe8>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <RH_CONTROL_RDSP_multiplexado_i_presento_T_coccion_react+0xe8>)
 800265c:	fba3 1302 	umull	r1, r3, r3, r2
 8002660:	08d9      	lsrs	r1, r3, #3
 8002662:	460b      	mov	r3, r1
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	759a      	strb	r2, [r3, #22]
			transitioned_after = RH_CONTROL_RDSP_multiplexado_react(handle, transitioned_before);
 8002672:	6839      	ldr	r1, [r7, #0]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fdd5 	bl	8002224 <RH_CONTROL_RDSP_multiplexado_react>
 800267a:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 800267c:	68fb      	ldr	r3, [r7, #12]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	cccccccd 	.word	0xcccccccd

0800268c <RS_SWITCHES_react>:

static sc_integer RS_SWITCHES_react(Microondas* handle, const sc_integer transitioned_before)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	/* The reactions of state SWITCHES. */
 			sc_integer transitioned_after = transitioned_before;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	60fb      	str	r3, [r7, #12]
	SC_UNUSED(handle);
	return transitioned_after;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <RS_SWITCHES_SW1_esperando_react>:

static sc_integer RS_SWITCHES_SW1_esperando_react(Microondas* handle, const sc_integer transitioned_before)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	/* The reactions of state esperando. */
 			sc_integer transitioned_after = transitioned_before;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80026bc:	f083 0301 	eor.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00f      	beq.n	80026e6 <RS_SWITCHES_SW1_esperando_react+0x3e>
	{ 
		if ((transitioned_after) < (3))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	dc0c      	bgt.n	80026e6 <RS_SWITCHES_SW1_esperando_react+0x3e>
		{ 
			if (handle->current.ifaceESW1.press_raised == bool_true)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <RS_SWITCHES_SW1_esperando_react+0x3e>
			{ 
				exseq_RS_SWITCHES_SW1_esperando(handle);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff f8e3 	bl	80018a2 <exseq_RS_SWITCHES_SW1_esperando>
				enseq_RS_SWITCHES_SW1_antirrebote_default(handle);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fe fe62 	bl	80013a6 <enseq_RS_SWITCHES_SW1_antirrebote_default>
				transitioned_after = 3;
 80026e2:	2303      	movs	r3, #3
 80026e4:	60fb      	str	r3, [r7, #12]
			} 
		} 
	} return transitioned_after;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <RS_SWITCHES_SW1_antirrebote_react>:

static sc_integer RS_SWITCHES_SW1_antirrebote_react(Microondas* handle, const sc_integer transitioned_before)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	/* The reactions of state antirrebote. */
 			sc_integer transitioned_after = transitioned_before;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002704:	f083 0301 	eor.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d013      	beq.n	8002736 <RS_SWITCHES_SW1_antirrebote_react+0x46>
	{ 
		if ((transitioned_after) < (3))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b02      	cmp	r3, #2
 8002712:	dc10      	bgt.n	8002736 <RS_SWITCHES_SW1_antirrebote_react+0x46>
		{ 
			if (handle->current.timeEvents.Microondas_RS_SWITCHES_SW1_antirrebote_time_event_0_raised == bool_true)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <RS_SWITCHES_SW1_antirrebote_react+0x46>
			{ 
				exseq_RS_SWITCHES_SW1_antirrebote(handle);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff f8cf 	bl	80018c2 <exseq_RS_SWITCHES_SW1_antirrebote>
				handle->current.timeEvents.Microondas_RS_SWITCHES_SW1_antirrebote_time_event_0_raised = bool_false;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
				enseq_RS_SWITCHES_SW1_verifico_default(handle);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fe fe4b 	bl	80013c8 <enseq_RS_SWITCHES_SW1_verifico_default>
				transitioned_after = 3;
 8002732:	2303      	movs	r3, #3
 8002734:	60fb      	str	r3, [r7, #12]
			} 
		} 
	} return transitioned_after;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <RS_SWITCHES_SW1_verifico_react>:

static sc_integer RS_SWITCHES_SW1_verifico_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	/* The reactions of state verifico. */
 			sc_integer transitioned_after = transitioned_before;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002754:	f083 0301 	eor.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01d      	beq.n	800279a <RS_SWITCHES_SW1_verifico_react+0x5a>
	{ 
		if ((transitioned_after) < (3))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b02      	cmp	r3, #2
 8002762:	dc1a      	bgt.n	800279a <RS_SWITCHES_SW1_verifico_react+0x5a>
		{ 
			if (handle->current.ifaceESW1.nopress_raised == bool_true)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <RS_SWITCHES_SW1_verifico_react+0x40>
			{ 
				exseq_RS_SWITCHES_SW1_verifico(handle);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff f8b8 	bl	80018e4 <exseq_RS_SWITCHES_SW1_verifico>
				enseq_RS_SWITCHES_SW1_esperando_default(handle);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe fe06 	bl	8001386 <enseq_RS_SWITCHES_SW1_esperando_default>
				transitioned_after = 3;
 800277a:	2303      	movs	r3, #3
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e00c      	b.n	800279a <RS_SWITCHES_SW1_verifico_react+0x5a>
			}  else
			{
				if (handle->current.ifaceESW1.press_raised == bool_true)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <RS_SWITCHES_SW1_verifico_react+0x5a>
				{ 
					exseq_RS_SWITCHES_SW1_verifico(handle);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff f8aa 	bl	80018e4 <exseq_RS_SWITCHES_SW1_verifico>
					enseq_RS_SWITCHES_SW1_trampa_default(handle);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fe29 	bl	80013e8 <enseq_RS_SWITCHES_SW1_trampa_default>
					transitioned_after = 3;
 8002796:	2303      	movs	r3, #3
 8002798:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
	} return transitioned_after;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <RS_SWITCHES_SW1_trampa_react>:

static sc_integer RS_SWITCHES_SW1_trampa_react(Microondas* handle, const sc_integer transitioned_before)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	/* The reactions of state trampa. */
 			sc_integer transitioned_after = transitioned_before;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00f      	beq.n	80027e2 <RS_SWITCHES_SW1_trampa_react+0x3e>
	{ 
		if ((transitioned_after) < (3))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	dc0c      	bgt.n	80027e2 <RS_SWITCHES_SW1_trampa_react+0x3e>
		{ 
			if (handle->current.ifaceESW1.nopress_raised == bool_true)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <RS_SWITCHES_SW1_trampa_react+0x3e>
			{ 
				exseq_RS_SWITCHES_SW1_trampa(handle);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff f896 	bl	8001904 <exseq_RS_SWITCHES_SW1_trampa>
				enseq_RS_SWITCHES_SW1_esperando_default(handle);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fe fdd4 	bl	8001386 <enseq_RS_SWITCHES_SW1_esperando_default>
				transitioned_after = 3;
 80027de:	2303      	movs	r3, #3
 80027e0:	60fb      	str	r3, [r7, #12]
			} 
		} 
	} return transitioned_after;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <RS_SWITCHES_SW2_esperando_react>:

static sc_integer RS_SWITCHES_SW2_esperando_react(Microondas* handle, const sc_integer transitioned_before)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	/* The reactions of state esperando. */
 			sc_integer transitioned_after = transitioned_before;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00f      	beq.n	800282a <RS_SWITCHES_SW2_esperando_react+0x3e>
	{ 
		if ((transitioned_after) < (4))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b03      	cmp	r3, #3
 800280e:	dc0c      	bgt.n	800282a <RS_SWITCHES_SW2_esperando_react+0x3e>
		{ 
			if (handle->current.ifaceESW2.press_raised == bool_true)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <RS_SWITCHES_SW2_esperando_react+0x3e>
			{ 
				exseq_RS_SWITCHES_SW2_esperando(handle);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff f882 	bl	8001924 <exseq_RS_SWITCHES_SW2_esperando>
				enseq_RS_SWITCHES_SW2_antirrebote_default(handle);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fe fe02 	bl	800142a <enseq_RS_SWITCHES_SW2_antirrebote_default>
				transitioned_after = 4;
 8002826:	2304      	movs	r3, #4
 8002828:	60fb      	str	r3, [r7, #12]
			} 
		} 
	} return transitioned_after;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <RS_SWITCHES_SW2_antirrebote_react>:

static sc_integer RS_SWITCHES_SW2_antirrebote_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	/* The reactions of state antirrebote. */
 			sc_integer transitioned_after = transitioned_before;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d013      	beq.n	800287a <RS_SWITCHES_SW2_antirrebote_react+0x46>
	{ 
		if ((transitioned_after) < (4))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b03      	cmp	r3, #3
 8002856:	dc10      	bgt.n	800287a <RS_SWITCHES_SW2_antirrebote_react+0x46>
		{ 
			if (handle->current.timeEvents.Microondas_RS_SWITCHES_SW2_antirrebote_time_event_0_raised == bool_true)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <RS_SWITCHES_SW2_antirrebote_react+0x46>
			{ 
				exseq_RS_SWITCHES_SW2_antirrebote(handle);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff f86e 	bl	8001944 <exseq_RS_SWITCHES_SW2_antirrebote>
				handle->current.timeEvents.Microondas_RS_SWITCHES_SW2_antirrebote_time_event_0_raised = bool_false;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				enseq_RS_SWITCHES_SW2_verifico_default(handle);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe fdeb 	bl	800144c <enseq_RS_SWITCHES_SW2_verifico_default>
				transitioned_after = 4;
 8002876:	2304      	movs	r3, #4
 8002878:	60fb      	str	r3, [r7, #12]
			} 
		} 
	} return transitioned_after;
 800287a:	68fb      	ldr	r3, [r7, #12]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <RS_SWITCHES_SW2_verifico_react>:

static sc_integer RS_SWITCHES_SW2_verifico_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	/* The reactions of state verifico. */
 			sc_integer transitioned_after = transitioned_before;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01d      	beq.n	80028de <RS_SWITCHES_SW2_verifico_react+0x5a>
	{ 
		if ((transitioned_after) < (4))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	dc1a      	bgt.n	80028de <RS_SWITCHES_SW2_verifico_react+0x5a>
		{ 
			if (handle->current.ifaceESW2.nopress_raised == bool_true)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <RS_SWITCHES_SW2_verifico_react+0x40>
			{ 
				exseq_RS_SWITCHES_SW2_verifico(handle);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff f857 	bl	8001966 <exseq_RS_SWITCHES_SW2_verifico>
				enseq_RS_SWITCHES_SW2_esperando_default(handle);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fe fda6 	bl	800140a <enseq_RS_SWITCHES_SW2_esperando_default>
				transitioned_after = 4;
 80028be:	2304      	movs	r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e00c      	b.n	80028de <RS_SWITCHES_SW2_verifico_react+0x5a>
			}  else
			{
				if (handle->current.ifaceESW2.press_raised == bool_true)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <RS_SWITCHES_SW2_verifico_react+0x5a>
				{ 
					exseq_RS_SWITCHES_SW2_verifico(handle);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff f849 	bl	8001966 <exseq_RS_SWITCHES_SW2_verifico>
					enseq_RS_SWITCHES_SW2_trampa_default(handle);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7fe fdc9 	bl	800146c <enseq_RS_SWITCHES_SW2_trampa_default>
					transitioned_after = 4;
 80028da:	2304      	movs	r3, #4
 80028dc:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
	} return transitioned_after;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <RS_SWITCHES_SW2_trampa_react>:

static sc_integer RS_SWITCHES_SW2_trampa_react(Microondas* handle, const sc_integer transitioned_before)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
	/* The reactions of state trampa. */
 			sc_integer transitioned_after = transitioned_before;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00f      	beq.n	8002926 <RS_SWITCHES_SW2_trampa_react+0x3e>
	{ 
		if ((transitioned_after) < (4))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b03      	cmp	r3, #3
 800290a:	dc0c      	bgt.n	8002926 <RS_SWITCHES_SW2_trampa_react+0x3e>
		{ 
			if (handle->current.ifaceESW2.nopress_raised == bool_true)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <RS_SWITCHES_SW2_trampa_react+0x3e>
			{ 
				exseq_RS_SWITCHES_SW2_trampa(handle);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff f835 	bl	8001986 <exseq_RS_SWITCHES_SW2_trampa>
				enseq_RS_SWITCHES_SW2_esperando_default(handle);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe fd74 	bl	800140a <enseq_RS_SWITCHES_SW2_esperando_default>
				transitioned_after = 4;
 8002922:	2304      	movs	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
			} 
		} 
	} return transitioned_after;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <RS_SWITCHES_SW3_esperando_react>:

static sc_integer RS_SWITCHES_SW3_esperando_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
	/* The reactions of state esperando. */
 			sc_integer transitioned_after = transitioned_before;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01c      	beq.n	8002988 <RS_SWITCHES_SW3_esperando_react+0x58>
	{ 
		if ((transitioned_after) < (5))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b04      	cmp	r3, #4
 8002952:	dc10      	bgt.n	8002976 <RS_SWITCHES_SW3_esperando_react+0x46>
		{ 
			if (handle->current.ifaceESW3.press_raised == bool_true)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <RS_SWITCHES_SW3_esperando_react+0x46>
			{ 
				exseq_RS_SWITCHES_SW3_esperando(handle);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff f821 	bl	80019a6 <exseq_RS_SWITCHES_SW3_esperando>
				enseq_RS_SWITCHES_SW3_antirrebote_default(handle);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7fe fda2 	bl	80014ae <enseq_RS_SWITCHES_SW3_antirrebote_default>
				RS_SWITCHES_react(handle, 3);
 800296a:	2103      	movs	r1, #3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fe8d 	bl	800268c <RS_SWITCHES_react>
				transitioned_after = 5;
 8002972:	2305      	movs	r3, #5
 8002974:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d104      	bne.n	8002988 <RS_SWITCHES_SW3_esperando_react+0x58>
		{ 
			transitioned_after = RS_SWITCHES_react(handle, transitioned_before);
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fe83 	bl	800268c <RS_SWITCHES_react>
 8002986:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002988:	68fb      	ldr	r3, [r7, #12]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <RS_SWITCHES_SW3_antirrebote_react>:

static sc_integer RS_SWITCHES_SW3_antirrebote_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	/* The reactions of state antirrebote. */
 			sc_integer transitioned_after = transitioned_before;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <RS_SWITCHES_SW3_antirrebote_react+0x60>
	{ 
		if ((transitioned_after) < (5))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	dc14      	bgt.n	80029e0 <RS_SWITCHES_SW3_antirrebote_react+0x4e>
		{ 
			if (handle->current.timeEvents.Microondas_RS_SWITCHES_SW3_antirrebote_time_event_0_raised == bool_true)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00f      	beq.n	80029e0 <RS_SWITCHES_SW3_antirrebote_react+0x4e>
			{ 
				exseq_RS_SWITCHES_SW3_antirrebote(handle);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff f800 	bl	80019c6 <exseq_RS_SWITCHES_SW3_antirrebote>
				handle->current.timeEvents.Microondas_RS_SWITCHES_SW3_antirrebote_time_event_0_raised = bool_false;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				enseq_RS_SWITCHES_SW3_verifico_default(handle);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fd7e 	bl	80014d0 <enseq_RS_SWITCHES_SW3_verifico_default>
				RS_SWITCHES_react(handle, 3);
 80029d4:	2103      	movs	r1, #3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fe58 	bl	800268c <RS_SWITCHES_react>
				transitioned_after = 5;
 80029dc:	2305      	movs	r3, #5
 80029de:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d104      	bne.n	80029f2 <RS_SWITCHES_SW3_antirrebote_react+0x60>
		{ 
			transitioned_after = RS_SWITCHES_react(handle, transitioned_before);
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fe4e 	bl	800268c <RS_SWITCHES_react>
 80029f0:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <RS_SWITCHES_SW3_verifico_react>:

static sc_integer RS_SWITCHES_SW3_verifico_react(Microondas* handle, const sc_integer transitioned_before)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	/* The reactions of state verifico. */
 			sc_integer transitioned_after = transitioned_before;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d02e      	beq.n	8002a78 <RS_SWITCHES_SW3_verifico_react+0x7c>
	{ 
		if ((transitioned_after) < (5))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	dc22      	bgt.n	8002a66 <RS_SWITCHES_SW3_verifico_react+0x6a>
		{ 
			if (handle->current.ifaceESW3.nopress_raised == bool_true)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <RS_SWITCHES_SW3_verifico_react+0x48>
			{ 
				exseq_RS_SWITCHES_SW3_verifico(handle);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe ffdc 	bl	80019e8 <exseq_RS_SWITCHES_SW3_verifico>
				enseq_RS_SWITCHES_SW3_esperando_default(handle);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe fd2c 	bl	800148e <enseq_RS_SWITCHES_SW3_esperando_default>
				RS_SWITCHES_react(handle, 3);
 8002a36:	2103      	movs	r1, #3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fe27 	bl	800268c <RS_SWITCHES_react>
				transitioned_after = 5;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e010      	b.n	8002a66 <RS_SWITCHES_SW3_verifico_react+0x6a>
			}  else
			{
				if (handle->current.ifaceESW3.press_raised == bool_true)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <RS_SWITCHES_SW3_verifico_react+0x6a>
				{ 
					exseq_RS_SWITCHES_SW3_verifico(handle);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe ffca 	bl	80019e8 <exseq_RS_SWITCHES_SW3_verifico>
					enseq_RS_SWITCHES_SW3_trampa_default(handle);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fe fd4b 	bl	80014f0 <enseq_RS_SWITCHES_SW3_trampa_default>
					RS_SWITCHES_react(handle, 3);
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fe15 	bl	800268c <RS_SWITCHES_react>
					transitioned_after = 5;
 8002a62:	2305      	movs	r3, #5
 8002a64:	60fb      	str	r3, [r7, #12]
				} 
			}
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d104      	bne.n	8002a78 <RS_SWITCHES_SW3_verifico_react+0x7c>
		{ 
			transitioned_after = RS_SWITCHES_react(handle, transitioned_before);
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fe0b 	bl	800268c <RS_SWITCHES_react>
 8002a76:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002a78:	68fb      	ldr	r3, [r7, #12]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <RS_SWITCHES_SW3_trampa_react>:

static sc_integer RS_SWITCHES_SW3_trampa_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
	/* The reactions of state trampa. */
 			sc_integer transitioned_after = transitioned_before;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a96:	f083 0301 	eor.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01c      	beq.n	8002ada <RS_SWITCHES_SW3_trampa_react+0x58>
	{ 
		if ((transitioned_after) < (5))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	dc10      	bgt.n	8002ac8 <RS_SWITCHES_SW3_trampa_react+0x46>
		{ 
			if (handle->current.ifaceESW3.nopress_raised == bool_true)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <RS_SWITCHES_SW3_trampa_react+0x46>
			{ 
				exseq_RS_SWITCHES_SW3_trampa(handle);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe ffa9 	bl	8001a08 <exseq_RS_SWITCHES_SW3_trampa>
				enseq_RS_SWITCHES_SW3_esperando_default(handle);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fce9 	bl	800148e <enseq_RS_SWITCHES_SW3_esperando_default>
				RS_SWITCHES_react(handle, 3);
 8002abc:	2103      	movs	r1, #3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fde4 	bl	800268c <RS_SWITCHES_react>
				transitioned_after = 5;
 8002ac4:	2305      	movs	r3, #5
 8002ac6:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d104      	bne.n	8002ada <RS_SWITCHES_SW3_trampa_react+0x58>
		{ 
			transitioned_after = RS_SWITCHES_react(handle, transitioned_before);
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fdda 	bl	800268c <RS_SWITCHES_react>
 8002ad8:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <RR_Reloj_react>:

static sc_integer RR_Reloj_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
	/* The reactions of state Reloj. */
 			sc_integer transitioned_after = transitioned_before;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d03a      	beq.n	8002b78 <RR_Reloj_react+0x94>
	{ 
		if ((transitioned_after) < (6))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	dc0f      	bgt.n	8002b28 <RR_Reloj_react+0x44>
		{ 
			if ((handle->internal.flag_ajuste_reloj) == (1))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7c5b      	ldrb	r3, [r3, #17]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10b      	bne.n	8002b28 <RR_Reloj_react+0x44>
			{ 
				exseq_RR_Reloj(handle);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fe ff89 	bl	8001a28 <exseq_RR_Reloj>
				enseq_RR_Reloj_detenido_default(handle);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fd0c 	bl	8001534 <enseq_RR_Reloj_detenido_default>
				react(handle, 0);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff f894 	bl	8001c4c <react>
				transitioned_after = 6;
 8002b24:	2306      	movs	r3, #6
 8002b26:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d123      	bne.n	8002b78 <RR_Reloj_react+0x94>
		{ 
			if (handle->current.timeEvents.Microondas_RR_Reloj_time_event_0_raised == bool_true)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <RR_Reloj_react+0x62>
			{ 
				handle->internal.contamin++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7c1b      	ldrb	r3, [r3, #16]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	741a      	strb	r2, [r3, #16]
			} 
			if ((handle->internal.contamin) == (60))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7c1b      	ldrb	r3, [r3, #16]
 8002b4a:	2b3c      	cmp	r3, #60	; 0x3c
 8002b4c:	d108      	bne.n	8002b60 <RR_Reloj_react+0x7c>
			{ 
				handle->internal.contahr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7bdb      	ldrb	r3, [r3, #15]
 8002b52:	3301      	adds	r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	73da      	strb	r2, [r3, #15]
				handle->internal.contamin = 0;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	741a      	strb	r2, [r3, #16]
			} 
			if ((handle->internal.contahr) == (24))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7bdb      	ldrb	r3, [r3, #15]
 8002b64:	2b18      	cmp	r3, #24
 8002b66:	d102      	bne.n	8002b6e <RR_Reloj_react+0x8a>
			{ 
				handle->internal.contahr = 0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	73da      	strb	r2, [r3, #15]
			} 
			transitioned_after = react(handle, transitioned_before);
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff f86b 	bl	8001c4c <react>
 8002b76:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <RR_Reloj_detenido_react>:

static sc_integer RR_Reloj_detenido_react(Microondas* handle, const sc_integer transitioned_before)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
	/* The reactions of state Reloj_detenido. */
 			sc_integer transitioned_after = transitioned_before;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002b96:	f083 0301 	eor.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <RR_Reloj_detenido_react+0x56>
	{ 
		if ((transitioned_after) < (6))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	dc0f      	bgt.n	8002bc6 <RR_Reloj_detenido_react+0x44>
		{ 
			if ((handle->internal.flag_ajuste_reloj) == (0))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7c5b      	ldrb	r3, [r3, #17]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <RR_Reloj_detenido_react+0x44>
			{ 
				exseq_RR_Reloj_detenido(handle);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe ff4b 	bl	8001a4a <exseq_RR_Reloj_detenido>
				enseq_RR_Reloj_default(handle);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7fe fcac 	bl	8001512 <enseq_RR_Reloj_default>
				react(handle, 0);
 8002bba:	2100      	movs	r1, #0
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff f845 	bl	8001c4c <react>
				transitioned_after = 6;
 8002bc2:	2306      	movs	r3, #6
 8002bc4:	60fb      	str	r3, [r7, #12]
			} 
		} 
		/* If no transition was taken then execute local reactions */
		if ((transitioned_after) == (transitioned_before))
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d104      	bne.n	8002bd8 <RR_Reloj_detenido_react+0x56>
		{ 
			transitioned_after = react(handle, transitioned_before);
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff f83b 	bl	8001c4c <react>
 8002bd6:	60f8      	str	r0, [r7, #12]
		} 
	} return transitioned_after;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <main>:
uint8_t UpdateTimerFlag=false;

extern uint16_t vStopBuzzer;

int main(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
	SysTick_Init (SYSTICK_FREQ_HZ);		// Para hacer el multiplexado del display.
 8002bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bee:	f000 fe73 	bl	80038d8 <SysTick_Init>

	/* Inicialice sus Perifericos AQUI*/
	/* Conf. Entradas */
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA Peripheral clock
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <main+0x120>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a42      	ldr	r2, [pc, #264]	; (8002d04 <main+0x120>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <main+0x120>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
	In_Init(GPIOA, SW1|SW2|SW3);
 8002c0e:	2134      	movs	r1, #52	; 0x34
 8002c10:	483d      	ldr	r0, [pc, #244]	; (8002d08 <main+0x124>)
 8002c12:	f000 fdde 	bl	80037d2 <In_Init>
	/* Conf. Salidas */
	__HAL_RCC_GPIOC_CLK_ENABLE(); // Enable GPIOC Peripheral clock	(Para seleccionar los digitos del display)
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <main+0x120>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <main+0x120>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <main+0x120>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE(); // Enable GPIOD Peripheral clock	(Para seleccionar los segmentos del display)
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <main+0x120>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <main+0x120>)
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <main+0x120>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();	  // Habilito el Timer 2. (el que me genera las interrupciones del ADC)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <main+0x120>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <main+0x120>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <main+0x120>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
	Buzzer_Init();
 8002c6a:	f000 fce5 	bl	8003638 <Buzzer_Init>
	Out_Init(GPIOC, SEL_MUX_0|SEL_MUX_1);	// Defino como salidas las entradas al decodificador.
 8002c6e:	2105      	movs	r1, #5
 8002c70:	4826      	ldr	r0, [pc, #152]	; (8002d0c <main+0x128>)
 8002c72:	f000 fdc5 	bl	8003800 <Out_Init>
	Out_Init(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD);
 8002c76:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002c7a:	4825      	ldr	r0, [pc, #148]	; (8002d10 <main+0x12c>)
 8002c7c:	f000 fdc0 	bl	8003800 <Out_Init>


	/*Inicialización del servicio de timers de la StateChart*/


	sc_timer_service_init(&timer_service, timers, MAX_TIMERS,
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <main+0x130>)
 8002c82:	220a      	movs	r2, #10
 8002c84:	4924      	ldr	r1, [pc, #144]	; (8002d18 <main+0x134>)
 8002c86:	4825      	ldr	r0, [pc, #148]	; (8002d1c <main+0x138>)
 8002c88:	f000 f9f3 	bl	8003072 <sc_timer_service_init>
			(sc_raise_time_event_fp) &microondas_raise_time_event);
	/*Inicializa la maquina de estados*/
	microondas_init(&ls);
 8002c8c:	4824      	ldr	r0, [pc, #144]	; (8002d20 <main+0x13c>)
 8002c8e:	f7fd fa9b 	bl	80001c8 <microondas_init>
	/*Ingresa a la maquina de estados*/
	microondas_enter(&ls);
 8002c92:	4823      	ldr	r0, [pc, #140]	; (8002d20 <main+0x13c>)
 8002c94:	f7fd fb3f 	bl	8000316 <microondas_enter>
	while (1) // Loop infinito.
	{
		if (UpdateTimerFlag)	// TRUE?->Entonces se ejecuta un nuevo ciclo de la SC
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <main+0x140>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0fb      	beq.n	8002c98 <main+0xb4>
		{
			// Manejo de Eventos de Entrada
			// Ej: Estado del SW1->Evento
			if ((GPIOA->IDR & SW1)==0)  // Estado de SW1?
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <main+0x124>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <main+0xd0>
				microondas_eSW1_raise_press (&ls);
 8002cac:	481c      	ldr	r0, [pc, #112]	; (8002d20 <main+0x13c>)
 8002cae:	f7fd fed3 	bl	8000a58 <microondas_eSW1_raise_press>
 8002cb2:	e002      	b.n	8002cba <main+0xd6>
			else
				microondas_eSW1_raise_nopress (&ls);
 8002cb4:	481a      	ldr	r0, [pc, #104]	; (8002d20 <main+0x13c>)
 8002cb6:	f7fd fedc 	bl	8000a72 <microondas_eSW1_raise_nopress>

			if ((GPIOA->IDR & SW2)==0)  // Estado de SW1?
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <main+0x124>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <main+0xea>
				microondas_eSW2_raise_press (&ls);
 8002cc6:	4816      	ldr	r0, [pc, #88]	; (8002d20 <main+0x13c>)
 8002cc8:	f7fd fee0 	bl	8000a8c <microondas_eSW2_raise_press>
 8002ccc:	e002      	b.n	8002cd4 <main+0xf0>
			else
				microondas_eSW2_raise_nopress (&ls);
 8002cce:	4814      	ldr	r0, [pc, #80]	; (8002d20 <main+0x13c>)
 8002cd0:	f7fd fee9 	bl	8000aa6 <microondas_eSW2_raise_nopress>

			if ((GPIOA->IDR & SW3)==0)  // Estado de SW1?
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <main+0x124>)
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <main+0x104>
				microondas_eSW3_raise_press (&ls);
 8002ce0:	480f      	ldr	r0, [pc, #60]	; (8002d20 <main+0x13c>)
 8002ce2:	f7fd feed 	bl	8000ac0 <microondas_eSW3_raise_press>
 8002ce6:	e002      	b.n	8002cee <main+0x10a>
			else
				microondas_eSW3_raise_nopress (&ls);
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <main+0x13c>)
 8002cea:	f7fd fef6 	bl	8000ada <microondas_eSW3_raise_nopress>


			sc_timer_service_proceed(&timer_service, 1/*MS*/); // Incrementa el timer de la SC.
 8002cee:	2101      	movs	r1, #1
 8002cf0:	480a      	ldr	r0, [pc, #40]	; (8002d1c <main+0x138>)
 8002cf2:	f000 f9e6 	bl	80030c2 <sc_timer_service_proceed>
			microondas_run_cycle(&ls);	// Se ejecuta un ciclo de la StateChart.
 8002cf6:	480a      	ldr	r0, [pc, #40]	; (8002d20 <main+0x13c>)
 8002cf8:	f7fd fab6 	bl	8000268 <microondas_run_cycle>
			UpdateTimerFlag=false;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <main+0x140>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
		if (UpdateTimerFlag)	// TRUE?->Entonces se ejecuta un nuevo ciclo de la SC
 8002d02:	e7c9      	b.n	8002c98 <main+0xb4>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	0800038f 	.word	0x0800038f
 8002d18:	20000028 	.word	0x20000028
 8002d1c:	20000118 	.word	0x20000118
 8002d20:	20000160 	.word	0x20000160
 8002d24:	20000124 	.word	0x20000124

08002d28 <SysTickHook>:
	}
}

// ----------------------------------------------------------------------------
void SysTickHook (void) // Para colgarse del System Tick
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	/*Sincronizacion del timer del micro con los timers de la maquina de estados*/
		UpdateTimerFlag=true;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <SysTickHook+0x30>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
		if (vStopBuzzer>0){
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <SysTickHook+0x34>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <SysTickHook+0x2a>
			vStopBuzzer--; //para ir decrementando el contador de duracion del buzzer. cada vez que entra resta 1ms
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <SysTickHook+0x34>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <SysTickHook+0x34>)
 8002d44:	801a      	strh	r2, [r3, #0]
			if (vStopBuzzer==0){
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <SysTickHook+0x34>)
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <SysTickHook+0x2a>
				stop_Buzzer();
 8002d4e:	f000 fd33 	bl	80037b8 <stop_Buzzer>
			}
		}
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000124 	.word	0x20000124
 8002d5c:	2000015c 	.word	0x2000015c

08002d60 <microondas_selector>:


void microondas_selector(const Microondas* handle,uint8_t digito  )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
	switch(digito){		// display organizado como: D3.D2.D1.D0
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d836      	bhi.n	8002de0 <microondas_selector+0x80>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <microondas_selector+0x18>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d9f 	.word	0x08002d9f
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08002dcb 	.word	0x08002dcb
		case 0:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_RESET);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	4816      	ldr	r0, [pc, #88]	; (8002de8 <microondas_selector+0x88>)
 8002d8e:	f000 fc39 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_RESET);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2101      	movs	r1, #1
 8002d96:	4814      	ldr	r0, [pc, #80]	; (8002de8 <microondas_selector+0x88>)
 8002d98:	f000 fc34 	bl	8003604 <HAL_GPIO_WritePin>
			break;
 8002d9c:	e020      	b.n	8002de0 <microondas_selector+0x80>
		case 1:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_RESET);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2104      	movs	r1, #4
 8002da2:	4811      	ldr	r0, [pc, #68]	; (8002de8 <microondas_selector+0x88>)
 8002da4:	f000 fc2e 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_SET);
 8002da8:	2201      	movs	r2, #1
 8002daa:	2101      	movs	r1, #1
 8002dac:	480e      	ldr	r0, [pc, #56]	; (8002de8 <microondas_selector+0x88>)
 8002dae:	f000 fc29 	bl	8003604 <HAL_GPIO_WritePin>
			break;
 8002db2:	e015      	b.n	8002de0 <microondas_selector+0x80>
		case 2:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_SET);
 8002db4:	2201      	movs	r2, #1
 8002db6:	2104      	movs	r1, #4
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <microondas_selector+0x88>)
 8002dba:	f000 fc23 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_RESET);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4809      	ldr	r0, [pc, #36]	; (8002de8 <microondas_selector+0x88>)
 8002dc4:	f000 fc1e 	bl	8003604 <HAL_GPIO_WritePin>
			break;
 8002dc8:	e00a      	b.n	8002de0 <microondas_selector+0x80>
		case 3:
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_1, GPIO_PIN_SET);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	2104      	movs	r1, #4
 8002dce:	4806      	ldr	r0, [pc, #24]	; (8002de8 <microondas_selector+0x88>)
 8002dd0:	f000 fc18 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, SEL_MUX_0, GPIO_PIN_SET);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4803      	ldr	r0, [pc, #12]	; (8002de8 <microondas_selector+0x88>)
 8002dda:	f000 fc13 	bl	8003604 <HAL_GPIO_WritePin>
			break;
 8002dde:	bf00      	nop
		}
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40020800 	.word	0x40020800

08002dec <microondas_display>:
void microondas_display(const Microondas* handle, uint8_t numero)
{
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
	// Tabla de Conversion BCD -> 7 segmentos
	const uint32_t BIN7SEG[] = {
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <microondas_display+0x54>)
 8002dfa:	f107 0408 	add.w	r4, r7, #8
 8002dfe:	461d      	mov	r5, r3
 8002e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e0c:	e884 0003 	stmia.w	r4, {r0, r1}
	SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g,	// Ocho
	SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_f|SEGMENTO_g,				// Nueve

	};

	HAL_GPIO_WritePin(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD , GPIO_PIN_RESET);
 8002e10:	2200      	movs	r2, #0
 8002e12:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002e16:	480b      	ldr	r0, [pc, #44]	; (8002e44 <microondas_display+0x58>)
 8002e18:	f000 fbf4 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, BIN7SEG[numero], GPIO_PIN_SET);	//Enciendo los segmentos correspondientes.
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e24:	4413      	add	r3, r2
 8002e26:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4804      	ldr	r0, [pc, #16]	; (8002e44 <microondas_display+0x58>)
 8002e32:	f000 fbe7 	bl	8003604 <HAL_GPIO_WritePin>

	}
 8002e36:	bf00      	nop
 8002e38:	3730      	adds	r7, #48	; 0x30
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	0800456c 	.word	0x0800456c
 8002e44:	40020c00 	.word	0x40020c00

08002e48 <microondas_displayapagado>:

void microondas_displayapagado(const Microondas* handle, uint8_t dispoff)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
	if (dispoff==1){
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <microondas_displayapagado+0x1e>
		HAL_GPIO_WritePin(GPIOD, SEGMENTO_a|SEGMENTO_b|SEGMENTO_c|SEGMENTO_d|SEGMENTO_e|SEGMENTO_f|SEGMENTO_g|SEGMENTO_PD , GPIO_PIN_RESET);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002e60:	4803      	ldr	r0, [pc, #12]	; (8002e70 <microondas_displayapagado+0x28>)
 8002e62:	f000 fbcf 	bl	8003604 <HAL_GPIO_WritePin>
	}

}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40020c00 	.word	0x40020c00

08002e74 <microondas_decimalPoint>:

void microondas_decimalPoint (const Microondas* handle, uint8_t dp  )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
	if(dp==1){
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d106      	bne.n	8002e94 <microondas_decimalPoint+0x20>
		HAL_GPIO_WritePin(GPIOD, SEGMENTO_PD , GPIO_PIN_SET);
 8002e86:	2201      	movs	r2, #1
 8002e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e8c:	4806      	ldr	r0, [pc, #24]	; (8002ea8 <microondas_decimalPoint+0x34>)
 8002e8e:	f000 fbb9 	bl	8003604 <HAL_GPIO_WritePin>
	}
	else
		HAL_GPIO_WritePin(GPIOD, SEGMENTO_PD , GPIO_PIN_RESET);
}
 8002e92:	e005      	b.n	8002ea0 <microondas_decimalPoint+0x2c>
		HAL_GPIO_WritePin(GPIOD, SEGMENTO_PD , GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <microondas_decimalPoint+0x34>)
 8002e9c:	f000 fbb2 	bl	8003604 <HAL_GPIO_WritePin>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40020c00 	.word	0x40020c00

08002eac <microondas_play>:

void microondas_play(const Microondas* handle, uint16_t periodo, uint16_t duracion)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	803b      	strh	r3, [r7, #0]
	play_Buzzer(periodo, duracion);
 8002ebc:	883a      	ldrh	r2, [r7, #0]
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fc3e 	bl	8003744 <play_Buzzer>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <microondas_set_timer>:
// Continue aqui
// ...

//! callback implementation for the setting up time events
void microondas_set_timer(Microondas* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	70fb      	strb	r3, [r7, #3]
    sc_timer_set(&timer_service, handle, evid, time_ms, periodic);
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <microondas_set_timer+0x28>)
 8002eea:	f000 f828 	bl	8002f3e <sc_timer_set>
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000118 	.word	0x20000118

08002efc <microondas_unset_timer>:
//
////! callback implementation for canceling time events.
void microondas_unset_timer(Microondas* handle, const sc_eventid evid)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    sc_timer_unset(&timer_service, evid);
 8002f06:	6839      	ldr	r1, [r7, #0]
 8002f08:	4803      	ldr	r0, [pc, #12]	; (8002f18 <microondas_unset_timer+0x1c>)
 8002f0a:	f000 f87a 	bl	8003002 <sc_timer_unset>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000118 	.word	0x20000118

08002f1c <sc_timer_fired>:
#include "sc_timer_service.h"

/*! Implementation of a timer service for YAKINDU SCT state machines. */

/*! Callback that is called when a timer fires. */
static void sc_timer_fired(sc_timer_t *timer) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	timer->service->raise_event(timer->handle, timer->pt_evid);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6910      	ldr	r0, [r2, #16]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68d2      	ldr	r2, [r2, #12]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4798      	blx	r3
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <sc_timer_set>:

/*! Starts a timer with the specified parameters. */
void sc_timer_set(sc_timer_service_t *this, void *handle,
		const sc_eventid evid, const sc_integer time_ms,
		const sc_boolean periodic) {
 8002f3e:	b480      	push	{r7}
 8002f40:	b087      	sub	sp, #28
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]

	int i;

	/* go through all timers ... */
	for (i = 0; i < this->timer_count; i++) {
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e04b      	b.n	8002fea <sc_timer_set+0xac>

		/* ... and find an unused one. */
		if (this->timers[i].pt_evid == sc_null) {
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13d      	bne.n	8002fe4 <sc_timer_set+0xa6>

			/* set timer properties */
			this->timers[i].pt_evid = evid;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	60da      	str	r2, [r3, #12]
			this->timers[i].time_ms = time_ms;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	601a      	str	r2, [r3, #0]
			this->timers[i].periodic = periodic;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fa4:	711a      	strb	r2, [r3, #4]
			this->timers[i].handle = handle;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	611a      	str	r2, [r3, #16]
			this->timers[i].service = this;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	615a      	str	r2, [r3, #20]

			/* reset the elapsed time ... */
			this->timers[i].elapsed_time_ms = 0;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]

			break;
 8002fe2:	e008      	b.n	8002ff6 <sc_timer_set+0xb8>
	for (i = 0; i < this->timer_count; i++) {
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	dbae      	blt.n	8002f52 <sc_timer_set+0x14>
		}
	}

}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <sc_timer_unset>:

/*! Cancels a timer for the specified time event. */
void sc_timer_unset(sc_timer_service_t *this, const sc_eventid evid) {
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]

	int i;

	for (i = 0; i < this->timer_count; i++) {
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e023      	b.n	800305a <sc_timer_unset+0x58>
		if (this->timers[i].pt_evid == evid) {
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	440b      	add	r3, r1
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d114      	bne.n	8003054 <sc_timer_unset+0x52>

			this->timers[i].pt_evid = sc_null;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
			this->timers[i].handle = sc_null;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
			break;
 8003052:	e008      	b.n	8003066 <sc_timer_unset+0x64>
	for (i = 0; i < this->timer_count; i++) {
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	dbd6      	blt.n	8003012 <sc_timer_unset+0x10>

		}
	}
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <sc_timer_service_init>:

/*! Initializes a timer service with a set of timers. */
void sc_timer_service_init(sc_timer_service_t *tservice, sc_timer_t *timers,
		sc_integer count, sc_raise_time_event_fp raise_event) {
 8003072:	b480      	push	{r7}
 8003074:	b087      	sub	sp, #28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]

	int i;

	tservice->timers = timers;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	605a      	str	r2, [r3, #4]
	tservice->timer_count = count;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < count; i++) {
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e00a      	b.n	80030a8 <sc_timer_service_init+0x36>
		tservice->timers->pt_evid = sc_null;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
		tservice->timers->service = tservice;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	615a      	str	r2, [r3, #20]
	for (i = 0; i < count; i++) {
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	dbf0      	blt.n	8003092 <sc_timer_service_init+0x20>
	}

	tservice->raise_event = raise_event;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	609a      	str	r2, [r3, #8]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <sc_timer_service_proceed>:

/*! Updates all timers. */
void sc_timer_service_proceed(sc_timer_service_t *this,
		const sc_integer time_ms) {
 80030c2:	b590      	push	{r4, r7, lr}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]

	int i;
	
	/* go through all timers and update their time */
	for (i = 0; i < this->timer_count; i++) {
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e035      	b.n	800313e <sc_timer_service_proceed+0x7c>

		/* process only used ones */
		if (this->timers[i].pt_evid != sc_null) {
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d027      	beq.n	8003138 <sc_timer_service_proceed+0x76>

			if (this->timers[i].elapsed_time_ms < this->timers[i].time_ms) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6858      	ldr	r0, [r3, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4403      	add	r3, r0
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4299      	cmp	r1, r3
 800310e:	da13      	bge.n	8003138 <sc_timer_service_proceed+0x76>
				this->timers[i].elapsed_time_ms += time_ms;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6858      	ldr	r0, [r3, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4403      	add	r3, r0
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	440a      	add	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
	for (i = 0; i < this->timer_count; i++) {
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	429a      	cmp	r2, r3
 8003146:	dbc4      	blt.n	80030d2 <sc_timer_service_proceed+0x10>
			}
		}
	}
	/* go through all timers and raise time event if timer is elapsed */
	for (i = 0; i < this->timer_count; i++) {
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e053      	b.n	80031f6 <sc_timer_service_proceed+0x134>

		/* process only used ones */
		if (this->timers[i].pt_evid != sc_null) {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d045      	beq.n	80031f0 <sc_timer_service_proceed+0x12e>

			/* raise Time Event if the timer is elapsed */
			if (this->timers[i].elapsed_time_ms >= this->timers[i].time_ms) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6858      	ldr	r0, [r3, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4403      	add	r3, r0
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4299      	cmp	r1, r3
 800318a:	db31      	blt.n	80031f0 <sc_timer_service_proceed+0x12e>

				/* update periodic timer */
				if (this->timers[i].periodic) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	791b      	ldrb	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01b      	beq.n	80031da <sc_timer_service_proceed+0x118>
					this->timers[i].elapsed_time_ms -= this->timers[i].time_ms;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	6898      	ldr	r0, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685c      	ldr	r4, [r3, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4423      	add	r3, r4
 80031d6:	1a42      	subs	r2, r0, r1
 80031d8:	609a      	str	r2, [r3, #8]
				}
				/* raise time event */
				sc_timer_fired(&(this->timers[i]));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe96 	bl	8002f1c <sc_timer_fired>
	for (i = 0; i < this->timer_count; i++) {
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dba6      	blt.n	800314e <sc_timer_service_proceed+0x8c>
			}
		}
	}
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}
	...

0800320c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <SystemInit+0x60>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <SystemInit+0x60>)
 8003218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800321c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <SystemInit+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a12      	ldr	r2, [pc, #72]	; (8003270 <SystemInit+0x64>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <SystemInit+0x64>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <SystemInit+0x64>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <SystemInit+0x64>)
 8003238:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800323c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <SystemInit+0x64>)
 8003244:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <SystemInit+0x68>)
 8003246:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <SystemInit+0x64>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a08      	ldr	r2, [pc, #32]	; (8003270 <SystemInit+0x64>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <SystemInit+0x64>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <SystemInit+0x60>)
 800325c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003260:	609a      	str	r2, [r3, #8]
#endif
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00
 8003270:	40023800 	.word	0x40023800
 8003274:	24003010 	.word	0x24003010

08003278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800327c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800327e:	e003      	b.n	8003288 <LoopCopyDataInit>

08003280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003286:	3104      	adds	r1, #4

08003288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003288:	480b      	ldr	r0, [pc, #44]	; (80032b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800328c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800328e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003290:	d3f6      	bcc.n	8003280 <CopyDataInit>
  ldr  r2, =_sbss
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003294:	e002      	b.n	800329c <LoopFillZerobss>

08003296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003298:	f842 3b04 	str.w	r3, [r2], #4

0800329c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800329e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032a0:	d3f9      	bcc.n	8003296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032a2:	f7ff ffb3 	bl	800320c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a6:	f001 f93d 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032aa:	f7ff fc9b 	bl	8002be4 <main>
  bx  lr    
 80032ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032b4:	080045cc 	.word	0x080045cc
  ldr  r0, =_sdata
 80032b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032bc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80032c0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80032c4:	200001f8 	.word	0x200001f8

080032c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC_IRQHandler>
	...

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e16b      	b.n	80035c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	f040 815a 	bne.w	80035ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x4a>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b12      	cmp	r3, #18
 8003314:	d123      	bne.n	800335e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	69b9      	ldr	r1, [r7, #24]
 800335a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d00b      	beq.n	80033b2 <HAL_GPIO_Init+0xe6>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033a6:	2b11      	cmp	r3, #17
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b12      	cmp	r3, #18
 80033b0:	d130      	bne.n	8003414 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0201 	and.w	r2, r3, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80b4 	beq.w	80035ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b60      	ldr	r3, [pc, #384]	; (80035d8 <HAL_GPIO_Init+0x30c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	4a5f      	ldr	r2, [pc, #380]	; (80035d8 <HAL_GPIO_Init+0x30c>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003460:	6453      	str	r3, [r2, #68]	; 0x44
 8003462:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <HAL_GPIO_Init+0x30c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346e:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <HAL_GPIO_Init+0x310>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a52      	ldr	r2, [pc, #328]	; (80035e0 <HAL_GPIO_Init+0x314>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02b      	beq.n	80034f2 <HAL_GPIO_Init+0x226>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <HAL_GPIO_Init+0x318>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x222>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a50      	ldr	r2, [pc, #320]	; (80035e8 <HAL_GPIO_Init+0x31c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x21e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4f      	ldr	r2, [pc, #316]	; (80035ec <HAL_GPIO_Init+0x320>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x21a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	; (80035f0 <HAL_GPIO_Init+0x324>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x216>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4d      	ldr	r2, [pc, #308]	; (80035f4 <HAL_GPIO_Init+0x328>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x212>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4c      	ldr	r2, [pc, #304]	; (80035f8 <HAL_GPIO_Init+0x32c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x20e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	; (80035fc <HAL_GPIO_Init+0x330>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x20a>
 80034d2:	2307      	movs	r3, #7
 80034d4:	e00e      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034d6:	2308      	movs	r3, #8
 80034d8:	e00c      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034da:	2306      	movs	r3, #6
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034de:	2305      	movs	r3, #5
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034f2:	2300      	movs	r3, #0
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003504:	4935      	ldr	r1, [pc, #212]	; (80035dc <HAL_GPIO_Init+0x310>)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003536:	4a32      	ldr	r2, [pc, #200]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_GPIO_Init+0x334>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_GPIO_Init+0x334>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_GPIO_Init+0x334>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	f67f ae90 	bls.w	80032e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40013800 	.word	0x40013800
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40021400 	.word	0x40021400
 80035f8:	40021800 	.word	0x40021800
 80035fc:	40021c00 	.word	0x40021c00
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <Buzzer_Init>:
TIM_MasterConfigTypeDef sMasterConfig = {0};
TIM_OC_InitTypeDef sConfigOC = {0};
uint16_t vStopBuzzer=0; // Duracion buzzer en ms
//======================================================
void Buzzer_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
	volatile uint32_t PCLK1;
	htim2.Instance = TIM2;
 800363e:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <Buzzer_Init+0xf8>)
 8003640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003644:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <Buzzer_Init+0xf8>)
 8003648:	2210      	movs	r2, #16
 800364a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800364c:	4b38      	ldr	r3, [pc, #224]	; (8003730 <Buzzer_Init+0xf8>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 200;
 8003652:	4b37      	ldr	r3, [pc, #220]	; (8003730 <Buzzer_Init+0xf8>)
 8003654:	22c8      	movs	r2, #200	; 0xc8
 8003656:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003658:	4b35      	ldr	r3, [pc, #212]	; (8003730 <Buzzer_Init+0xf8>)
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <Buzzer_Init+0xf8>)
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003664:	4832      	ldr	r0, [pc, #200]	; (8003730 <Buzzer_Init+0xf8>)
 8003666:	f000 f97f 	bl	8003968 <HAL_TIM_Base_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <Buzzer_Init+0x3c>
	{
		Error_Handler();
 8003670:	f000 f8ac 	bl	80037cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003674:	4b2f      	ldr	r3, [pc, #188]	; (8003734 <Buzzer_Init+0xfc>)
 8003676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800367a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800367c:	492d      	ldr	r1, [pc, #180]	; (8003734 <Buzzer_Init+0xfc>)
 800367e:	482c      	ldr	r0, [pc, #176]	; (8003730 <Buzzer_Init+0xf8>)
 8003680:	f000 fb38 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <Buzzer_Init+0x56>
	{
		Error_Handler();
 800368a:	f000 f89f 	bl	80037cc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800368e:	4828      	ldr	r0, [pc, #160]	; (8003730 <Buzzer_Init+0xf8>)
 8003690:	f000 f99f 	bl	80039d2 <HAL_TIM_PWM_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <Buzzer_Init+0x66>
	{
		Error_Handler();
 800369a:	f000 f897 	bl	80037cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <Buzzer_Init+0x100>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <Buzzer_Init+0x100>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036aa:	4923      	ldr	r1, [pc, #140]	; (8003738 <Buzzer_Init+0x100>)
 80036ac:	4820      	ldr	r0, [pc, #128]	; (8003730 <Buzzer_Init+0xf8>)
 80036ae:	f000 fef4 	bl	800449a <HAL_TIMEx_MasterConfigSynchronization>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <Buzzer_Init+0x84>
	{
		Error_Handler();
 80036b8:	f000 f888 	bl	80037cc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <Buzzer_Init+0x104>)
 80036be:	2260      	movs	r2, #96	; 0x60
 80036c0:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 100;
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <Buzzer_Init+0x104>)
 80036c4:	2264      	movs	r2, #100	; 0x64
 80036c6:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036c8:	4b1c      	ldr	r3, [pc, #112]	; (800373c <Buzzer_Init+0x104>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <Buzzer_Init+0x104>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036d4:	220c      	movs	r2, #12
 80036d6:	4919      	ldr	r1, [pc, #100]	; (800373c <Buzzer_Init+0x104>)
 80036d8:	4815      	ldr	r0, [pc, #84]	; (8003730 <Buzzer_Init+0xf8>)
 80036da:	f000 fa45 	bl	8003b68 <HAL_TIM_PWM_ConfigChannel>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <Buzzer_Init+0xb0>
	{
		Error_Handler();
 80036e4:	f000 f872 	bl	80037cc <Error_Handler>
	}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	463b      	mov	r3, r7
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	611a      	str	r2, [r3, #16]
	if(htim2.Instance==TIM2)
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <Buzzer_Init+0xf8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d10e      	bne.n	800371e <Buzzer_Init+0xe6>
	{
		//__HAL_RCC_GPIOA_CLK_ENABLE();
		/**TIM2 GPIO Configuration
	      PA3     ------> TIM2_CH4 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003700:	2308      	movs	r3, #8
 8003702:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003710:	2301      	movs	r3, #1
 8003712:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003714:	463b      	mov	r3, r7
 8003716:	4619      	mov	r1, r3
 8003718:	4809      	ldr	r0, [pc, #36]	; (8003740 <Buzzer_Init+0x108>)
 800371a:	f7ff fdd7 	bl	80032cc <HAL_GPIO_Init>
	}
	PCLK1=HAL_RCC_GetPCLK1Freq(); // Frecuencia PCLK1
 800371e:	f000 f90f 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8003722:	4603      	mov	r3, r0
 8003724:	617b      	str	r3, [r7, #20]
 }
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200001b4 	.word	0x200001b4
 8003734:	20000128 	.word	0x20000128
 8003738:	20000138 	.word	0x20000138
 800373c:	20000140 	.word	0x20000140
 8003740:	40020000 	.word	0x40020000

08003744 <play_Buzzer>:


void play_Buzzer(uint16_t periodo, uint16_t duracion)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	460a      	mov	r2, r1
 800374e:	80fb      	strh	r3, [r7, #6]
 8003750:	4613      	mov	r3, r2
 8003752:	80bb      	strh	r3, [r7, #4]
	if (periodo>2 && duracion>0)
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d924      	bls.n	80037a4 <play_Buzzer+0x60>
 800375a:	88bb      	ldrh	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d021      	beq.n	80037a4 <play_Buzzer+0x60>
	{
		htim2.Init.Period = periodo;
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <play_Buzzer+0x68>)
 8003764:	60d3      	str	r3, [r2, #12]
		if (HAL_TIM_Base_Init(&htim2) != HAL_OK) // actualizo periodo
 8003766:	4811      	ldr	r0, [pc, #68]	; (80037ac <play_Buzzer+0x68>)
 8003768:	f000 f8fe 	bl	8003968 <HAL_TIM_Base_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <play_Buzzer+0x32>
			{
				Error_Handler();
 8003772:	f000 f82b 	bl	80037cc <Error_Handler>
			}
		sConfigOC.Pulse = (periodo>>1);
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <play_Buzzer+0x6c>)
 8003780:	605a      	str	r2, [r3, #4]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) // actualizo ciclo de trabajo
 8003782:	220c      	movs	r2, #12
 8003784:	490a      	ldr	r1, [pc, #40]	; (80037b0 <play_Buzzer+0x6c>)
 8003786:	4809      	ldr	r0, [pc, #36]	; (80037ac <play_Buzzer+0x68>)
 8003788:	f000 f9ee 	bl	8003b68 <HAL_TIM_PWM_ConfigChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <play_Buzzer+0x52>
			{
				Error_Handler();
 8003792:	f000 f81b 	bl	80037cc <Error_Handler>
			}
		vStopBuzzer=duracion;
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <play_Buzzer+0x70>)
 8003798:	88bb      	ldrh	r3, [r7, #4]
 800379a:	8013      	strh	r3, [r2, #0]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800379c:	210c      	movs	r1, #12
 800379e:	4803      	ldr	r0, [pc, #12]	; (80037ac <play_Buzzer+0x68>)
 80037a0:	f000 f94c 	bl	8003a3c <HAL_TIM_PWM_Start>
	}
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200001b4 	.word	0x200001b4
 80037b0:	20000140 	.word	0x20000140
 80037b4:	2000015c 	.word	0x2000015c

080037b8 <stop_Buzzer>:

void stop_Buzzer(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop (&htim2, TIM_CHANNEL_4);
 80037bc:	210c      	movs	r1, #12
 80037be:	4802      	ldr	r0, [pc, #8]	; (80037c8 <stop_Buzzer+0x10>)
 80037c0:	f000 f97a 	bl	8003ab8 <HAL_TIM_PWM_Stop>
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200001b4 	.word	0x200001b4

080037cc <Error_Handler>:

void Error_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
    while(1)
 80037d0:	e7fe      	b.n	80037d0 <Error_Handler+0x4>

080037d2 <In_Init>:
 */
#include "Entradas.h"
/*----------------------------------------------------------------------------
  Inicializa Pines del Puerto, especificados en la mascara, como entrada
 *----------------------------------------------------------------------------*/
void In_Init(GPIO_TypeDef  *GPIOx, uint32_t mask) {
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b088      	sub	sp, #32
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pin =mask;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;		// Frec.Max.
 80037e8:	2301      	movs	r3, #1
 80037ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fd6a 	bl	80032cc <HAL_GPIO_Init>
}
 80037f8:	bf00      	nop
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <Out_Init>:
 */
#include "Salidas.h"
/*----------------------------------------------------------------------------
  inicializa Port E/S
 *----------------------------------------------------------------------------*/
void Out_Init(GPIO_TypeDef  *GPIOx, uint32_t mask) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	// Configure pin(s)
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = mask;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;	// Pin(s) as Output
 800380e:	2301      	movs	r3, #1
 8003810:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;		// Frec.Max.
 8003812:	2301      	movs	r3, #1
 8003814:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;			// Pin(s) as No Pull
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);		// Initialize GPIO_InitStructure on GPIOx
 800381a:	f107 030c 	add.w	r3, r7, #12
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fd53 	bl	80032cc <HAL_GPIO_Init>
}
 8003826:	bf00      	nop
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	; (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003894:	d301      	bcc.n	800389a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003896:	2301      	movs	r3, #1
 8003898:	e00f      	b.n	80038ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <SysTick_Config+0x40>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a2:	210f      	movs	r1, #15
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	f7ff ffc2 	bl	8003830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <SysTick_Config+0x40>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <SysTick_Config+0x40>)
 80038b4:	2207      	movs	r2, #7
 80038b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	e000e010 	.word	0xe000e010

080038c8 <SysTick_Handler>:
#include "SysTick.h"
// ----------------------------------------------------------------------------
// ----- SysTick_Handler() ----------------------------------------------------
// ----------------------------------------------------------------------------
void SysTick_Handler (void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	HAL_IncTick();	//Incrementa Tick del sistema (usado por algunas funciones de HAL Driver)
 80038cc:	f000 f818 	bl	8003900 <HAL_IncTick>
	SysTickHook (); // Función para colgarse de la interrupción del System Tick
 80038d0:	f7ff fa2a 	bl	8002d28 <SysTickHook>
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <SysTick_Init>:

void SysTick_Init(uint16_t Frec_Ticks_Hz){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]
	SysTick_Config (SystemCoreClock / Frec_Ticks_Hz);
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <SysTick_Init+0x24>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ffc9 	bl	8003884 <SysTick_Config>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_IncTick+0x20>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_IncTick+0x24>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4413      	add	r3, r2
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_IncTick+0x24>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000008 	.word	0x20000008
 8003924:	200001f4 	.word	0x200001f4

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	080045a4 	.word	0x080045a4

08003968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e01d      	b.n	80039b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f815 	bl	80039be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f000 fa68 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e01d      	b.n	8003a20 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f815 	bl	8003a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f000 fa33 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fcfe 	bl	8004450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <HAL_TIM_PWM_Start+0x74>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIM_PWM_Start+0x2c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <HAL_TIM_PWM_Start+0x78>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_TIM_PWM_Start+0x30>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_TIM_PWM_Start+0x32>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d007      	beq.n	8003aa4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fcc0 	bl	8004450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_TIM_PWM_Stop+0xa8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_TIM_PWM_Stop+0x2c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_TIM_PWM_Stop+0xac>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIM_PWM_Stop+0x30>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <HAL_TIM_PWM_Stop+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d017      	beq.n	8003b1e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a1a      	ldr	r2, [r3, #32]
 8003af4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_TIM_PWM_Stop+0x66>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a1a      	ldr	r2, [r3, #32]
 8003b04:	f240 4344 	movw	r3, #1092	; 0x444
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <HAL_TIM_PWM_Stop+0x66>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_TIM_PWM_Stop+0x96>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	f240 4344 	movw	r3, #1092	; 0x444
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <HAL_TIM_PWM_Stop+0x96>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40010400 	.word	0x40010400

08003b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e0b4      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	f200 809f 	bhi.w	8003cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003b9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bd5 	.word	0x08003bd5
 8003ba4:	08003cd9 	.word	0x08003cd9
 8003ba8:	08003cd9 	.word	0x08003cd9
 8003bac:	08003cd9 	.word	0x08003cd9
 8003bb0:	08003c15 	.word	0x08003c15
 8003bb4:	08003cd9 	.word	0x08003cd9
 8003bb8:	08003cd9 	.word	0x08003cd9
 8003bbc:	08003cd9 	.word	0x08003cd9
 8003bc0:	08003c57 	.word	0x08003c57
 8003bc4:	08003cd9 	.word	0x08003cd9
 8003bc8:	08003cd9 	.word	0x08003cd9
 8003bcc:	08003cd9 	.word	0x08003cd9
 8003bd0:	08003c97 	.word	0x08003c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f9ee 	bl	8003fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0208 	orr.w	r2, r2, #8
 8003bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0204 	bic.w	r2, r2, #4
 8003bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6999      	ldr	r1, [r3, #24]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	619a      	str	r2, [r3, #24]
      break;
 8003c12:	e062      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fa3e 	bl	800409c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6999      	ldr	r1, [r3, #24]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	619a      	str	r2, [r3, #24]
      break;
 8003c54:	e041      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa93 	bl	8004188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0208 	orr.w	r2, r2, #8
 8003c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0204 	bic.w	r2, r2, #4
 8003c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
      break;
 8003c94:	e021      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fae7 	bl	8004270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69d9      	ldr	r1, [r3, #28]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	021a      	lsls	r2, r3, #8
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	61da      	str	r2, [r3, #28]
      break;
 8003cd6:	e000      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003cd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIM_ConfigClockSource+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0b3      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x180>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d44:	d03e      	beq.n	8003dc4 <HAL_TIM_ConfigClockSource+0xd0>
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4a:	f200 8087 	bhi.w	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	f000 8085 	beq.w	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	d87f      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d5c:	2b70      	cmp	r3, #112	; 0x70
 8003d5e:	d01a      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0xa2>
 8003d60:	2b70      	cmp	r3, #112	; 0x70
 8003d62:	d87b      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d050      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x116>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d877      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d6c:	2b50      	cmp	r3, #80	; 0x50
 8003d6e:	d03c      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0xf6>
 8003d70:	2b50      	cmp	r3, #80	; 0x50
 8003d72:	d873      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d058      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x136>
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d86f      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d7c:	2b30      	cmp	r3, #48	; 0x30
 8003d7e:	d064      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x156>
 8003d80:	2b30      	cmp	r3, #48	; 0x30
 8003d82:	d86b      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d060      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x156>
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d867      	bhi.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d05c      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x156>
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d05a      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d94:	e062      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f000 fb33 	bl	8004410 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	609a      	str	r2, [r3, #8]
      break;
 8003dc2:	e04e      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f000 fb1c 	bl	8004410 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de6:	609a      	str	r2, [r3, #8]
      break;
 8003de8:	e03b      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f000 fa90 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2150      	movs	r1, #80	; 0x50
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fae9 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e08:	e02b      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 faaf 	bl	800437a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2160      	movs	r1, #96	; 0x60
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fad9 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e28:	e01b      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 fa70 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fac9 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e48:	e00b      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f000 fac0 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a40      	ldr	r2, [pc, #256]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3d      	ldr	r2, [pc, #244]	; (8003f94 <TIM_Base_SetConfig+0x118>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3c      	ldr	r2, [pc, #240]	; (8003f98 <TIM_Base_SetConfig+0x11c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <TIM_Base_SetConfig+0x120>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d027      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <TIM_Base_SetConfig+0x118>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d023      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <TIM_Base_SetConfig+0x11c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <TIM_Base_SetConfig+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d017      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <TIM_Base_SetConfig+0x128>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <TIM_Base_SetConfig+0x12c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00f      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <TIM_Base_SetConfig+0x130>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <TIM_Base_SetConfig+0x134>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a24      	ldr	r2, [pc, #144]	; (8003fb4 <TIM_Base_SetConfig+0x138>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <TIM_Base_SetConfig+0x13c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0xf8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d103      	bne.n	8003f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	615a      	str	r2, [r3, #20]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40010400 	.word	0x40010400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800
 8003fb0:	40001800 	.word	0x40001800
 8003fb4:	40001c00 	.word	0x40001c00
 8003fb8:	40002000 	.word	0x40002000

08003fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f023 0201 	bic.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 0302 	bic.w	r3, r3, #2
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a20      	ldr	r2, [pc, #128]	; (8004094 <TIM_OC1_SetConfig+0xd8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC1_SetConfig+0x64>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <TIM_OC1_SetConfig+0xdc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10c      	bne.n	800403a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0308 	bic.w	r3, r3, #8
 8004026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <TIM_OC1_SetConfig+0xd8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_OC1_SetConfig+0x8e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <TIM_OC1_SetConfig+0xdc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d111      	bne.n	800406e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40010000 	.word	0x40010000
 8004098:	40010400 	.word	0x40010400

0800409c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a22      	ldr	r2, [pc, #136]	; (8004180 <TIM_OC2_SetConfig+0xe4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC2_SetConfig+0x68>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <TIM_OC2_SetConfig+0xe8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10d      	bne.n	8004120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <TIM_OC2_SetConfig+0xe4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC2_SetConfig+0x94>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <TIM_OC2_SetConfig+0xe8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d113      	bne.n	8004158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40010400 	.word	0x40010400

08004188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <TIM_OC3_SetConfig+0xe0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_OC3_SetConfig+0x66>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <TIM_OC3_SetConfig+0xe4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10d      	bne.n	800420a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <TIM_OC3_SetConfig+0xe0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC3_SetConfig+0x92>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a15      	ldr	r2, [pc, #84]	; (800426c <TIM_OC3_SetConfig+0xe4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d113      	bne.n	8004242 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40010000 	.word	0x40010000
 800426c:	40010400 	.word	0x40010400

08004270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <TIM_OC4_SetConfig+0xa4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_OC4_SetConfig+0x68>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <TIM_OC4_SetConfig+0xa8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d109      	bne.n	80042ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40010400 	.word	0x40010400

0800431c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 030a 	bic.w	r3, r3, #10
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437a:	b480      	push	{r7}
 800437c:	b087      	sub	sp, #28
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0210 	bic.w	r2, r3, #16
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	031b      	lsls	r3, r3, #12
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f043 0307 	orr.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	431a      	orrs	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2201      	movs	r2, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1a      	ldr	r2, [r3, #32]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e032      	b.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ea:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4d0d      	ldr	r5, [pc, #52]	; (800455c <__libc_init_array+0x38>)
 8004528:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	2600      	movs	r6, #0
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	4d0b      	ldr	r5, [pc, #44]	; (8004564 <__libc_init_array+0x40>)
 8004536:	4c0c      	ldr	r4, [pc, #48]	; (8004568 <__libc_init_array+0x44>)
 8004538:	f000 f838 	bl	80045ac <_init>
 800453c:	1b64      	subs	r4, r4, r5
 800453e:	10a4      	asrs	r4, r4, #2
 8004540:	2600      	movs	r6, #0
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	080045c4 	.word	0x080045c4
 8004560:	080045c4 	.word	0x080045c4
 8004564:	080045c4 	.word	0x080045c4
 8004568:	080045c8 	.word	0x080045c8
 800456c:	0000eb00 	.word	0x0000eb00
 8004570:	00000900 	.word	0x00000900
 8004574:	00007300 	.word	0x00007300
 8004578:	00005b00 	.word	0x00005b00
 800457c:	00009900 	.word	0x00009900
 8004580:	0000da00 	.word	0x0000da00
 8004584:	0000ba00 	.word	0x0000ba00
 8004588:	00004900 	.word	0x00004900
 800458c:	0000fb00 	.word	0x0000fb00
 8004590:	0000d900 	.word	0x0000d900

08004594 <AHBPrescTable>:
	...
 800459c:	04030201 09080706                       ........

080045a4 <APBPrescTable>:
 80045a4:	00000000 04030201                       ........

080045ac <_init>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr

080045b8 <_fini>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr
